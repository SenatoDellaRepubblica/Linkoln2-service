/* The following code was generated by JFlex 1.7.0 */

/*******************************************************************************
 * Copyright (c) 2016-2021 Institute of Legal Information and Judicial Systems IGSG-CNR (formerly ITTIG-CNR)
 * 
 * This program and the accompanying materials  are made available under the terms of the GNU General Public
 * License as published by the Free Software Foundation; either version 3 of the License, or (at your option)
 * any later version. 
 * You may not use this work except in compliance with the Licence.
 * You may obtain a copy of the Licence at: https://www.gnu.org/licenses/gpl-3.0.txt
 * Unless required by applicable law or agreed to in writing, software distributed under the Licence is 
 * distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the Licence for the specific language governing permissions and limitations under the Licence.
 *  
 * Authors: Lorenzo Bacci (IGSG-CNR)
 ******************************************************************************/
 package it.cnr.igsg.linkoln.service.impl.it;

import java.io.IOException;
import java.io.StringReader;

import it.cnr.igsg.linkoln.entity.*;
import it.cnr.igsg.linkoln.service.*;

import it.cnr.igsg.linkoln.service.impl.Util;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>jflex/SectionSubjects.jflex</tt>
 */
public class SectionSubjects extends LinkolnAnnotationService {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int lkn = 2;
  public static final int sectionSubjectState = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\13\1\2\1\0\1\13\1\1\22\0\1\13\5\0\1\5"+
    "\1\0\1\14\1\14\2\0\1\14\1\3\1\51\1\52\1\50\1\50"+
    "\1\50\1\50\1\50\1\50\1\50\1\50\1\50\1\50\1\15\1\12"+
    "\5\0\1\27\1\7\1\36\1\30\1\34\1\30\1\30\1\63\1\45"+
    "\1\30\1\57\1\54\1\30\1\6\1\47\1\11\1\30\1\30\1\24"+
    "\1\42\1\40\1\32\1\65\1\30\1\30\1\23\1\60\1\0\1\61"+
    "\1\0\1\4\1\0\1\26\1\20\1\35\1\25\1\33\1\25\1\25"+
    "\1\62\1\44\1\25\1\56\1\53\1\25\1\17\1\46\1\22\1\25"+
    "\1\25\1\21\1\41\1\37\1\31\1\64\1\25\1\25\1\16\12\0"+
    "\1\0\44\0\1\0\5\0\1\0\3\0\1\0\5\0\1\0\5\0"+
    "\1\25\1\25\4\25\1\0\1\25\1\25\1\25\2\25\1\25\1\25"+
    "\2\25\1\0\1\25\1\25\1\25\3\25\2\0\1\25\1\25\2\25"+
    "\3\0\1\25\1\25\4\25\1\0\1\25\1\25\1\25\2\25\1\25"+
    "\1\25\2\25\1\0\1\25\1\25\1\25\3\25\2\0\1\25\1\25"+
    "\2\25\53\0\1\25\1\25\6\0\2\43\66\0\1\25\1\25\4\0"+
    "\1\25\1\25\17\0\1\10\u1c88\0\1\25\1\25\216\0\2\25\42\0"+
    "\1\25\1\25\u0144\0\1\13\20\0\1\3\1\3\4\0\1\0\16\0"+
    "\1\0\1\0\u0100\0\1\55\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\3\1\2\2\4\3\11\0\1\4\1\5\11\0"+
    "\1\4\1\0\1\5\6\0\1\6\14\0\2\7\1\0"+
    "\1\7\3\10\1\0\1\10\21\0\1\11\27\0\1\12"+
    "\15\0\1\11\24\0\2\13\1\0\2\13\10\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[152];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\242\0\u0144"+
    "\0\242\0\u017a\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288\0\u02be"+
    "\0\u02f4\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e"+
    "\0\u04a4\0\u04da\0\u0510\0\u0546\0\u057c\0\u05b2\0\u05e8\0\u061e"+
    "\0\242\0\u0654\0\242\0\u068a\0\u06c0\0\u06f6\0\u072c\0\u0762"+
    "\0\u0798\0\242\0\u07ce\0\u0804\0\u083a\0\u0870\0\u08a6\0\u08dc"+
    "\0\u0912\0\u0948\0\u097e\0\u09b4\0\u09ea\0\u0a20\0\242\0\u0a56"+
    "\0\u0a8c\0\u0ac2\0\242\0\u0af8\0\u0b2e\0\u0b2e\0\u0b64\0\u0b9a"+
    "\0\u0bd0\0\u0c06\0\u0c3c\0\u0c72\0\u0ca8\0\u0cde\0\u0d14\0\u0d4a"+
    "\0\u0d80\0\u0db6\0\u0ac2\0\u0b64\0\u0dec\0\u0e22\0\u0e58\0\u0e8e"+
    "\0\242\0\u0ec4\0\u0efa\0\u0f30\0\u0f66\0\u0f9c\0\u0fd2\0\u1008"+
    "\0\u103e\0\u1074\0\u10aa\0\u10e0\0\u1116\0\u114c\0\u1182\0\u11b8"+
    "\0\u11ee\0\u1224\0\u125a\0\u1290\0\u12c6\0\u12fc\0\u1332\0\u1368"+
    "\0\242\0\u139e\0\u13d4\0\u140a\0\u1440\0\u1476\0\u14ac\0\u14e2"+
    "\0\u1518\0\u154e\0\u1584\0\u15ba\0\u15f0\0\u1626\0\u1626\0\u165c"+
    "\0\u1692\0\u16c8\0\u16fe\0\u1734\0\u176a\0\u17a0\0\u17d6\0\u180c"+
    "\0\u1842\0\u1878\0\u18ae\0\u18e4\0\u191a\0\u1950\0\u1986\0\u19bc"+
    "\0\u19f2\0\u1a28\0\u1a5e\0\242\0\u1a94\0\u1aca\0\u1b00\0\u1aca"+
    "\0\u1b36\0\u1b6c\0\u1ba2\0\u1bd8\0\u1b00\0\u1c0e\0\u1c44\0\u1c7a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[152];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\10\4\1\5\10\4\1\5\2\4\1\5\33\4\1\6"+
    "\5\4\60\7\1\10\5\7\11\11\1\12\10\11\1\12"+
    "\12\11\2\13\21\11\1\14\5\11\121\0\2\15\104\0"+
    "\2\16\63\0\1\17\46\0\2\20\74\0\3\21\73\0"+
    "\2\22\27\0\1\23\4\0\1\23\117\0\3\24\61\0"+
    "\2\25\17\0\1\26\10\0\1\26\77\0\2\27\110\0"+
    "\3\30\7\0\2\31\2\0\1\32\3\0\1\33\1\0"+
    "\1\31\6\0\1\33\12\0\2\34\4\0\3\35\3\0"+
    "\1\31\22\0\1\36\10\0\1\36\123\0\3\37\34\0"+
    "\2\40\21\0\1\41\57\0\3\42\3\0\1\43\22\0"+
    "\1\44\10\0\1\44\47\0\2\31\2\0\1\32\3\0"+
    "\1\33\1\0\1\31\6\0\1\33\12\0\2\34\35\0"+
    "\1\45\10\0\1\45\101\0\2\46\74\0\3\47\66\0"+
    "\2\50\33\0\1\51\56\0\1\52\10\0\1\52\121\0"+
    "\2\53\64\0\2\54\26\0\1\55\57\0\1\56\10\0"+
    "\1\56\53\0\1\57\10\0\1\57\77\0\2\60\41\0"+
    "\1\61\10\0\1\61\52\0\1\62\1\0\2\62\1\0"+
    "\1\62\11\0\2\62\2\0\2\62\1\0\1\62\1\0"+
    "\1\62\1\63\1\64\1\0\1\62\1\0\1\62\2\0"+
    "\1\62\1\0\1\62\4\0\1\62\2\0\1\62\3\0"+
    "\1\62\1\0\1\62\33\0\2\41\6\0\3\41\53\0"+
    "\2\43\6\0\3\43\24\0\1\65\1\0\2\65\1\0"+
    "\1\65\11\0\2\65\2\0\2\65\1\0\1\65\1\0"+
    "\1\65\1\0\1\65\1\0\1\65\1\0\1\65\2\0"+
    "\1\65\1\0\1\65\4\0\1\65\2\0\1\65\3\0"+
    "\1\65\1\0\1\65\10\0\1\66\10\0\1\66\2\0"+
    "\1\66\41\0\1\67\1\70\4\67\2\0\1\67\1\0"+
    "\4\67\10\0\2\71\13\0\1\67\5\0\1\72\1\67"+
    "\2\0\1\67\2\0\2\67\4\0\1\73\1\74\4\73"+
    "\2\0\1\73\1\0\4\73\25\0\1\75\2\76\3\0"+
    "\1\77\1\73\2\0\1\73\2\0\2\73\37\0\1\31"+
    "\10\0\1\31\25\0\1\62\1\0\2\62\1\0\1\62"+
    "\3\0\1\100\5\0\2\62\2\0\2\62\1\0\1\62"+
    "\1\0\1\62\1\0\1\62\1\0\1\62\1\0\1\62"+
    "\2\0\1\62\1\0\1\62\4\0\1\62\2\0\1\62"+
    "\3\0\1\62\1\0\1\62\53\0\2\101\15\0\1\62"+
    "\1\0\2\62\1\0\1\62\3\0\1\100\5\0\2\62"+
    "\2\0\2\62\1\0\1\62\1\0\1\62\1\0\1\62"+
    "\1\0\1\62\1\0\1\62\2\0\1\62\1\0\1\62"+
    "\3\0\1\101\1\102\2\0\1\62\3\0\1\62\1\0"+
    "\1\62\4\0\1\65\1\0\2\65\1\0\1\65\3\0"+
    "\1\103\5\0\2\65\2\0\2\65\1\0\1\65\1\0"+
    "\1\65\1\0\1\65\1\0\1\65\1\0\1\65\2\0"+
    "\1\65\1\0\1\65\4\0\1\65\2\0\1\65\3\0"+
    "\1\65\1\0\1\65\11\0\1\104\10\0\1\104\45\0"+
    "\1\67\136\0\2\105\11\0\1\67\1\70\4\67\2\0"+
    "\1\67\1\0\4\67\25\0\1\67\5\0\2\67\2\0"+
    "\1\67\2\0\2\67\6\0\1\73\136\0\2\106\11\0"+
    "\1\73\1\74\4\73\2\0\1\73\1\0\4\73\25\0"+
    "\1\73\5\0\2\73\2\0\1\73\2\0\2\73\7\0"+
    "\2\100\1\0\2\100\1\0\1\100\3\0\1\107\5\0"+
    "\2\100\2\0\2\100\1\0\1\100\1\0\1\100\1\0"+
    "\1\100\1\0\1\100\1\0\1\100\2\0\1\100\1\0"+
    "\2\100\3\0\1\100\2\0\1\100\3\0\1\100\1\0"+
    "\1\100\4\0\1\110\65\0\1\111\1\0\2\62\1\0"+
    "\1\62\3\0\1\100\5\0\2\62\2\0\2\62\1\0"+
    "\1\62\1\0\1\62\1\0\1\62\1\0\1\62\1\0"+
    "\1\62\2\0\1\62\1\0\1\62\4\0\1\62\2\0"+
    "\1\62\3\0\1\62\1\0\1\62\3\0\2\103\1\0"+
    "\2\103\1\0\1\103\3\0\1\112\5\0\2\103\2\0"+
    "\2\103\1\0\1\103\1\0\1\103\1\0\1\103\1\0"+
    "\1\103\1\0\1\103\2\0\1\103\1\0\2\103\3\0"+
    "\1\103\2\0\1\103\3\0\1\103\1\0\1\103\12\0"+
    "\1\31\106\0\2\113\6\0\3\113\53\0\2\114\6\0"+
    "\3\114\70\0\1\115\43\0\2\116\42\0\1\62\1\0"+
    "\2\62\1\0\1\62\3\0\1\100\5\0\2\62\1\0"+
    "\1\116\1\117\1\62\1\0\1\62\1\0\1\62\1\0"+
    "\1\62\1\0\1\62\1\0\1\62\2\0\1\62\1\0"+
    "\1\62\4\0\1\62\2\0\1\62\3\0\1\62\1\0"+
    "\1\62\50\0\1\120\65\0\1\115\10\0\1\121\43\0"+
    "\2\122\31\0\1\62\1\0\2\62\1\0\1\62\3\0"+
    "\1\100\5\0\2\62\2\0\2\62\1\0\1\62\1\0"+
    "\1\62\1\0\1\62\1\122\1\123\1\0\1\62\2\0"+
    "\1\62\1\0\1\62\4\0\1\62\2\0\1\62\3\0"+
    "\1\62\1\0\1\62\50\0\1\120\10\0\1\124\45\0"+
    "\2\125\27\0\1\62\1\0\2\62\1\0\1\62\3\0"+
    "\1\100\5\0\2\62\2\0\2\62\1\0\1\62\1\0"+
    "\1\62\1\0\1\62\1\0\1\62\1\125\1\126\2\0"+
    "\1\62\1\0\1\62\4\0\1\62\2\0\1\62\3\0"+
    "\1\62\1\0\1\62\60\127\1\0\5\127\62\0\2\130"+
    "\6\0\1\62\1\0\2\62\1\0\1\62\3\0\1\100"+
    "\5\0\2\62\2\0\2\62\1\0\1\62\1\0\1\62"+
    "\1\0\1\62\1\0\1\62\1\0\1\62\2\0\1\62"+
    "\1\0\1\62\4\0\1\62\2\0\1\62\2\0\1\130"+
    "\1\131\1\0\1\62\60\127\1\132\5\127\4\0\1\133"+
    "\65\0\1\134\1\0\2\62\1\0\1\62\3\0\1\100"+
    "\5\0\2\62\2\0\2\62\1\0\1\62\1\0\1\62"+
    "\1\0\1\62\1\0\1\62\1\0\1\62\2\0\1\62"+
    "\1\0\1\62\4\0\1\62\2\0\1\62\3\0\1\62"+
    "\1\0\1\62\52\0\1\135\23\0\1\136\10\0\1\136"+
    "\2\0\1\136\45\0\1\62\1\0\2\62\1\136\1\62"+
    "\3\0\1\100\3\0\1\136\1\0\1\62\1\137\2\0"+
    "\2\62\1\0\1\62\1\0\1\62\1\0\1\62\1\0"+
    "\1\62\1\0\1\62\2\0\1\62\1\0\1\62\4\0"+
    "\1\62\2\0\1\62\3\0\1\62\1\0\1\62\53\0"+
    "\2\140\44\0\2\141\35\0\1\62\1\0\2\62\1\0"+
    "\1\62\3\0\1\100\5\0\2\62\2\0\2\62\1\0"+
    "\1\62\1\141\1\142\1\0\1\62\1\0\1\62\1\0"+
    "\1\62\2\0\1\62\1\0\1\62\4\0\1\62\2\0"+
    "\1\62\3\0\1\62\1\0\1\62\55\0\3\143\43\0"+
    "\2\144\33\0\1\62\1\0\2\62\1\0\1\62\3\0"+
    "\1\100\5\0\2\62\2\0\2\62\1\0\1\62\1\0"+
    "\1\62\1\144\1\145\1\0\1\62\1\0\1\62\2\0"+
    "\1\62\1\0\1\62\4\0\1\62\2\0\1\62\3\0"+
    "\1\62\1\0\1\62\6\0\1\146\10\0\1\146\107\0"+
    "\2\147\27\0\1\62\1\0\2\62\1\0\1\62\3\0"+
    "\1\100\5\0\2\62\2\0\2\62\1\0\1\62\1\0"+
    "\1\62\1\0\1\62\1\0\1\62\1\147\1\150\2\0"+
    "\1\62\1\0\1\62\4\0\1\62\2\0\1\62\3\0"+
    "\1\62\1\0\1\62\61\0\1\151\47\0\3\152\24\0"+
    "\1\62\1\0\2\62\1\0\1\62\3\0\1\100\5\0"+
    "\2\62\2\0\2\62\1\0\1\62\1\0\1\62\1\0"+
    "\1\62\1\0\1\62\1\0\1\62\2\152\1\153\1\0"+
    "\1\62\4\0\1\62\2\0\1\62\3\0\1\62\1\0"+
    "\1\62\46\0\2\154\22\0\1\62\1\0\2\62\1\0"+
    "\1\62\3\0\1\100\5\0\2\62\2\0\2\62\1\0"+
    "\1\62\1\0\1\62\1\0\1\62\1\0\1\62\1\0"+
    "\1\62\2\0\1\62\1\154\1\155\4\0\1\62\2\0"+
    "\1\62\3\0\1\62\1\0\1\62\6\0\1\156\10\0"+
    "\1\156\52\0\1\62\1\0\1\157\1\62\1\0\1\62"+
    "\3\0\1\100\1\0\1\156\3\0\2\62\2\0\2\62"+
    "\1\0\1\62\1\0\1\62\1\0\1\62\1\0\1\62"+
    "\1\0\1\62\2\0\1\62\1\0\1\62\4\0\1\62"+
    "\2\0\1\62\3\0\1\62\1\0\1\62\15\0\1\160"+
    "\54\0\1\62\1\0\2\62\1\0\1\62\3\0\1\161"+
    "\5\0\2\62\2\0\2\62\1\0\1\62\1\0\1\62"+
    "\1\0\1\62\1\0\1\62\1\0\1\62\2\0\1\62"+
    "\1\0\1\62\4\0\1\62\2\0\1\62\3\0\1\62"+
    "\1\0\1\62\3\0\2\160\1\0\2\160\1\0\1\160"+
    "\3\0\1\162\5\0\2\160\2\0\2\160\1\0\1\160"+
    "\1\0\1\160\1\0\1\160\1\0\1\160\1\0\1\160"+
    "\2\0\1\160\1\0\2\160\3\0\1\160\2\0\1\160"+
    "\3\0\1\160\1\0\1\160\3\0\2\161\1\0\2\161"+
    "\1\0\1\161\3\0\1\163\5\0\2\161\2\0\2\161"+
    "\1\0\1\161\1\0\1\161\1\0\1\161\1\0\1\161"+
    "\1\0\1\161\2\0\1\161\1\0\2\161\3\0\1\161"+
    "\2\0\1\161\3\0\1\161\1\0\1\161\50\0\1\164"+
    "\65\0\1\165\65\0\1\164\10\0\1\166\54\0\1\165"+
    "\10\0\1\167\4\0\60\170\1\0\65\170\1\171\5\170"+
    "\52\0\1\172\66\0\2\173\66\0\3\174\14\0\1\175"+
    "\10\0\1\175\127\0\1\176\5\0\4\176\1\177\3\0"+
    "\1\200\4\176\4\0\1\200\12\0\2\201\21\0\1\202"+
    "\13\0\1\203\10\0\1\203\101\0\2\204\74\0\3\205"+
    "\73\0\2\206\20\0\1\207\10\0\1\207\53\0\1\210"+
    "\10\0\1\210\77\0\2\211\110\0\3\212\16\0\1\213"+
    "\10\0\1\213\2\0\1\213\41\0\1\214\1\215\4\214"+
    "\2\0\1\214\1\0\4\214\10\0\2\216\13\0\1\214"+
    "\5\0\1\217\1\214\2\0\1\214\2\0\2\214\4\0"+
    "\1\214\1\215\4\214\2\0\1\214\1\0\4\214\25\0"+
    "\1\220\2\216\3\0\1\217\1\214\2\0\1\214\2\0"+
    "\2\214\12\0\1\221\10\0\1\221\57\0\1\222\10\0"+
    "\1\222\45\0\1\214\136\0\2\223\11\0\1\214\1\215"+
    "\4\214\2\0\1\214\1\0\4\214\25\0\1\214\5\0"+
    "\2\214\2\0\1\214\2\0\2\214\21\0\1\224\62\0"+
    "\1\176\106\0\2\225\6\0\3\225\30\0\1\226\10\0"+
    "\1\226\2\0\1\226\102\0\2\227\34\0\1\230\10\0"+
    "\1\230\127\0\2\156";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7344];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\2\1\1\11\1\1\1\11\3\1\11\0"+
    "\2\1\11\0\1\11\1\0\1\11\6\0\1\11\14\0"+
    "\1\11\1\1\1\0\1\1\1\11\2\1\1\0\1\1"+
    "\21\0\1\11\27\0\1\11\15\0\1\1\24\0\1\11"+
    "\1\1\1\0\2\1\10\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[152];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	
	/* Custom java code */

    @Override
	public String language() { return "IT"; }

	@Override
	public String version() { return "0.1"; }


	/* An empty default constructor is required to comply with LinkolnService */
	
	public SectionSubjects() { }

	@Override
	public final boolean run() {
		
		try {
			
			yyreset(new StringReader(getInput()));
			yylex();
			
		} catch (IOException e) {

			e.printStackTrace();
			return false;
		}
		
		return true;
	}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SectionSubjects(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 382) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { addText(yytext());
	position++;
            } 
            // fall through
          case 12: break;
          case 2: 
            { addText(yytext());
		position++;
            } 
            // fall through
          case 13: break;
          case 3: 
            { offset++;
			position++;
			
			if(offset >= length) {
				
				if(offset > length) {
					yypushback(1);
					position--;
				}
				
				yybegin(0);
			}

			addText(yytext());
            } 
            // fall through
          case 14: break;
          case 4: 
            { annotate(new Subject(), "CRIMINAL", false, false);
            } 
            // fall through
          case 15: break;
          case 5: 
            { annotate(new Subject(), "CIVIL", false, false);
            } 
            // fall through
          case 16: break;
          case 6: 
            { addText(yytext());
		position--; //account for the following {LKN_C} character
		yybegin(YYINITIAL);
            } 
            // fall through
          case 17: break;
          case 7: 
            { annotate(new Subject(), "CRIMINAL", false, true);
            } 
            // fall through
          case 18: break;
          case 8: 
            { annotate(new Subject(), "CIVIL", false, true);
            } 
            // fall through
          case 19: break;
          case 9: 
            { addText(yytext()); 
	yybegin(lkn);
            } 
            // fall through
          case 20: break;
          case 10: 
            { AnnotationEntity retrievedEntity = retrieveEntity(yytext());
		addText(yytext());
		offset += yylength();
		position += retrievedEntity.getText().length();
            } 
            // fall through
          case 21: break;
          case 11: 
            { start(null, sectionSubjectState, false, true);
            } 
            // fall through
          case 22: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java SectionSubjects [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        SectionSubjects scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new SectionSubjects(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
