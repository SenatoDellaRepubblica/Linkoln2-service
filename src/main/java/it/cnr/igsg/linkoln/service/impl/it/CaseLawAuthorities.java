/* The following code was generated by JFlex 1.7.0 */

/*******************************************************************************
 * Copyright (c) 2016-2021 Institute of Legal Information and Judicial Systems IGSG-CNR (formerly ITTIG-CNR)
 * 
 * This program and the accompanying materials  are made available under the terms of the GNU General Public
 * License as published by the Free Software Foundation; either version 3 of the License, or (at your option)
 * any later version. 
 * You may not use this work except in compliance with the Licence.
 * You may obtain a copy of the Licence at: https://www.gnu.org/licenses/gpl-3.0.txt
 * Unless required by applicable law or agreed to in writing, software distributed under the Licence is 
 * distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the Licence for the specific language governing permissions and limitations under the Licence.
 *  
 * Authors: Lorenzo Bacci (IGSG-CNR)
 ******************************************************************************/
 package it.cnr.igsg.linkoln.service.impl.it;

import java.io.IOException;
import java.io.StringReader;

import it.cnr.igsg.linkoln.Linkoln;
import it.cnr.igsg.linkoln.entity.*;
import it.cnr.igsg.linkoln.service.*;

import it.cnr.igsg.linkoln.service.impl.Util;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>jflex/CaseLawAuthorities.jflex</tt>
 */
public class CaseLawAuthorities extends LinkolnAnnotationService {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int lkn = 2;
  public static final int corteContiState = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\13\1\2\1\104\1\105\1\1\22\0\1\13\5\0\1\5"+
    "\1\0\1\15\1\16\2\0\1\14\1\3\1\56\1\57\1\55\1\55"+
    "\1\55\1\55\1\55\1\55\1\55\1\55\1\55\1\55\1\17\1\12"+
    "\5\0\1\31\1\7\1\43\1\70\1\41\1\101\1\33\1\77\1\52"+
    "\1\66\1\73\1\63\1\61\1\6\1\54\1\11\1\65\1\35\1\26"+
    "\1\47\1\45\1\37\1\103\1\66\1\66\1\25\1\74\1\0\1\75"+
    "\1\0\1\4\1\0\1\30\1\22\1\42\1\67\1\40\1\100\1\32"+
    "\1\76\1\51\1\27\1\72\1\62\1\60\1\21\1\53\1\24\1\64"+
    "\1\34\1\23\1\46\1\44\1\36\1\102\1\27\1\27\1\20\12\0"+
    "\1\104\44\0\1\0\5\0\1\0\3\0\1\0\5\0\1\0\5\0"+
    "\1\27\1\27\4\27\1\0\1\27\1\27\1\27\2\27\1\27\1\27"+
    "\2\27\1\0\1\27\1\27\1\27\3\27\2\0\1\27\1\27\2\27"+
    "\3\0\1\27\1\27\4\27\1\0\1\27\1\27\1\27\2\27\1\27"+
    "\1\27\2\27\1\0\1\27\1\27\1\27\3\27\2\0\1\27\1\27"+
    "\2\27\53\0\1\27\1\27\6\0\2\50\66\0\1\27\1\27\4\0"+
    "\1\27\1\27\17\0\1\10\u1c88\0\1\27\1\27\216\0\2\27\42\0"+
    "\1\27\1\27\u0144\0\1\13\20\0\1\3\1\3\4\0\1\0\16\0"+
    "\1\104\1\104\u0100\0\1\71\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\4\1\2\2\7\3\140\0\2\4\1\0\1\4"+
    "\3\0\2\5\32\0\1\6\13\0\2\7\2\0\1\7"+
    "\14\0\2\10\1\0\1\10\2\11\2\12\2\13\106\0"+
    "\4\14\1\0\1\14\1\0\2\14\34\0\1\15\22\0"+
    "\1\10\30\0\3\16\1\0\1\16\33\0\2\17\1\0"+
    "\5\17\36\0\5\20\5\0\2\21\1\0\1\21\13\0"+
    "\2\22\1\0\1\22\3\23\1\0\1\23\37\0\2\24"+
    "\1\0\1\24\2\0\3\12\3\0\1\12\36\0\1\25"+
    "\11\0\2\26\11\0\2\27\6\0\3\26\1\0\1\26"+
    "\111\0\1\12\3\0\1\12\7\0\1\16\32\0\2\30"+
    "\20\0\3\12\20\0\2\31\1\0\1\31\24\0\4\32"+
    "\2\0\1\32\1\0\1\32\167\0\4\5\77\0\1\33"+
    "\13\0\1\32\30\0\3\34\41\0\1\5\147\0\1\35"+
    "\224\0\1\36\46\0\3\32\17\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[1300];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\u0118\0\u015e\0\u01a4\0\u015e"+
    "\0\u01ea\0\u015e\0\u0230\0\u0276\0\u02bc\0\u0302\0\u0348\0\u038e"+
    "\0\u03d4\0\u041a\0\u0460\0\u04a6\0\u04ec\0\u0532\0\u0578\0\u05be"+
    "\0\u0604\0\u064a\0\u0690\0\322\0\u06d6\0\u071c\0\u0762\0\u07a8"+
    "\0\u07ee\0\u0834\0\u087a\0\u08c0\0\u0906\0\u094c\0\u0992\0\u09d8"+
    "\0\u0a1e\0\u0a64\0\u0aaa\0\u0af0\0\u0b36\0\u0b7c\0\u0bc2\0\u0c08"+
    "\0\u0c4e\0\u0c94\0\u0cda\0\u0d20\0\u0d66\0\u0dac\0\u0df2\0\u0e38"+
    "\0\u0e7e\0\u0ec4\0\u0f0a\0\u0f50\0\u0f96\0\u0fdc\0\u1022\0\u1068"+
    "\0\u10ae\0\u10f4\0\u113a\0\u1180\0\u11c6\0\u120c\0\u1252\0\u1298"+
    "\0\u12de\0\u1324\0\u136a\0\u13b0\0\u13f6\0\u143c\0\u1482\0\u14c8"+
    "\0\u150e\0\u1554\0\u159a\0\u15e0\0\u1626\0\u166c\0\u16b2\0\u16f8"+
    "\0\u173e\0\u1784\0\u17ca\0\u1810\0\u1856\0\u189c\0\u18e2\0\u1928"+
    "\0\u196e\0\u19b4\0\u19fa\0\u1a40\0\u1a86\0\u1acc\0\u1b12\0\u0230"+
    "\0\u0276\0\u02bc\0\u1b58\0\u1b9e\0\u1be4\0\u1c2a\0\u1c70\0\u1cb6"+
    "\0\u015e\0\u1cfc\0\u1d42\0\u1d88\0\u1dce\0\u1e14\0\u1e5a\0\u015e"+
    "\0\u1ea0\0\u1ee6\0\u1f2c\0\u1f72\0\u1fb8\0\u1ffe\0\u2044\0\u208a"+
    "\0\u20d0\0\u2116\0\u215c\0\u21a2\0\u21e8\0\u222e\0\u2274\0\u22ba"+
    "\0\u2300\0\u2346\0\u238c\0\u23d2\0\u2418\0\u245e\0\u24a4\0\u24ea"+
    "\0\u2530\0\u2576\0\u25bc\0\u015e\0\u2602\0\u2648\0\u268e\0\u26d4"+
    "\0\u271a\0\u2760\0\u27a6\0\u27ec\0\u2832\0\u2878\0\u28be\0\u015e"+
    "\0\u2904\0\u294a\0\u2990\0\u29d6\0\u2a1c\0\u2a62\0\u2aa8\0\u2aee"+
    "\0\u2b34\0\u2b7a\0\u2bc0\0\u2c06\0\u2c4c\0\u2c92\0\u2cd8\0\u2d1e"+
    "\0\u015e\0\u2d64\0\u2daa\0\u2df0\0\u015e\0\u2e36\0\u015e\0\u2e7c"+
    "\0\u015e\0\u2ec2\0\u2f08\0\u2f4e\0\u2f94\0\u2fda\0\u3020\0\u3066"+
    "\0\u30ac\0\u30f2\0\u3138\0\u317e\0\u31c4\0\u320a\0\u3250\0\u3296"+
    "\0\u32dc\0\u3322\0\u3368\0\u33ae\0\u33f4\0\u343a\0\u3480\0\u34c6"+
    "\0\u350c\0\u3552\0\u3598\0\u35de\0\u3624\0\u366a\0\u36b0\0\u36f6"+
    "\0\u373c\0\u3782\0\u37c8\0\u380e\0\u3854\0\u389a\0\u38e0\0\u3926"+
    "\0\u396c\0\u39b2\0\u39f8\0\u3a3e\0\u3a84\0\u3aca\0\u3b10\0\u3b56"+
    "\0\u3b9c\0\u3be2\0\u3c28\0\u3c6e\0\u3cb4\0\u3cfa\0\u3d40\0\u3d86"+
    "\0\u3dcc\0\u3e12\0\u3e58\0\u3e9e\0\u3ee4\0\u3f2a\0\u3f70\0\u3fb6"+
    "\0\u3ffc\0\u4042\0\u4088\0\u40ce\0\u4114\0\u415a\0\u41a0\0\u41e6"+
    "\0\u015e\0\u422c\0\u4272\0\u42b8\0\u42fe\0\u4344\0\u4344\0\u438a"+
    "\0\u43d0\0\u4416\0\u445c\0\u44a2\0\u44e8\0\u452e\0\u4574\0\u45ba"+
    "\0\u4600\0\u4646\0\u468c\0\u46d2\0\u4718\0\u475e\0\u47a4\0\u47ea"+
    "\0\u4830\0\u4876\0\u48bc\0\u4902\0\u4948\0\u498e\0\u49d4\0\u4a1a"+
    "\0\u4a60\0\u4aa6\0\u4aec\0\u4b32\0\u4b78\0\u015e\0\u4bbe\0\u4c04"+
    "\0\u4c4a\0\u4c90\0\u4cd6\0\u4d1c\0\u4d62\0\u4da8\0\u29d6\0\u4dee"+
    "\0\u4e34\0\u4e7a\0\u4ec0\0\u4f06\0\u1d88\0\u4f4c\0\u4f92\0\u4fd8"+
    "\0\u501e\0\u501e\0\u5064\0\u50aa\0\u50f0\0\u5136\0\u517c\0\u51c2"+
    "\0\u5208\0\u524e\0\u5294\0\u4272\0\u42b8\0\u43d0\0\u52da\0\u5320"+
    "\0\u5366\0\u53ac\0\u53f2\0\u5438\0\u547e\0\u54c4\0\u550a\0\u5550"+
    "\0\u5596\0\u015e\0\u55dc\0\u5622\0\u5622\0\u5668\0\u56ae\0\u56f4"+
    "\0\u573a\0\u5780\0\u57c6\0\u580c\0\u5852\0\u5898\0\u58de\0\u5924"+
    "\0\u596a\0\u59b0\0\u59f6\0\u5a3c\0\u5a82\0\u5ac8\0\u5b0e\0\u5b54"+
    "\0\u5b9a\0\u5be0\0\u5c26\0\u5c6c\0\u5cb2\0\u5cf8\0\u5d3e\0\u5d84"+
    "\0\u5dca\0\u015e\0\u5e10\0\u5e56\0\u5e9c\0\u5ee2\0\u2a62\0\u2aa8"+
    "\0\u2b7a\0\u5f28\0\u5f6e\0\u5fb4\0\u5ffa\0\u6040\0\u6086\0\u60cc"+
    "\0\u6112\0\u6158\0\u619e\0\u61e4\0\u622a\0\u6270\0\u62b6\0\u62fc"+
    "\0\u6342\0\u6388\0\u63ce\0\u6414\0\u438a\0\u645a\0\u64a0\0\u64e6"+
    "\0\u652c\0\u6572\0\u65b8\0\u65fe\0\u6644\0\u668a\0\u66d0\0\u015e"+
    "\0\u6716\0\u675c\0\u67a2\0\u67e8\0\u682e\0\u6874\0\u68ba\0\u6900"+
    "\0\u6946\0\u015e\0\u698c\0\u69d2\0\u6a18\0\u6a5e\0\u6aa4\0\u6aea"+
    "\0\u6b30\0\u6b76\0\u6bbc\0\u6c02\0\u6c48\0\u6c8e\0\u6cd4\0\u6d1a"+
    "\0\u015e\0\u6d60\0\u6da6\0\u6dec\0\u015e\0\u6e32\0\u6e78\0\u6e78"+
    "\0\u6ebe\0\u6f04\0\u6f4a\0\u6f90\0\u6fd6\0\u701c\0\u7062\0\u70a8"+
    "\0\u70ee\0\u7134\0\u717a\0\u71c0\0\u7206\0\u724c\0\u7292\0\u72d8"+
    "\0\u731e\0\u7364\0\u73aa\0\u73f0\0\u7436\0\u747c\0\u74c2\0\u7508"+
    "\0\u754e\0\u7594\0\u75da\0\u7620\0\u7666\0\u76ac\0\u76f2\0\u7738"+
    "\0\u015e\0\u777e\0\u77c4\0\u780a\0\u7850\0\u7896\0\u78dc\0\u7922"+
    "\0\u7968\0\u79ae\0\u79f4\0\u7a3a\0\u7a80\0\u7ac6\0\u7b0c\0\u7b52"+
    "\0\u7b98\0\u7bde\0\u7c24\0\u675c\0\u67a2\0\u67e8\0\u7c6a\0\u7cb0"+
    "\0\u7cf6\0\u7d3c\0\u7d82\0\u7dc8\0\u7e0e\0\u7e54\0\u7e9a\0\u7ee0"+
    "\0\u7f26\0\u7f6c\0\u7fb2\0\u7ff8\0\u803e\0\u8084\0\u80ca\0\u8110"+
    "\0\u8156\0\u819c\0\u81e2\0\u015e\0\u8228\0\u826e\0\u82b4\0\u82fa"+
    "\0\u8340\0\u8386\0\u83cc\0\u8412\0\u8458\0\u015e\0\u849e\0\u84e4"+
    "\0\u852a\0\u8570\0\u85b6\0\u85fc\0\u8642\0\u8688\0\u86ce\0\u2df0"+
    "\0\u015e\0\u8714\0\u875a\0\u87a0\0\u87e6\0\u882c\0\u8872\0\u88b8"+
    "\0\u88fe\0\u8944\0\u898a\0\u89d0\0\u8a16\0\u8a5c\0\u8aa2\0\u8ae8"+
    "\0\u8b2e\0\u7922\0\u7968\0\u7a80\0\u8b74\0\u8bba\0\u8c00\0\u8c46"+
    "\0\u8c8c\0\u8cd2\0\u8d18\0\u8d5e\0\u8da4\0\u8dea\0\u8e30\0\u8e76"+
    "\0\u8ebc\0\u8f02\0\u8f48\0\u8f8e\0\u8fd4\0\u901a\0\u9060\0\u90a6"+
    "\0\u90ec\0\u9132\0\u9178\0\u91be\0\u9204\0\u924a\0\u9290\0\u92d6"+
    "\0\u931c\0\u9362\0\u93a8\0\u93ee\0\u6dec\0\u9434\0\u947a\0\u94c0"+
    "\0\u9506\0\u954c\0\u9592\0\u95d8\0\u961e\0\u9664\0\u96aa\0\u96f0"+
    "\0\u9736\0\u977c\0\u97c2\0\u9808\0\u984e\0\u9894\0\u98da\0\u9920"+
    "\0\u9966\0\u99ac\0\u99f2\0\u9a38\0\u9a7e\0\u8944\0\u898a\0\u8a16"+
    "\0\u9ac4\0\u9b0a\0\u9b50\0\u9b96\0\u9bdc\0\u9c22\0\u9c68\0\u9cae"+
    "\0\u9cf4\0\u9d3a\0\u1f72\0\u9d80\0\u9dc6\0\u9e0c\0\u9e52\0\u9e98"+
    "\0\u9ede\0\u9f24\0\u9f6a\0\u9f6a\0\u9fb0\0\u9ff6\0\ua03c\0\ua082"+
    "\0\ua0c8\0\ua10e\0\ua154\0\ua19a\0\ua1e0\0\ua226\0\ua26c\0\ua2b2"+
    "\0\ua2f8\0\ua33e\0\ua384\0\ua3ca\0\ua410\0\ua456\0\ua49c\0\ua4e2"+
    "\0\ua528\0\ua56e\0\ua5b4\0\ua5fa\0\ua640\0\u015e\0\ua686\0\ua6cc"+
    "\0\ua712\0\ua758\0\ua79e\0\ua7e4\0\ua82a\0\ua870\0\ua8b6\0\ua8fc"+
    "\0\ua942\0\u780a\0\ua988\0\ua9ce\0\uaa14\0\uaa5a\0\uaaa0\0\uaae6"+
    "\0\uab2c\0\uab72\0\uabb8\0\uabfe\0\uac44\0\uac8a\0\uacd0\0\uad16"+
    "\0\uad5c\0\uada2\0\uade8\0\uae2e\0\uae74\0\uaeba\0\uaf00\0\uaf46"+
    "\0\uaf8c\0\uafd2\0\u015e\0\ub018\0\ub05e\0\ub0a4\0\ub0ea\0\ub130"+
    "\0\ub176\0\ub1bc\0\u6ebe\0\ub202\0\ub248\0\ub28e\0\ub2d4\0\ub31a"+
    "\0\ub360\0\ub3a6\0\ub3ec\0\ub432\0\ub478\0\ub4be\0\ub504\0\ub54a"+
    "\0\ub590\0\ub5d6\0\u015e\0\ub61c\0\ub662\0\ub6a8\0\ub6a8\0\ub6ee"+
    "\0\ub734\0\ub734\0\ub77a\0\ub7c0\0\ub806\0\ub84c\0\ub892\0\ub8d8"+
    "\0\ub91e\0\ub964\0\ub9aa\0\ub9f0\0\uab2c\0\uab72\0\uba36\0\uba7c"+
    "\0\ubac2\0\ubb08\0\ubb4e\0\ubb94\0\ubbda\0\ubc20\0\ubc66\0\ubcac"+
    "\0\ubcf2\0\ubd38\0\ubd7e\0\ubdc4\0\ube0a\0\ube50\0\ube96\0\ubedc"+
    "\0\ubf22\0\ubf68\0\ubfae\0\ubff4\0\uc03a\0\uc080\0\uc0c6\0\uc10c"+
    "\0\uc152\0\uc198\0\uc1de\0\uc224\0\u5e9c\0\uc26a\0\uc2b0\0\uc2f6"+
    "\0\uc33c\0\uc382\0\uc3c8\0\uc40e\0\uc454\0\uc49a\0\uc4e0\0\uc526"+
    "\0\uc56c\0\uc5b2\0\uc5f8\0\uc63e\0\uc684\0\uc6ca\0\uc710\0\uc756"+
    "\0\uc79c\0\uc7e2\0\uc828\0\uc86e\0\uc8b4\0\uc8fa\0\uc940\0\uc986"+
    "\0\uc9cc\0\uca12\0\uca58\0\uca9e\0\ucae4\0\ucb2a\0\ucb70\0\ucbb6"+
    "\0\ucbfc\0\ucc42\0\ucc88\0\uccce\0\ucd14\0\ucd5a\0\ucda0\0\ucde6"+
    "\0\uce2c\0\uce72\0\uceb8\0\ucefe\0\ucf44\0\ucf8a\0\ucfd0\0\ud016"+
    "\0\ud05c\0\ud0a2\0\ud0e8\0\ud12e\0\ud174\0\ud1ba\0\ud200\0\ud246"+
    "\0\ud28c\0\ud2d2\0\ud318\0\ud35e\0\ud3a4\0\ud3ea\0\ud430\0\ud476"+
    "\0\ud4bc\0\ud502\0\ud548\0\ud58e\0\ud5d4\0\ud61a\0\ud660\0\ud6a6"+
    "\0\ud6ec\0\ud732\0\ud778\0\ud7be\0\ud804\0\ud84a\0\ud890\0\u6a18"+
    "\0\ud8d6\0\ud91c\0\ud962\0\ud9a8\0\ud9ee\0\uda34\0\uda7a\0\udac0"+
    "\0\udb06\0\udb4c\0\udb92\0\udbd8\0\udc1e\0\udc64\0\udcaa\0\udcf0"+
    "\0\udd36\0\udd7c\0\uddc2\0\ude08\0\ude4e\0\ude94\0\udeda\0\udf20"+
    "\0\udf66\0\udfac\0\udff2\0\ue038\0\ue07e\0\ue0c4\0\ue10a\0\ue150"+
    "\0\ue196\0\ue1dc\0\ue222\0\ue268\0\ue2ae\0\ue2f4\0\ue33a\0\u5668"+
    "\0\ue380\0\ue3c6\0\ue40c\0\ue452\0\ue498\0\ud7be\0\ud804\0\ud84a"+
    "\0\ue4de\0\ue524\0\ue56a\0\ue5b0\0\ue5f6\0\ue63c\0\ue682\0\ue6c8"+
    "\0\ue70e\0\ue754\0\ue79a\0\ue7e0\0\ue826\0\u015e\0\ue86c\0\ue8b2"+
    "\0\ue8f8\0\ue93e\0\ue984\0\ue9ca\0\uea10\0\uea56\0\uea9c\0\ueae2"+
    "\0\ueb28\0\ueb6e\0\uebb4\0\uebfa\0\uec40\0\uec86\0\ueccc\0\ued12"+
    "\0\ued58\0\ued9e\0\uede4\0\uee2a\0\uee70\0\ueeb6\0\ueefc\0\uef42"+
    "\0\uef88\0\uefce\0\uf014\0\uf05a\0\uf0a0\0\uf0e6\0\uf12c\0\uf172"+
    "\0\uf1b8\0\uf1fe\0\u015e\0\uf244\0\uf28a\0\uf2d0\0\uf316\0\uf35c"+
    "\0\uf3a2\0\uf3e8\0\uf42e\0\uf474\0\uf4ba\0\uf500\0\uf546\0\uf58c"+
    "\0\uf5d2\0\uf618\0\uf65e\0\ub61c\0\uf6a4\0\uf6ea\0\uf730\0\uf776"+
    "\0\uf7bc\0\uf802\0\uf848\0\uf88e\0\uf8d4\0\uf91a\0\uf960\0\uf9a6"+
    "\0\uf9ec\0\ufa32\0\ufa78\0\ufabe\0\ufb04\0\ufb4a\0\u1324\0\ufb90"+
    "\0\ufbd6\0\ufc1c\0\ufc62\0\ufca8\0\ufcee\0\ufd34\0\ufd7a\0\ufdc0"+
    "\0\ufe06\0\ufe4c\0\ufe92\0\ufed8\0\uff1e\0\uff64\0\uffaa\0\ufff0"+
    "\1\66\1\174\1\302\1\u0108\1\u014e\1\u0194\1\u01da\1\u0220"+
    "\1\u0266\1\u02ac\1\u02f2\1\u0338\1\u037e\1\u03c4\1\u040a\1\u0450"+
    "\1\u0496\1\u04dc\1\u0522\1\u0568\0\ub0a4\1\u05ae\1\u05f4\1\u063a"+
    "\1\u0680\1\u06c6\1\u070c\1\u0752\1\u0798\1\u07de\1\u0824\1\u086a"+
    "\1\u08b0\1\u08f6\1\u093c\1\u0982\1\u09c8\1\u0a0e\1\u0a54\1\u0a9a"+
    "\1\u0ae0\1\u0b26\1\u0b6c\1\u0bb2\1\u0bf8\1\u0c3e\1\u0c84\1\u0cca"+
    "\1\u0d10\1\u0d56\1\u0d9c\1\u0de2\1\u0e28\1\u0e6e\1\u0eb4\1\u0efa"+
    "\1\u0f40\1\u0f86\1\u0fcc\1\u1012\1\u1058\1\u109e\1\u10e4\1\u112a"+
    "\1\u1170\1\u11b6\1\u11fc\1\u1242\1\u1288\1\u12ce\1\u1314\1\u135a"+
    "\1\u13a0\1\u13e6\1\u142c\1\u1472\1\u14b8\1\u14fe\1\u1544\1\u158a"+
    "\0\uf28a\1\u15d0\1\u1616\1\u165c\1\u16a2\1\u16e8\0\u015e\1\u172e"+
    "\1\u1774\1\u17ba\1\u1800\1\u1846\1\u188c\1\u18d2\1\u1918\1\u195e"+
    "\1\u19a4\1\u19ea\1\u1a30\1\u1a76\1\u1abc\1\u1b02\1\u1b48\1\u1b8e"+
    "\1\u1bd4\1\u1c1a\1\u1c60\1\u1ca6\1\u1cec\1\u1d32\1\u1d78\1\u1dbe"+
    "\1\u1e04\1\u1e4a\1\u1e90\1\u1ed6\1\u1f1c\1\u1f62\1\u1fa8\1\u1fee"+
    "\1\u2034\1\u207a\1\u20c0\1\u2106\1\u214c\1\u2192\1\u21d8\1\u221e"+
    "\1\u2264\1\u22aa\1\u22f0\1\u2336\1\u237c\1\u23c2\1\u2408\1\u244e"+
    "\1\u2494\1\u24da\1\u2520\1\u2566\1\u25ac\1\u25f2\1\u2638\1\u267e"+
    "\1\u26c4\1\u270a\1\u2750\1\u2796\1\u27dc\1\u2822\1\u2868\1\u28ae"+
    "\1\u28f4\1\u293a\1\u2980\1\u29c6\1\u2a0c\1\u2a52\1\u2a98\1\u2ade"+
    "\1\u2b24\1\u2b6a\1\u2bb0\1\u2bf6\1\u2c3c\1\u2c82\1\u2cc8\1\u2d0e"+
    "\1\u2d54\1\u2d9a\1\u2de0\1\u2e26\1\u2e6c\1\u2eb2\1\u2ef8\1\u2f3e"+
    "\1\u2f84\1\u2fca\1\u3010\1\u3056\1\u309c\1\u30e2\1\u3128\1\u316e"+
    "\1\u31b4\1\u31fa\1\u3240\1\u3286\1\u32cc\1\u3312\1\u3358\1\u339e"+
    "\1\u33e4\1\u342a\1\u3470\1\u34b6\1\u34fc\1\u3542\1\u3588\1\u35ce"+
    "\1\u3614\1\u365a\1\u36a0\1\u36e6\1\u372c\1\u3772\1\u37b8\1\u37fe"+
    "\1\u3844\1\u388a\1\u38d0\1\u3916\1\u395c\1\u39a2\1\u39e8\1\u3a2e"+
    "\1\u3a74\1\u3aba\1\u3b00\1\u3b46\1\u3b8c\1\u3bd2\1\u3c18\0\u0302"+
    "\1\u3c5e\1\u3ca4\1\u3cea\1\u3d30\1\u3d76\1\u3dbc\1\u3e02\1\u3e48"+
    "\1\u3e8e\1\u3ed4\1\u3f1a\0\u015e\1\u3f60\1\u3fa6\1\u3fec\1\u4032"+
    "\1\u4078\1\u40be\1\u4104\1\u414a\1\u4190\1\u41d6\1\u421c\1\u4262"+
    "\1\u42a8\1\u42ee\1\u4334\1\u437a\1\u43c0\1\u4406\1\u444c\1\u4492"+
    "\1\u44d8\1\u451e\1\u4564\1\u45aa\1\u45f0\1\u4636\1\u467c\1\u46c2"+
    "\1\u4708\1\u474e\1\u4794\1\u47da\1\u4820\1\u4866\1\u48ac\1\u48f2"+
    "\1\u4938\1\u497e\1\u49c4\1\u4a0a\1\u4a50\1\u4a96\1\u4adc\1\u4b22"+
    "\1\u4a0a\1\u4a50\1\u4b68\1\u4bae\1\u4bf4\1\u4c3a\1\u4c80\1\u4cc6"+
    "\1\u4d0c\1\u4d52\1\u4d98\1\u4dde";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1300];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\4\4\2\6\1\4\1\6\6\4\30\6"+
    "\1\4\5\6\2\4\11\6\1\4\2\6\1\7\1\4"+
    "\6\6\2\4\74\10\1\11\11\10\11\12\1\13\12\12"+
    "\1\13\7\12\2\14\2\12\2\15\2\16\30\12\1\17"+
    "\1\12\2\20\6\12\10\0\1\21\1\22\11\0\1\21"+
    "\1\22\1\0\1\21\1\0\2\23\2\24\2\25\2\0"+
    "\1\26\1\27\2\30\2\31\2\32\26\0\2\33\10\0"+
    "\1\34\5\0\1\21\1\22\11\0\1\21\1\22\1\0"+
    "\1\21\1\0\2\23\2\24\2\25\2\0\1\26\1\27"+
    "\2\30\2\31\2\32\26\0\2\33\124\0\1\21\1\22"+
    "\11\0\1\21\1\22\1\0\1\21\1\0\2\23\2\24"+
    "\2\25\2\0\1\26\1\27\2\30\2\31\2\32\12\0"+
    "\2\35\12\0\2\33\65\0\1\36\62\0\2\37\110\0"+
    "\2\40\124\0\2\41\77\0\2\42\1\0\1\43\111\0"+
    "\2\44\52\0\2\45\120\0\2\46\74\0\2\47\61\0"+
    "\1\50\12\0\1\50\131\0\3\51\73\0\2\52\124\0"+
    "\2\53\35\0\1\54\46\0\2\53\54\0\2\55\2\56"+
    "\4\0\2\57\11\0\2\60\1\0\1\61\127\0\2\62"+
    "\40\0\2\63\100\0\2\64\145\0\3\65\74\0\2\66"+
    "\75\0\2\67\41\0\1\70\12\0\1\70\2\0\1\70"+
    "\107\0\2\71\6\0\2\72\100\0\2\73\51\0\2\43"+
    "\2\0\1\74\5\0\1\43\26\0\2\75\30\0\1\76"+
    "\10\0\1\43\71\0\3\77\13\0\2\100\2\0\1\101"+
    "\5\0\1\100\71\0\1\100\11\0\1\102\12\0\1\102"+
    "\121\0\2\103\11\0\2\104\42\0\1\105\12\0\1\105"+
    "\125\0\2\106\50\0\1\107\12\0\1\107\2\0\1\107"+
    "\107\0\2\110\6\0\2\111\120\0\1\112\41\0\1\113"+
    "\12\0\1\113\2\0\1\113\121\0\2\114\2\115\127\0"+
    "\2\116\23\0\1\117\12\0\1\117\12\0\2\120\51\0"+
    "\2\61\2\121\1\122\2\0\1\123\1\0\1\121\1\61"+
    "\4\121\3\0\1\123\2\0\1\123\1\0\2\124\2\125"+
    "\4\0\2\126\2\127\30\0\1\130\10\0\1\61\100\0"+
    "\2\131\54\0\3\132\34\0\2\133\2\0\1\134\5\0"+
    "\1\133\71\0\1\133\6\0\1\135\12\0\1\135\155\0"+
    "\3\136\20\0\1\137\12\0\1\137\36\0\2\140\54\0"+
    "\2\141\6\0\2\141\7\0\4\141\37\0\1\142\12\0"+
    "\1\142\74\0\1\40\12\0\1\40\2\0\1\40\125\0"+
    "\2\143\44\0\1\144\12\0\1\144\137\0\2\145\113\0"+
    "\2\146\30\0\1\147\12\0\1\147\65\0\2\100\2\0"+
    "\1\101\3\0\1\150\1\0\1\100\10\0\1\150\7\0"+
    "\2\151\2\0\2\152\43\0\1\100\6\0\1\153\12\0"+
    "\1\153\120\0\2\154\116\0\2\155\44\0\1\156\12\0"+
    "\1\156\20\0\2\157\14\0\2\160\24\0\1\161\1\162"+
    "\4\161\2\0\1\161\1\0\6\161\20\0\2\163\6\0"+
    "\1\161\5\0\1\164\1\161\11\0\1\161\2\0\2\161"+
    "\6\0\2\161\67\0\2\165\45\0\2\166\6\0\2\166"+
    "\7\0\4\166\37\0\1\167\12\0\1\167\74\0\1\52"+
    "\12\0\1\52\2\0\1\52\57\0\1\170\1\171\4\170"+
    "\2\0\1\170\1\0\6\170\30\0\1\170\5\0\2\170"+
    "\11\0\1\170\2\0\2\170\6\0\2\170\10\0\1\172"+
    "\12\0\1\172\2\0\1\172\117\0\2\173\104\0\2\174"+
    "\110\0\2\175\50\0\1\176\12\0\1\176\2\0\1\176"+
    "\125\0\2\177\37\0\4\121\1\200\4\0\6\121\10\0"+
    "\2\124\42\0\1\201\10\0\1\121\6\0\1\202\12\0"+
    "\1\202\130\0\2\203\50\0\1\204\1\50\11\0\1\204"+
    "\1\50\1\0\1\204\127\0\3\205\77\0\2\206\21\0"+
    "\2\116\45\0\2\55\21\0\2\207\113\0\2\210\23\0"+
    "\2\211\2\212\1\213\1\0\1\214\1\215\1\0\1\212"+
    "\1\211\4\212\2\0\1\214\1\215\2\0\1\215\21\0"+
    "\3\216\3\0\1\211\15\0\1\217\10\0\1\211\7\0"+
    "\1\220\12\0\1\220\64\0\2\133\2\0\1\134\3\0"+
    "\1\221\1\0\1\133\10\0\1\221\7\0\2\25\2\0"+
    "\2\26\43\0\1\133\6\0\1\222\12\0\1\222\103\0"+
    "\1\223\74\0\1\224\12\0\1\224\130\0\2\225\104\0"+
    "\2\226\41\0\2\141\2\0\1\227\5\0\1\141\60\0"+
    "\1\230\10\0\1\141\30\0\2\231\114\0\2\43\53\0"+
    "\1\232\12\0\1\232\71\0\1\233\12\0\1\233\155\0"+
    "\3\234\31\0\1\235\75\0\1\236\12\0\1\236\123\0"+
    "\2\237\44\0\1\240\1\241\4\240\2\0\1\240\1\0"+
    "\6\240\24\0\2\242\2\0\1\240\2\0\2\243\1\0"+
    "\1\244\1\240\11\0\1\240\2\0\2\240\6\0\2\240"+
    "\44\0\2\245\41\0\4\246\1\247\4\0\6\246\14\0"+
    "\2\250\6\0\2\251\10\0\1\246\15\0\1\252\10\0"+
    "\1\246\44\0\2\253\42\0\1\161\165\0\2\254\22\0"+
    "\1\161\1\162\4\161\2\0\1\161\1\0\6\161\30\0"+
    "\1\161\5\0\2\161\11\0\1\161\2\0\2\161\6\0"+
    "\2\161\50\0\3\255\34\0\2\166\2\0\1\256\5\0"+
    "\1\166\60\0\1\257\10\0\1\166\30\0\2\260\56\0"+
    "\1\170\103\0\1\261\1\262\4\261\2\0\1\261\1\0"+
    "\6\261\10\0\2\263\16\0\1\261\4\0\1\261\1\264"+
    "\1\261\11\0\1\261\2\0\2\261\6\0\2\261\1\265"+
    "\1\266\4\265\2\0\1\265\1\0\6\265\30\0\1\265"+
    "\5\0\2\265\11\0\1\265\2\0\2\265\6\0\2\265"+
    "\1\267\1\270\4\267\2\0\1\267\1\0\6\267\30\0"+
    "\1\267\5\0\2\267\11\0\1\267\2\0\2\267\6\0"+
    "\2\267\1\271\1\272\4\271\2\0\1\271\1\0\6\271"+
    "\30\0\1\271\5\0\2\271\11\0\1\271\2\0\2\271"+
    "\6\0\2\271\1\0\2\273\2\0\1\274\2\0\1\275"+
    "\2\0\1\273\7\0\1\275\2\0\1\275\3\0\2\276"+
    "\14\0\3\277\3\0\1\273\15\0\1\300\10\0\1\273"+
    "\40\0\2\61\52\0\1\301\12\0\1\301\146\0\2\302"+
    "\31\0\1\303\12\0\1\303\74\0\1\304\12\0\1\304"+
    "\71\0\1\305\12\0\1\305\2\0\1\305\123\0\2\306"+
    "\74\0\2\307\20\0\1\310\35\0\1\311\1\0\1\312"+
    "\10\0\1\311\1\0\1\312\2\0\1\312\150\0\3\313"+
    "\13\0\2\211\2\212\1\213\1\0\1\214\1\215\1\0"+
    "\1\212\1\211\4\212\2\0\1\214\1\215\2\0\1\215"+
    "\45\0\1\217\10\0\1\211\1\0\4\212\1\314\2\0"+
    "\1\215\1\0\6\212\3\0\1\215\2\0\1\215\45\0"+
    "\1\217\10\0\1\212\6\0\1\315\12\0\1\315\120\0"+
    "\2\316\123\0\2\317\73\0\2\320\124\0\2\321\23\0"+
    "\2\322\2\323\1\324\4\0\1\323\1\322\4\323\22\0"+
    "\2\325\2\326\5\0\2\327\1\0\1\322\1\0\2\330"+
    "\12\0\1\331\10\0\1\322\34\0\2\332\57\0\1\333"+
    "\12\0\1\333\67\0\1\334\1\0\2\334\1\0\1\334"+
    "\13\0\2\334\2\0\1\334\1\0\1\334\1\0\1\334"+
    "\1\0\1\334\1\0\1\334\1\0\1\334\1\0\1\334"+
    "\1\0\1\334\2\0\1\334\1\0\1\334\4\0\1\334"+
    "\1\0\1\334\1\0\2\334\1\0\1\334\2\0\1\334"+
    "\3\0\1\334\1\0\1\334\1\0\1\334\10\0\1\335"+
    "\12\0\1\335\146\0\2\336\30\0\1\337\12\0\1\337"+
    "\146\0\2\340\70\0\2\70\46\0\1\341\12\0\1\341"+
    "\2\0\1\341\125\0\2\342\44\0\1\343\12\0\1\343"+
    "\70\0\1\344\1\0\2\344\1\0\1\344\13\0\2\344"+
    "\2\0\1\344\1\0\1\344\1\345\1\346\1\0\1\344"+
    "\1\0\1\344\1\347\1\350\1\0\1\344\1\0\1\344"+
    "\2\0\1\344\1\0\1\344\4\0\1\344\1\0\1\344"+
    "\1\0\2\344\1\0\1\344\2\0\1\344\3\0\1\344"+
    "\1\0\1\344\1\0\1\344\12\0\1\351\12\0\1\351"+
    "\2\0\1\351\137\0\2\352\26\0\1\240\137\0\2\353"+
    "\104\0\2\354\50\0\1\240\1\241\4\240\2\0\1\240"+
    "\1\0\6\240\30\0\1\240\5\0\2\240\11\0\1\240"+
    "\2\0\2\240\6\0\2\240\6\0\1\355\12\0\1\355"+
    "\65\0\4\246\1\247\4\0\6\246\14\0\2\250\36\0"+
    "\1\252\10\0\1\246\6\0\1\356\12\0\1\356\124\0"+
    "\2\357\100\0\2\360\132\0\2\361\104\0\2\362\104\0"+
    "\2\363\64\0\2\364\50\0\1\365\12\0\1\365\146\0"+
    "\2\366\70\0\2\107\40\0\1\261\123\0\1\367\4\0"+
    "\1\367\60\0\1\261\1\262\4\261\2\0\1\261\1\0"+
    "\6\261\30\0\1\261\4\0\3\261\11\0\1\261\2\0"+
    "\2\261\6\0\2\261\2\0\1\265\105\0\1\267\105\0"+
    "\1\271\104\0\2\273\2\0\1\274\2\0\1\275\2\0"+
    "\1\273\7\0\1\275\2\0\1\275\3\0\2\276\40\0"+
    "\1\300\10\0\1\273\6\0\1\370\12\0\1\370\132\0"+
    "\2\371\106\0\3\372\65\0\2\373\134\0\2\374\31\0"+
    "\1\375\12\0\1\375\154\0\3\376\22\0\1\377\12\0"+
    "\1\377\2\0\1\377\113\0\2\u0100\50\0\1\u0101\1\u0102"+
    "\3\u0103\1\u0104\2\0\1\u0101\1\0\6\u0103\10\0\2\u0105"+
    "\16\0\1\u0106\2\u0107\3\0\1\u0108\1\u0101\11\0\1\u0101"+
    "\2\0\1\u0109\1\u0101\6\0\1\u0101\1\u0103\10\0\1\u010a"+
    "\12\0\1\u010a\2\0\1\u010a\132\0\2\u010b\1\0\1\310"+
    "\30\0\2\310\2\0\1\u010c\5\0\1\310\53\0\2\u010d"+
    "\3\0\1\u010e\10\0\1\310\46\0\2\u010f\104\0\2\u0110"+
    "\44\0\1\u0111\12\0\1\u0111\72\0\1\u0112\12\0\1\u0112"+
    "\73\0\1\u0113\12\0\1\u0113\123\0\2\u0114\100\0\2\u0115"+
    "\120\0\3\u0116\124\0\3\u0117\13\0\2\322\2\323\1\324"+
    "\4\0\1\323\1\322\4\323\22\0\2\325\7\0\2\327"+
    "\3\0\2\330\12\0\1\331\10\0\1\322\1\0\4\323"+
    "\1\u0118\4\0\6\323\40\0\2\330\12\0\1\331\10\0"+
    "\1\323\6\0\1\u0119\12\0\1\u0119\137\0\2\u011a\37\0"+
    "\1\u011b\12\0\1\u011b\120\0\2\u011c\120\0\3\u011d\115\0"+
    "\2\u011e\75\0\2\u011f\41\0\1\u0120\12\0\1\u0120\2\0"+
    "\1\u0120\63\0\1\334\1\0\2\334\1\0\1\334\5\0"+
    "\1\u0121\5\0\2\334\2\0\1\334\1\0\1\334\1\0"+
    "\1\334\1\0\1\334\1\0\1\334\1\0\1\334\1\0"+
    "\1\334\1\0\1\334\2\0\1\334\1\0\1\334\4\0"+
    "\1\334\1\0\1\334\1\0\2\334\1\0\1\334\2\0"+
    "\1\334\3\0\1\334\1\0\1\334\1\0\1\334\44\0"+
    "\2\u0122\74\0\2\142\61\0\1\u0123\12\0\1\u0123\154\0"+
    "\3\u0124\23\0\1\u0125\12\0\1\u0125\131\0\3\u0126\52\0"+
    "\1\u0127\72\0\1\344\1\0\2\344\1\0\1\344\5\0"+
    "\1\u0128\5\0\2\344\2\0\1\344\1\0\1\344\1\0"+
    "\1\344\1\0\1\344\1\0\1\344\1\0\1\344\1\0"+
    "\1\344\1\0\1\344\2\0\1\344\1\0\1\344\4\0"+
    "\1\344\1\0\1\344\1\0\2\344\1\0\1\344\2\0"+
    "\1\344\3\0\1\344\1\0\1\344\1\0\1\344\42\0"+
    "\2\u0129\50\0\1\344\1\0\2\344\1\0\1\344\5\0"+
    "\1\u0128\5\0\2\344\2\0\1\344\1\0\1\344\1\0"+
    "\1\344\1\0\1\344\1\u0129\1\u012a\1\0\1\344\1\0"+
    "\1\344\1\0\1\344\2\0\1\344\1\0\1\344\4\0"+
    "\1\344\1\0\1\344\1\0\2\344\1\0\1\344\2\0"+
    "\1\344\3\0\1\344\1\0\1\344\1\0\1\344\64\0"+
    "\2\u012b\26\0\1\344\1\0\2\344\1\0\1\344\5\0"+
    "\1\u0128\5\0\2\344\2\0\1\344\1\0\1\344\1\0"+
    "\1\344\1\0\1\344\1\0\1\344\1\0\1\344\1\0"+
    "\1\344\1\0\1\344\2\0\1\344\1\0\1\344\4\0"+
    "\1\344\1\u012b\1\u012c\1\0\2\344\1\0\1\344\2\0"+
    "\1\344\3\0\1\344\1\0\1\344\1\0\1\344\13\0"+
    "\1\u012d\12\0\1\u012d\111\0\2\u012e\104\0\2\u012f\114\0"+
    "\2\u012f\106\0\2\u0130\51\0\1\u0131\12\0\1\u0131\74\0"+
    "\1\u0132\12\0\1\u0132\111\0\2\u0133\145\0\3\u0134\44\0"+
    "\2\167\125\0\2\u0135\71\0\2\u0136\53\0\1\u0137\12\0"+
    "\1\u0137\154\0\3\u0138\12\0\1\261\1\262\4\261\2\0"+
    "\1\261\1\0\6\261\30\0\1\u0139\2\u013a\2\0\1\261"+
    "\1\264\1\261\11\0\1\261\2\0\2\261\6\0\2\261"+
    "\7\0\1\u013b\12\0\1\u013b\113\0\2\u013c\120\0\2\u013d"+
    "\122\0\2\u013e\113\0\3\u013f\22\0\1\u0140\12\0\1\u0140"+
    "\2\0\1\u0140\65\0\1\u0141\12\0\1\u0141\75\0\1\u0142"+
    "\12\0\1\u0142\121\0\2\u0143\45\0\1\u0144\1\u0103\2\u0144"+
    "\1\u0145\4\0\6\u0144\10\0\2\u0105\42\0\1\u0146\10\0"+
    "\1\u0144\1\0\4\u0144\1\u0145\4\0\6\u0144\10\0\2\u0105"+
    "\42\0\1\u0146\10\0\1\u0144\6\0\1\u0147\12\0\1\u0147"+
    "\75\0\1\u0148\12\0\1\u0148\71\0\1\u0149\12\0\1\u0149"+
    "\2\0\1\u0149\57\0\1\u0101\1\u0102\3\u0103\1\u0104\2\0"+
    "\1\u0101\1\0\6\u0103\10\0\2\u0105\16\0\1\u0101\5\0"+
    "\2\u0101\11\0\1\u0101\2\0\1\u0109\1\u0101\6\0\1\u0101"+
    "\1\u0103\62\0\2\u014a\70\0\2\u014b\47\0\1\u014c\12\0"+
    "\1\u014c\67\0\1\u014d\12\0\1\u014d\134\0\3\u014e\3\0"+
    "\1\u014f\111\0\2\u0150\72\0\3\u0151\33\0\1\u0152\1\u0153"+
    "\4\u0152\2\0\1\u0152\1\0\6\u0152\30\0\1\u0154\2\u0155"+
    "\2\0\1\u0152\1\u0156\1\u0152\11\0\1\u0152\2\0\2\u0152"+
    "\6\0\2\u0152\17\0\1\u0157\75\0\1\u0158\12\0\1\u0158"+
    "\73\0\1\u0159\12\0\1\u0159\2\0\1\u0159\115\0\2\u015a"+
    "\104\0\2\u015b\121\0\2\211\37\0\1\u015c\12\0\1\u015c"+
    "\72\0\1\u015d\12\0\1\u015d\73\0\1\u015e\12\0\1\u015e"+
    "\145\0\2\u015f\52\0\2\u0160\143\0\2\u0161\23\0\1\u0162"+
    "\12\0\1\u0162\40\0\2\u0163\113\0\3\u0164\20\0\1\156"+
    "\12\0\1\156\36\0\2\160\35\0\1\u0165\12\0\1\u0165"+
    "\64\0\2\u0121\1\0\2\u0121\1\0\1\u0121\5\0\1\u0166"+
    "\5\0\2\u0121\2\0\1\u0121\1\0\1\u0121\1\0\1\u0121"+
    "\1\0\1\u0121\1\0\1\u0121\1\0\1\u0121\1\0\1\u0121"+
    "\1\0\1\u0121\2\0\1\u0121\1\0\2\u0121\3\0\1\u0121"+
    "\1\0\1\u0121\1\0\2\u0121\1\0\1\u0121\2\0\1\u0121"+
    "\3\0\1\u0121\1\0\1\u0121\1\0\1\u0121\52\0\3\142"+
    "\43\0\1\u0167\12\0\1\u0167\2\0\1\u0167\65\0\1\u0168"+
    "\12\0\1\u0168\76\0\1\43\103\0\1\u0169\12\0\1\u0169"+
    "\2\0\1\u0169\62\0\2\u0128\1\0\2\u0128\1\0\1\u0128"+
    "\5\0\1\u016a\5\0\2\u0128\2\0\1\u0128\1\0\1\u0128"+
    "\1\0\1\u0128\1\0\1\u0128\1\0\1\u0128\1\0\1\u0128"+
    "\1\0\1\u0128\1\0\1\u0128\2\0\1\u0128\1\0\2\u0128"+
    "\3\0\1\u0128\1\0\1\u0128\1\0\2\u0128\1\0\1\u0128"+
    "\2\0\1\u0128\3\0\1\u0128\1\0\1\u0128\1\0\1\u0128"+
    "\34\0\2\u016b\56\0\1\344\1\0\2\344\1\0\1\344"+
    "\5\0\1\u0128\5\0\2\344\2\0\1\344\1\u016b\1\u016c"+
    "\1\0\1\344\1\0\1\344\1\0\1\344\1\0\1\344"+
    "\1\0\1\344\1\0\1\344\2\0\1\344\1\0\1\344"+
    "\4\0\1\344\1\0\1\344\1\0\2\344\1\0\1\344"+
    "\2\0\1\344\3\0\1\344\1\0\1\344\1\0\1\344"+
    "\6\0\1\u016d\105\0\1\u016e\1\0\2\344\1\0\1\344"+
    "\5\0\1\u0128\5\0\2\344\2\0\1\344\1\0\1\344"+
    "\1\0\1\344\1\0\1\344\1\0\1\344\1\0\1\344"+
    "\1\0\1\344\1\0\1\344\2\0\1\344\1\0\1\344"+
    "\4\0\1\344\1\0\1\344\1\0\2\344\1\0\1\344"+
    "\2\0\1\344\3\0\1\344\1\0\1\344\1\0\1\344"+
    "\14\0\1\100\74\0\2\u012e\2\0\1\u016f\5\0\1\u012e"+
    "\26\0\2\u0170\41\0\1\u012e\50\0\3\167\43\0\1\u0171"+
    "\12\0\1\u0171\2\0\1\u0171\57\0\1\u0172\1\u0173\4\u0172"+
    "\2\0\1\u0172\1\0\6\u0172\24\0\2\u0174\2\0\1\u0172"+
    "\5\0\1\u0175\1\u0172\11\0\1\u0172\2\0\2\u0172\6\0"+
    "\3\u0172\1\u0176\3\u0177\1\u0178\2\0\1\u0172\1\0\6\u0177"+
    "\14\0\2\250\12\0\1\u0172\5\0\2\u0172\11\0\1\u0172"+
    "\2\0\1\u0179\1\u0172\6\0\1\u0172\1\u0177\6\0\1\u017a"+
    "\12\0\1\u017a\65\0\4\u0136\1\u017b\3\0\1\u017c\6\u0136"+
    "\4\0\1\u017c\17\0\2\u017d\14\0\2\u017e\10\0\1\u017f"+
    "\10\0\1\u0136\10\0\1\u0180\12\0\1\u0180\2\0\1\u0180"+
    "\65\0\1\u0181\12\0\1\u0181\137\0\2\u0182\41\0\1\u0183"+
    "\12\0\1\u0183\2\0\1\u0183\125\0\2\u0184\46\0\1\u0185"+
    "\12\0\1\u0185\2\0\1\u0185\127\0\3\u0186\41\0\1\u0187"+
    "\12\0\1\u0187\75\0\1\u0188\12\0\1\u0188\100\0\1\u0189"+
    "\100\0\1\61\153\0\2\u018a\33\0\1\u018b\12\0\1\u018b"+
    "\74\0\1\u018c\12\0\1\u018c\121\0\2\u018d\135\0\3\u018e"+
    "\62\0\3\u018f\3\0\1\u0190\67\0\2\u0191\53\0\1\u0192"+
    "\12\0\1\u0192\117\0\2\u0193\51\0\2\u014f\2\0\1\u0194"+
    "\5\0\1\u014f\30\0\2\u0195\26\0\1\u0196\10\0\1\u014f"+
    "\71\0\3\u0197\12\0\1\u0198\1\u0199\3\u019a\1\u019b\2\0"+
    "\1\u0198\1\0\6\u019a\30\0\1\u0198\4\0\3\u0198\11\0"+
    "\1\u0198\2\0\1\u019c\1\u0198\6\0\1\u0198\1\u019a\2\0"+
    "\1\u0152\151\0\2\u019d\36\0\1\u0152\1\u0153\4\u0152\2\0"+
    "\1\u0152\1\0\6\u0152\30\0\1\u0152\4\0\3\u0152\11\0"+
    "\1\u0152\2\0\2\u0152\6\0\2\u0152\10\0\1\u019e\12\0"+
    "\1\u019e\2\0\1\u019e\67\0\1\u019f\12\0\1\u019f\2\0"+
    "\1\u019f\70\0\1\u01a0\12\0\1\u01a0\121\0\2\u01a1\44\0"+
    "\1\u01a2\1\u01a3\4\u01a2\2\0\1\u01a2\1\0\6\u01a2\20\0"+
    "\2\u01a4\6\0\1\u01a2\5\0\1\u01a5\1\u01a2\11\0\1\u01a2"+
    "\2\0\2\u01a2\6\0\2\u01a2\17\0\1\u01a6\75\0\1\u01a7"+
    "\12\0\1\u01a7\73\0\1\u01a8\12\0\1\u01a8\2\0\1\u01a8"+
    "\141\0\2\u01a9\104\0\2\u01aa\23\0\4\u01ab\1\u01ac\2\0"+
    "\1\u01ad\1\0\6\u01ab\3\0\1\u01ad\2\0\1\u01ad\1\0"+
    "\2\u01ae\16\0\3\u01af\3\0\1\u01ab\1\0\2\330\12\0"+
    "\1\u01b0\10\0\1\u01ab\1\u01b1\1\u01b2\4\u01b1\2\0\1\u01b1"+
    "\1\0\6\u01b1\30\0\1\u01b1\2\0\2\u01b3\1\0\1\u01b4"+
    "\1\u01b1\11\0\1\u01b1\2\0\2\u01b1\6\0\2\u01b1\1\u01b5"+
    "\1\u01b6\4\u01b5\2\0\1\u01b5\1\0\6\u01b5\30\0\1\u01b7"+
    "\2\u01b8\3\0\1\u01b9\1\u01b5\11\0\1\u01b5\2\0\2\u01b5"+
    "\6\0\2\u01b5\6\0\1\u01ba\12\0\1\u01ba\76\0\1\133"+
    "\150\0\1\u01bb\41\0\1\u01bc\12\0\1\u01bc\100\0\1\u01bd"+
    "\134\0\2\u01be\113\0\1\u01bf\100\0\3\u01c0\37\0\1\344"+
    "\1\0\2\344\1\0\1\344\5\0\1\u0128\5\0\2\344"+
    "\2\0\1\344\1\0\1\344\1\0\1\344\1\0\1\344"+
    "\1\0\1\344\1\0\1\344\1\0\1\344\1\0\1\344"+
    "\2\u01c0\1\u01c1\1\0\1\344\4\0\1\344\1\0\1\344"+
    "\1\0\2\344\1\0\1\344\2\0\1\344\3\0\1\344"+
    "\1\0\1\344\1\0\1\344\71\0\2\u01c2\21\0\1\344"+
    "\1\0\2\344\1\0\1\344\5\0\1\u0128\5\0\2\344"+
    "\2\0\1\344\1\0\1\344\1\0\1\344\1\0\1\344"+
    "\1\0\1\344\1\0\1\344\1\0\1\344\1\0\1\344"+
    "\2\0\1\344\1\0\1\344\4\0\1\344\1\0\1\344"+
    "\1\0\2\344\1\u01c2\1\u01c3\2\0\1\344\3\0\1\344"+
    "\1\0\1\344\1\0\1\344\10\0\1\u01c4\12\0\1\u01c4"+
    "\137\0\2\u01c5\1\0\1\u01c6\40\0\1\u01c7\12\0\1\u01c7"+
    "\63\0\1\u0172\112\0\1\u01c8\12\0\1\u01c8\63\0\1\u0172"+
    "\1\u0173\4\u0172\2\0\1\u0172\1\0\6\u0172\30\0\1\u0172"+
    "\5\0\2\u0172\11\0\1\u0172\2\0\2\u0172\6\0\2\u0172"+
    "\1\0\1\246\1\u0177\2\246\1\247\4\0\6\246\14\0"+
    "\2\250\36\0\1\252\10\0\1\246\17\0\1\u01c9\74\0"+
    "\1\u01ca\12\0\1\u01ca\114\0\2\u01cb\62\0\1\u01cc\12\0"+
    "\1\u01cc\114\0\2\u01cd\136\0\2\u01ce\33\0\1\u01cf\12\0"+
    "\1\u01cf\100\0\1\u01d0\74\0\1\u01d1\12\0\1\u01d1\75\0"+
    "\1\u01d2\12\0\1\u01d2\134\0\2\u01d3\77\0\2\u01d4\111\0"+
    "\2\273\50\0\1\u01d5\100\0\1\121\103\0\1\u01d6\12\0"+
    "\1\u01d6\2\0\1\u01d6\107\0\2\u01d7\64\0\1\u01d8\12\0"+
    "\1\u01d8\2\0\1\u01d8\57\0\1\u01d9\1\u01da\4\u01d9\2\0"+
    "\1\u01d9\1\0\6\u01d9\20\0\2\u01db\6\0\1\u01d9\5\0"+
    "\1\u01dc\1\u01d9\11\0\1\u01d9\2\0\2\u01d9\6\0\2\u01d9"+
    "\6\0\1\u01dd\12\0\1\u01dd\104\0\1\u01de\4\0\1\u01de"+
    "\60\0\1\267\1\u01df\1\u01e0\2\267\1\u01e1\2\0\1\267"+
    "\1\0\1\267\1\u01e0\4\267\20\0\2\u01e2\2\u01e3\2\u01e4"+
    "\2\0\1\267\5\0\2\267\11\0\1\267\2\0\1\u01e5"+
    "\1\267\6\0\1\267\1\u01e0\1\310\2\0\101\310\12\0"+
    "\1\u01e6\12\0\1\u01e6\2\0\1\u01e6\127\0\3\u01e7\3\0"+
    "\1\u014f\35\0\1\u01e8\12\0\1\u01e8\137\0\2\u01e9\1\0"+
    "\1\175\111\0\2\u01ea\30\0\1\u01eb\12\0\1\u01eb\65\0"+
    "\1\u01ec\1\u019a\2\u01ec\1\u01ed\4\0\6\u01ec\54\0\1\u01ee"+
    "\10\0\1\u01ec\1\0\4\u01ec\1\u01ed\4\0\6\u01ec\54\0"+
    "\1\u01ee\10\0\1\u01ec\6\0\1\u01ef\12\0\1\u01ef\146\0"+
    "\2\u01f0\66\0\2\u01f1\106\0\2\u01f2\47\0\1\u01f3\12\0"+
    "\1\u01f3\73\0\1\211\141\0\2\u01f4\40\0\1\u01a2\135\0"+
    "\2\u01f5\52\0\1\u01a2\1\u01a3\4\u01a2\2\0\1\u01a2\1\0"+
    "\6\u01a2\30\0\1\u01a2\5\0\2\u01a2\11\0\1\u01a2\2\0"+
    "\2\u01a2\6\0\2\u01a2\10\0\1\u01f6\12\0\1\u01f6\2\0"+
    "\1\u01f6\67\0\1\u01f7\12\0\1\u01f7\2\0\1\u01f7\70\0"+
    "\1\u01f8\12\0\1\u01f8\121\0\2\u01f9\14\0\1\u01ab\33\0"+
    "\1\u01fa\33\0\2\u01fb\45\0\4\u01ab\1\u01ac\2\0\1\u01ad"+
    "\1\0\6\u01ab\3\0\1\u01ad\2\0\1\u01ad\1\0\2\u01ae"+
    "\26\0\2\330\12\0\1\u01b0\10\0\1\u01ab\6\0\1\u01fc"+
    "\12\0\1\u01fc\137\0\2\u01fd\73\0\2\u01fe\50\0\1\u01ff"+
    "\12\0\1\u01ff\146\0\2\u0200\24\0\1\u01b1\137\0\2\u0201"+
    "\50\0\1\u01b1\1\u01b2\4\u01b1\2\0\1\u01b1\1\0\6\u01b1"+
    "\30\0\1\u01b1\5\0\2\u01b1\11\0\1\u01b1\2\0\2\u01b1"+
    "\6\0\2\u01b1\2\0\1\u01b5\151\0\2\u0202\36\0\1\u01b5"+
    "\1\u01b6\4\u01b5\2\0\1\u01b5\1\0\6\u01b5\30\0\1\u01b5"+
    "\5\0\2\u01b5\11\0\1\u01b5\2\0\2\u01b5\6\0\2\u01b5"+
    "\17\0\1\u0203\143\0\1\u01bb\17\0\1\u0204\22\0\1\141"+
    "\103\0\1\u0205\12\0\1\u0205\2\0\1\u0205\70\0\1\u0206"+
    "\12\0\1\u0206\136\0\1\u01bf\17\0\1\u0207\63\0\2\u0208"+
    "\35\0\1\344\1\0\2\344\1\0\1\344\5\0\1\u0128"+
    "\5\0\2\344\2\0\1\344\1\0\1\344\1\0\1\344"+
    "\1\0\1\344\1\0\1\344\1\0\1\344\1\0\1\344"+
    "\1\0\1\344\2\0\1\344\1\u0208\1\u0209\4\0\1\344"+
    "\1\0\1\344\1\0\2\344\1\0\1\344\2\0\1\344"+
    "\3\0\1\344\1\0\1\344\1\0\1\344\42\0\2\u020a"+
    "\50\0\1\344\1\0\2\344\1\0\1\344\5\0\1\u0128"+
    "\5\0\2\344\2\0\1\344\1\0\1\344\1\0\1\344"+
    "\1\0\1\344\1\u020a\1\u020b\1\0\1\344\1\0\1\344"+
    "\1\0\1\344\2\0\1\344\1\0\1\344\4\0\1\344"+
    "\1\0\1\344\1\0\2\344\1\0\1\344\2\0\1\344"+
    "\3\0\1\344\1\0\1\344\1\0\1\344\11\0\1\u020c"+
    "\12\0\1\u020c\117\0\2\u020d\50\0\1\u020e\1\u020f\4\u020e"+
    "\2\0\1\u020e\1\0\6\u020e\30\0\1\u020e\4\0\3\u020e"+
    "\11\0\1\u020e\2\0\2\u020e\6\0\2\u020e\12\0\1\246"+
    "\102\0\1\u0210\12\0\1\u0210\73\0\1\u0211\12\0\1\u0211"+
    "\2\0\1\u0211\66\0\1\u0212\12\0\1\u0212\125\0\2\u0213"+
    "\112\0\3\u0214\71\0\2\u0215\137\0\3\u0216\24\0\1\166"+
    "\103\0\1\u0217\12\0\1\u0217\2\0\1\u0217\117\0\2\u0218"+
    "\56\0\1\273\73\0\1\u0219\1\u021a\4\u0219\2\0\1\u0219"+
    "\1\0\6\u0219\30\0\1\u0219\4\0\3\u0219\11\0\1\u0219"+
    "\2\0\2\u0219\6\0\2\u0219\1\0\2\u021b\2\0\1\u021c"+
    "\5\0\1\u021b\14\0\2\u021d\16\0\3\u021e\3\0\1\u021b"+
    "\26\0\1\u021b\10\0\1\u021f\12\0\1\u021f\2\0\1\u021f"+
    "\125\0\2\u0220\36\0\1\u020e\1\u0221\1\u0222\2\u020e\1\u0223"+
    "\2\0\1\u020e\1\0\1\u020e\1\u0222\4\u020e\22\0\2\u0224"+
    "\4\0\1\u020e\4\0\3\u020e\11\0\1\u020e\2\0\1\u0225"+
    "\1\u020e\6\0\1\u020e\1\u0222\11\0\1\u0226\12\0\1\u0226"+
    "\63\0\1\u01d9\165\0\2\u0227\22\0\1\u01d9\1\u01da\4\u01d9"+
    "\2\0\1\u01d9\1\0\6\u01d9\30\0\1\u01d9\5\0\2\u01d9"+
    "\11\0\1\u01d9\2\0\2\u01d9\6\0\2\u01d9\17\0\1\u0228"+
    "\136\0\3\u0229\34\0\1\u022a\1\u01e0\2\0\1\u022b\5\0"+
    "\1\u022a\24\0\2\u01e2\2\u01e3\2\u01e4\26\0\1\u022c\10\0"+
    "\1\u022a\1\0\2\u022a\2\0\1\u022b\5\0\1\u022a\24\0"+
    "\2\u01e2\2\u01e3\2\u01e4\26\0\1\u022c\10\0\1\u022a\6\0"+
    "\1\u022d\12\0\1\u022d\130\0\2\u022e\100\0\2\u022f\11\0"+
    "\2\u0230\1\0\1\u0231\35\0\1\u0232\12\0\1\u0232\16\0"+
    "\2\u0233\14\0\1\u0234\111\0\2\u0235\33\0\1\u0236\12\0"+
    "\1\u0236\127\0\2\u0237\45\0\1\u0238\12\0\1\u0238\143\0"+
    "\2\u0239\115\0\3\u023a\31\0\1\u023b\75\0\1\u023c\12\0"+
    "\1\u023c\154\0\3\u023d\32\0\1\u023e\4\0\1\u023e\71\0"+
    "\1\u023f\12\0\1\u023f\73\0\1\212\141\0\2\u0240\120\0"+
    "\2\u0241\70\0\2\u0242\47\0\1\u0243\12\0\1\u0243\73\0"+
    "\1\322\125\0\2\u0244\102\0\2\u0245\55\0\2\u01fb\2\u01ab"+
    "\1\u0246\2\0\1\u01ad\1\0\1\u01ab\1\u01fb\4\u01ab\3\0"+
    "\1\u01ad\2\0\1\u01ad\1\0\2\u01ae\10\0\2\325\7\0"+
    "\2\327\3\0\2\330\12\0\1\u01b0\10\0\1\u01fb\7\0"+
    "\1\u0247\12\0\1\u0247\117\0\2\u0248\134\0\2\u0249\50\0"+
    "\2\u024a\145\0\3\u024b\12\0\1\u01b1\1\u01b2\4\u01b1\2\0"+
    "\1\u01b1\1\0\6\u01b1\20\0\2\u024c\6\0\1\u01b4\2\u024d"+
    "\3\0\1\u01b4\1\u01b1\11\0\1\u01b1\2\0\2\u01b1\6\0"+
    "\2\u01b1\1\u01b5\1\u01b6\4\u01b5\2\0\1\u01b5\1\0\6\u01b5"+
    "\10\0\2\u024e\16\0\1\u01b5\5\0\1\u01b9\1\u01b5\11\0"+
    "\1\u01b5\2\0\2\u01b5\6\0\2\u01b5\10\0\1\u024f\12\0"+
    "\1\u024f\2\0\1\u024f\125\0\2\u0250\140\0\2\u0251\2\0"+
    "\74\u0252\1\0\11\u0252\6\0\1\u0253\12\0\1\u0253\70\0"+
    "\1\344\1\0\1\u0254\1\344\1\0\1\344\5\0\1\u0128"+
    "\1\0\1\u0253\3\0\2\344\2\0\1\344\1\0\1\344"+
    "\1\0\1\344\1\0\1\344\1\0\1\344\1\0\1\344"+
    "\1\0\1\344\1\0\1\344\2\0\1\344\1\0\1\344"+
    "\4\0\1\344\1\0\1\344\1\0\2\344\1\0\1\344"+
    "\2\0\1\344\3\0\1\344\1\0\1\344\1\0\1\344"+
    "\50\0\2\u0255\42\0\1\344\1\0\2\344\1\0\1\344"+
    "\5\0\1\u0128\5\0\2\344\2\0\1\344\1\0\1\344"+
    "\1\0\1\344\1\0\1\344\1\0\1\344\1\0\1\344"+
    "\1\0\1\344\1\u0255\1\u0256\2\0\1\344\1\0\1\344"+
    "\4\0\1\344\1\0\1\344\1\0\2\344\1\0\1\344"+
    "\2\0\1\344\3\0\1\344\1\0\1\344\1\0\1\344"+
    "\12\0\1\u0257\12\0\1\u0257\2\0\1\u0257\125\0\2\u0258"+
    "\40\0\1\u020e\165\0\2\u0259\70\0\2\u025a\46\0\1\u025b"+
    "\12\0\1\u025b\2\0\1\u025b\117\0\2\u025c\106\0\2\u025d"+
    "\115\0\2\u025e\37\0\1\u025f\12\0\1\u025f\132\0\2\u0260"+
    "\40\0\1\u0219\104\0\2\u021b\2\0\1\u021c\5\0\1\u021b"+
    "\14\0\2\u021d\53\0\1\u021b\6\0\1\u0261\12\0\1\u0261"+
    "\144\0\2\u0262\44\0\1\u0263\4\0\1\u0263\126\0\2\u0264"+
    "\47\0\1\u0265\12\0\1\u0265\62\0\1\u0266\1\u0222\2\0"+
    "\1\u0267\5\0\1\u0266\26\0\2\u0224\30\0\1\u0268\10\0"+
    "\1\u0266\1\0\2\u0266\2\0\1\u0267\5\0\1\u0266\26\0"+
    "\2\u0224\30\0\1\u0268\10\0\1\u0266\6\0\1\u0269\12\0"+
    "\1\u0269\114\0\2\55\136\0\2\u026a\34\0\1\u0144\155\0"+
    "\2\u026b\32\0\1\u026c\12\0\1\u026c\2\0\1\u026c\107\0"+
    "\2\u0190\63\0\1\u026d\12\0\1\u026d\117\0\2\u026e\20\0"+
    "\1\174\27\0\1\267\1\270\4\267\2\0\1\267\1\0"+
    "\6\267\20\0\2\u0233\6\0\1\267\5\0\1\u026f\1\267"+
    "\11\0\1\267\2\0\2\267\6\0\2\267\60\0\2\u0270"+
    "\64\0\2\u022f\114\0\3\u0271\3\0\1\u0272\27\0\1\267"+
    "\1\270\4\267\2\0\1\267\1\0\6\267\30\0\1\267"+
    "\5\0\1\u0273\1\267\11\0\1\267\2\0\2\267\6\0"+
    "\2\267\40\0\2\u0233\135\0\3\u0274\24\0\1\310\141\0"+
    "\2\u0275\46\0\1\u0276\12\0\1\u0276\2\0\1\u0276\132\0"+
    "\2\175\37\0\1\u0277\12\0\1\u0277\74\0\1\u0278\12\0"+
    "\1\u0278\2\0\1\u0278\67\0\1\u0279\12\0\1\u0279\2\0"+
    "\1\u0279\65\0\1\u027a\12\0\1\u027a\64\0\1\u0152\1\u0153"+
    "\4\u0152\2\0\1\u0152\1\0\6\u0152\30\0\1\u027b\2\u027c"+
    "\2\0\1\u0152\1\u0156\1\u0152\11\0\1\u0152\2\0\2\u0152"+
    "\6\0\2\u0152\102\0\2\u027d\52\0\3\u027e\103\0\3\u027f"+
    "\44\0\1\u0280\12\0\1\u0280\73\0\1\323\143\0\3\u0281"+
    "\42\0\1\u0282\12\0\1\u0282\71\0\1\u0283\12\0\1\u0283"+
    "\74\0\1\u0284\12\0\1\u0284\2\0\1\u0284\115\0\2\u0285"+
    "\112\0\2\u0286\74\0\2\u0287\56\0\1\u0288\12\0\1\u0288"+
    "\72\0\1\u0289\12\0\1\u0289\120\0\2\u028a\116\0\2\u028b"+
    "\47\0\1\u028c\12\0\1\u028c\100\0\1\u028d\66\0\74\u0252"+
    "\1\u028e\11\u0252\17\0\1\u028f\72\0\1\344\1\0\2\344"+
    "\1\0\1\344\5\0\1\u028f\5\0\2\344\2\0\1\344"+
    "\1\0\1\344\1\0\1\344\1\0\1\344\1\0\1\344"+
    "\1\0\1\344\1\0\1\344\1\0\1\344\2\0\1\344"+
    "\1\0\1\344\4\0\1\344\1\0\1\344\1\0\2\344"+
    "\1\0\1\344\2\0\1\344\3\0\1\344\1\0\1\344"+
    "\1\0\1\344\32\0\2\u0290\60\0\1\344\1\0\2\344"+
    "\1\0\1\344\5\0\1\u0128\5\0\2\344\1\0\1\u0290"+
    "\1\u0291\1\0\1\344\1\0\1\344\1\0\1\344\1\0"+
    "\1\344\1\0\1\344\1\0\1\344\1\0\1\344\2\0"+
    "\1\344\1\0\1\344\4\0\1\344\1\0\1\344\1\0"+
    "\2\344\1\0\1\344\2\0\1\344\3\0\1\344\1\0"+
    "\1\344\1\0\1\344\13\0\1\u0292\12\0\1\u0292\121\0"+
    "\2\u01c6\114\0\3\u0293\44\0\1\u0294\12\0\1\u0294\72\0"+
    "\1\u0295\12\0\1\u0295\61\0\1\u0296\1\u0297\4\u0296\2\0"+
    "\1\u0296\1\0\6\u0296\30\0\1\u0296\5\0\2\u0296\11\0"+
    "\1\u0296\2\0\2\u0296\6\0\2\u0296\53\0\2\u0298\65\0"+
    "\2\u025d\67\0\1\u0299\77\0\1\u029a\12\0\1\u029a\70\0"+
    "\1\u029b\12\0\1\u029b\143\0\2\u029c\74\0\3\u029d\44\0"+
    "\1\u029e\12\0\1\u029e\163\0\2\u029f\11\0\1\u02a0\12\0"+
    "\1\u02a0\154\0\3\u02a1\65\0\2\u02a2\77\0\2\u02a3\46\0"+
    "\1\u02a4\12\0\1\u02a4\2\0\1\u02a4\132\0\2\u02a5\1\0"+
    "\1\174\27\0\1\267\1\270\4\267\2\0\1\267\1\0"+
    "\6\267\20\0\2\u0233\6\0\1\267\5\0\2\267\11\0"+
    "\1\267\2\0\2\267\6\0\2\267\44\0\2\u02a6\113\0"+
    "\2\u02a7\31\0\1\267\1\u02a8\1\u02a9\2\267\1\u02aa\2\0"+
    "\1\267\1\0\1\267\1\u02a9\4\267\20\0\2\u01e2\6\0"+
    "\1\267\5\0\2\267\11\0\1\267\2\0\2\267\6\0"+
    "\1\267\1\u02a9\6\0\1\u02ab\12\0\1\u02ab\134\0\3\u014f"+
    "\44\0\1\u02ac\12\0\1\u02ac\100\0\1\u02ad\134\0\2\u02ae"+
    "\47\0\1\u02af\12\0\1\u02af\100\0\1\u02b0\141\0\2\u02b1"+
    "\50\0\1\u02b2\67\0\2\u027e\2\0\1\u02b3\5\0\1\u027e"+
    "\24\0\2\u02b4\43\0\1\u027e\30\0\2\u02b5\156\0\2\u02b6"+
    "\32\0\2\u02b7\63\0\1\u02b8\12\0\1\u02b8\72\0\1\u02b9"+
    "\12\0\1\u02b9\74\0\1\u02ba\12\0\1\u02ba\61\0\1\u02bb"+
    "\1\u02bc\4\u02bb\2\0\1\u02bb\1\0\6\u02bb\20\0\2\u02bd"+
    "\6\0\1\u02bb\5\0\1\u02be\1\u02bb\11\0\1\u02bb\2\0"+
    "\2\u02bb\6\0\2\u02bb\40\0\2\u02bf\114\0\3\u02c0\52\0"+
    "\1\u02c1\74\0\1\u02c2\12\0\1\u02c2\124\0\2\u02c3\55\0"+
    "\1\u02c4\12\0\1\u02c4\163\0\2\u02c5\55\0\2\u02c6\110\0"+
    "\1\u02c7\31\0\2\u028f\1\0\2\u028f\1\0\1\u028f\5\0"+
    "\1\u02c8\5\0\2\u028f\2\0\1\u028f\1\0\1\u028f\1\0"+
    "\1\u028f\1\0\1\u028f\1\0\1\u028f\1\0\1\u028f\1\0"+
    "\1\u028f\1\0\1\u028f\2\0\1\u028f\1\0\2\u028f\3\0"+
    "\1\u028f\1\0\1\u028f\1\0\2\u028f\1\0\1\u028f\2\0"+
    "\1\u028f\3\0\1\u028f\1\0\1\u028f\1\0\1\u028f\44\0"+
    "\2\u02c9\46\0\1\344\1\0\2\344\1\0\1\344\5\0"+
    "\1\u0128\5\0\2\344\2\0\1\344\1\0\1\344\1\0"+
    "\1\344\1\0\1\344\1\0\1\344\1\u02c9\1\u02ca\1\0"+
    "\1\344\1\0\1\344\2\0\1\344\1\0\1\344\4\0"+
    "\1\344\1\0\1\344\1\0\2\344\1\0\1\344\2\0"+
    "\1\344\3\0\1\344\1\0\1\344\1\0\1\344\14\0"+
    "\1\u012e\135\0\2\u02cb\144\0\2\u02cc\14\0\1\u0136\75\0"+
    "\1\u0296\104\0\4\u0298\1\u02cd\4\0\6\u0298\26\0\2\u02ce"+
    "\24\0\1\u02cf\10\0\1\u0298\10\0\1\u02d0\12\0\1\u02d0"+
    "\2\0\1\u02d0\161\0\2\u02d1\12\0\1\u02d2\12\0\1\u02d2"+
    "\2\0\1\u02d2\57\0\1\u02d3\2\u02d4\2\u02d3\1\u02d5\2\0"+
    "\1\u02d6\1\0\1\u02d3\1\u02d4\4\u02d3\3\0\1\u02d7\2\0"+
    "\1\u02d7\5\0\2\u02d8\12\0\1\u02d9\2\u02da\2\0\1\u02d3"+
    "\1\u02d4\1\u02d3\11\0\1\u02d3\2\0\1\u02db\1\u02d3\6\0"+
    "\1\u02d3\1\u02d4\30\0\2\u021b\156\0\2\u02dc\21\0\1\u02dd"+
    "\76\0\1\u02de\12\0\1\u02de\2\0\1\u02de\65\0\1\u02df"+
    "\12\0\1\u02df\75\0\1\u02e0\12\0\1\u02e0\72\0\1\u02e1"+
    "\12\0\1\u02e1\72\0\1\u02e2\12\0\1\u02e2\67\0\1\u02e3"+
    "\12\0\1\u02e3\72\0\1\u02e4\12\0\1\u02e4\65\0\1\u02e5"+
    "\1\u02a9\2\0\1\u02e6\5\0\1\u02e5\24\0\2\u01e2\43\0"+
    "\1\u02e5\1\0\2\u02e5\2\0\1\u02e6\5\0\1\u02e5\24\0"+
    "\2\u01e2\43\0\1\u02e5\6\0\1\u02e7\12\0\1\u02e7\103\0"+
    "\1\u02e8\100\0\1\u014f\103\0\1\u02e9\12\0\1\u02e9\2\0"+
    "\1\u02e9\70\0\1\u02ea\12\0\1\u02ea\73\0\1\u01ec\103\0"+
    "\1\u02eb\12\0\1\u02eb\2\0\1\u02eb\5\0\2\u02ec\4\0"+
    "\2\u02ed\50\0\1\u02ee\12\0\1\u02ee\67\0\2\u02dd\1\0"+
    "\2\u02dd\1\0\1\u02dd\5\0\1\u02ef\5\0\2\u02dd\2\0"+
    "\1\u02dd\1\0\1\u02dd\1\0\1\u02dd\1\0\1\u02dd\1\0"+
    "\1\u02dd\1\0\1\u02dd\1\0\1\u02dd\1\0\1\u02dd\2\0"+
    "\1\u02dd\1\u02f0\1\u02f1\1\u02dd\3\0\1\u02dd\1\0\1\u02dd"+
    "\1\0\2\u02dd\1\0\1\u02dd\2\0\1\u02dd\3\0\1\u02dd"+
    "\1\0\1\u02dd\1\0\1\u02dd\10\0\1\u02f2\12\0\1\u02f2"+
    "\130\0\2\u02f3\46\0\1\u02f4\12\0\1\u02f4\103\0\1\u02f5"+
    "\150\0\2\u02f6\56\0\2\u02f7\60\0\1\u02f8\12\0\1\u02f8"+
    "\2\0\1\u02f8\71\0\1\u01ab\75\0\1\u02bb\135\0\2\u02f9"+
    "\52\0\1\u02bb\1\u02bc\4\u02bb\2\0\1\u02bb\1\0\6\u02bb"+
    "\30\0\1\u02bb\5\0\2\u02bb\11\0\1\u02bb\2\0\2\u02bb"+
    "\6\0\2\u02bb\1\0\4\u02bf\1\u02fa\3\0\1\u02fb\6\u02bf"+
    "\4\0\1\u02fb\47\0\1\u02fc\10\0\1\u02bf\53\0\2\u01ab"+
    "\41\0\1\u02fd\12\0\1\u02fd\2\0\1\u02fd\127\0\3\u024d"+
    "\135\0\2\u02fe\21\0\1\u02ff\166\0\2\u0300\66\0\2\u0301"+
    "\77\0\1\u0302\126\0\2\u0303\12\0\1\344\1\0\2\344"+
    "\1\0\1\344\5\0\1\u0128\5\0\2\344\2\0\1\344"+
    "\1\0\1\344\1\0\1\344\1\0\1\344\1\0\1\344"+
    "\1\0\1\344\1\0\1\344\1\0\1\344\2\0\1\344"+
    "\1\0\1\344\4\0\1\344\1\0\1\344\1\0\2\344"+
    "\1\0\1\344\2\0\1\344\2\0\1\u0303\1\u0304\1\0"+
    "\1\344\1\0\1\344\32\0\2\u0305\73\0\1\u0306\74\0"+
    "\1\u0307\12\0\1\u0307\120\0\2\u0308\132\0\2\u0309\70\0"+
    "\2\u030a\55\0\1\u030b\77\0\1\u030c\12\0\1\u030c\61\0"+
    "\1\u02d3\2\u02d4\2\u02d3\1\u02d5\2\0\1\u02d6\1\0\1\u02d3"+
    "\1\u02d4\4\u02d3\3\0\1\u02d7\2\0\1\u02d7\5\0\2\u02d8"+
    "\12\0\1\u02d3\4\0\3\u02d3\11\0\1\u02d3\2\0\1\u02db"+
    "\1\u02d3\6\0\1\u02d3\1\u02d4\6\0\1\u030d\12\0\1\u030d"+
    "\134\0\3\u030e\73\0\2\u030f\52\0\1\u0310\12\0\1\u0310"+
    "\146\0\2\u0311\41\0\1\u0312\71\0\2\u02dd\1\0\2\u02dd"+
    "\1\0\1\u02dd\5\0\1\u02ef\5\0\2\u02dd\2\0\1\u02dd"+
    "\1\0\1\u02dd\1\0\1\u02dd\1\0\1\u02dd\1\0\1\u02dd"+
    "\1\0\1\u02dd\1\0\1\u02dd\1\0\1\u02dd\2\0\1\u02dd"+
    "\1\0\2\u02dd\3\0\1\u02dd\1\0\1\u02dd\1\0\2\u02dd"+
    "\1\0\1\u02dd\2\0\1\u02dd\3\0\1\u02dd\1\0\1\u02dd"+
    "\1\0\1\u02dd\13\0\1\u0313\12\0\1\u0313\100\0\1\u0314"+
    "\170\0\2\u0315\14\0\1\u022a\133\0\2\u0316\114\0\3\u0317"+
    "\73\0\2\u0272\53\0\1\u0318\12\0\1\u0318\73\0\1\u0319"+
    "\12\0\1\u0319\2\0\1\u0319\125\0\2\u031a\140\0\2\u031b"+
    "\50\0\2\u031c\76\0\2\u031d\126\0\2\u031e\52\0\2\u031f"+
    "\131\0\1\u0320\130\0\2\u0321\7\0\2\u02dd\1\0\2\u02dd"+
    "\1\0\1\u02dd\5\0\1\u02ef\5\0\2\u02dd\2\0\1\u02dd"+
    "\1\0\1\u02dd\1\0\1\u02dd\1\0\1\u02dd\1\0\1\u02dd"+
    "\1\0\1\u02dd\1\0\1\u02dd\1\0\1\u02dd\2\0\1\u02dd"+
    "\1\0\2\u02dd\3\0\1\u02dd\1\0\1\u02dd\1\0\2\u02dd"+
    "\1\0\1\u02dd\2\0\1\u02dd\3\0\1\u02dd\1\u0321\1\u0322"+
    "\1\0\1\u02dd\11\0\1\u0323\12\0\1\u0323\117\0\2\u0324"+
    "\20\0\1\u0325\47\0\1\u0326\4\0\1\u0326\63\0\2\u02f5"+
    "\1\0\2\u02f5\1\0\1\u02f5\5\0\1\u0327\5\0\2\u02f5"+
    "\2\0\1\u02f5\1\0\1\u02f5\1\0\1\u02f5\1\0\1\u02f5"+
    "\1\0\1\u02f5\1\0\1\u02f5\1\0\1\u02f5\1\0\1\u02f5"+
    "\2\0\1\u02f5\1\0\2\u02f5\3\0\1\u02f5\1\0\1\u02f5"+
    "\1\0\2\u02f5\1\0\1\u02f5\2\0\1\u02f5\3\0\1\u02f5"+
    "\1\0\1\u02f5\1\0\1\u02f5\42\0\2\u01ab\45\0\4\u02f7"+
    "\1\u0328\4\0\6\u02f7\10\0\2\u01ae\42\0\1\u0329\10\0"+
    "\1\u02f7\11\0\1\u032a\12\0\1\u032a\143\0\2\u032b\30\0"+
    "\1\u032c\12\0\1\u032c\130\0\2\u032d\122\0\2\u032e\70\0"+
    "\2\u032f\55\0\1\u0330\166\0\2\u0331\23\0\1\u0332\157\0"+
    "\3\u0333\67\0\1\u0302\17\0\1\u0334\50\0\2\u0335\50\0"+
    "\1\344\1\0\2\344\1\0\1\344\5\0\1\u0128\5\0"+
    "\2\344\2\0\1\344\1\0\1\344\1\0\1\344\1\0"+
    "\1\344\1\u0335\1\u0336\1\0\1\344\1\0\1\344\1\0"+
    "\1\344\2\0\1\344\1\0\1\344\4\0\1\344\1\0"+
    "\1\344\1\0\2\344\1\0\1\344\2\0\1\344\3\0"+
    "\1\344\1\0\1\344\1\0\1\344\5\0\2\u0306\1\0"+
    "\2\u0306\1\0\1\u0306\5\0\1\u0337\5\0\2\u0306\2\0"+
    "\1\u0306\1\0\1\u0306\1\0\1\u0306\1\0\1\u0306\1\0"+
    "\1\u0306\1\0\1\u0306\1\0\1\u0306\1\0\1\u0306\2\0"+
    "\1\u0306\1\0\2\u0306\3\0\1\u0306\1\0\1\u0306\1\0"+
    "\2\u0306\1\0\1\u0306\2\0\1\u0306\3\0\1\u0306\1\0"+
    "\1\u0306\1\0\1\u0306\11\0\1\u0338\12\0\1\u0338\133\0"+
    "\3\u0339\124\0\3\u033a\23\0\1\u033b\12\0\1\u033b\161\0"+
    "\2\u033c\16\0\1\u021b\102\0\1\u033d\12\0\1\u033d\125\0"+
    "\2\u033e\74\0\2\u033f\122\0\3\u0340\124\0\3\u0341\65\0"+
    "\2\u0342\43\0\1\u0266\103\0\1\u0343\12\0\1\u0343\2\0"+
    "\1\u0343\76\0\1\u0344\66\0\1\174\2\0\101\174\50\0"+
    "\2\u0345\46\0\1\u0346\12\0\1\u0346\2\0\1\u0346\125\0"+
    "\2\u0347\47\0\1\u0348\12\0\1\u0348\100\0\1\u0349\77\0"+
    "\1\u034a\12\0\1\u034a\113\0\2\u034b\56\0\1\u034c\163\0"+
    "\2\u034d\77\0\1\u0320\17\0\1\u034e\27\0\1\u034f\71\0"+
    "\2\u02dd\1\0\2\u02dd\1\0\1\u02dd\5\0\1\u0350\5\0"+
    "\2\u02dd\2\0\1\u02dd\1\0\1\u02dd\1\0\1\u02dd\1\0"+
    "\1\u02dd\1\0\1\u02dd\1\0\1\u02dd\1\0\1\u02dd\1\0"+
    "\1\u02dd\2\0\1\u02dd\1\0\2\u02dd\3\0\1\u02dd\1\0"+
    "\1\u02dd\1\0\2\u02dd\1\0\1\u02dd\2\0\1\u02dd\3\0"+
    "\1\u02dd\1\0\1\u02dd\1\0\1\u02dd\12\0\1\u0351\12\0"+
    "\1\u0351\2\0\1\u0351\132\0\2\u0352\1\0\1\u0325\27\0"+
    "\1\170\1\u0353\3\u0354\1\u0355\2\0\1\170\1\0\1\170"+
    "\1\u0354\1\170\1\u0356\2\170\21\0\1\u0357\6\0\1\170"+
    "\5\0\2\170\11\0\1\170\2\0\2\170\6\0\1\170"+
    "\1\u0354\30\0\2\u0358\131\0\1\u0359\36\0\1\u035a\12\0"+
    "\1\u035a\146\0\2\u035b\34\0\1\u01fb\143\0\3\u035c\42\0"+
    "\1\u035d\12\0\1\u035d\72\0\1\u035e\12\0\1\u035e\154\0"+
    "\3\u035f\23\0\1\u0360\12\0\1\u0360\64\0\2\u0330\1\0"+
    "\2\u0330\1\0\1\u0330\5\0\1\u0361\5\0\2\u0330\2\0"+
    "\1\u0330\1\0\1\u0330\1\0\1\u0330\1\0\1\u0330\1\0"+
    "\1\u0330\1\0\1\u0330\1\0\1\u0330\1\0\1\u0330\2\0"+
    "\1\u0330\1\0\2\u0330\3\0\1\u0330\1\0\1\u0330\1\0"+
    "\2\u0330\1\0\1\u0330\2\0\1\u0330\3\0\1\u0330\1\0"+
    "\1\u0330\1\0\1\u0330\36\0\2\u0362\125\0\1\u0363\36\0"+
    "\1\u0364\12\0\1\u0364\64\0\74\u0365\1\0\11\u0365\67\0"+
    "\2\u0366\21\0\1\344\1\0\2\344\1\0\1\344\5\0"+
    "\1\u0128\5\0\2\344\2\0\1\344\1\0\1\344\1\0"+
    "\1\344\1\0\1\344\1\0\1\344\1\0\1\344\1\0"+
    "\1\344\1\0\1\344\2\0\1\344\1\0\1\344\4\0"+
    "\1\344\1\0\1\344\1\0\2\344\1\u0366\1\u0367\2\0"+
    "\1\344\3\0\1\344\1\0\1\344\1\0\1\344\57\0"+
    "\1\u0368\40\0\1\u0369\12\0\1\u0369\2\0\1\u0369\66\0"+
    "\1\u036a\12\0\1\u036a\71\0\1\u036b\12\0\1\u036b\166\0"+
    "\2\u036c\36\0\2\u036d\60\0\1\u036e\12\0\1\u036e\2\0"+
    "\1\u036e\127\0\3\u036f\3\0\1\u0370\30\0\2\u0371\2\0"+
    "\1\u0372\2\0\1\u02d7\2\0\1\u0371\7\0\1\u02d7\2\0"+
    "\1\u02d7\21\0\3\u0373\3\0\1\u0371\26\0\1\u0371\10\0"+
    "\1\u0374\12\0\1\u0374\2\0\1\u0374\65\0\1\u0375\12\0"+
    "\1\u0375\164\0\2\u0376\52\0\2\u0377\41\0\2\u0344\1\0"+
    "\2\u0344\1\0\1\u0344\5\0\1\u0378\5\0\2\u0344\2\0"+
    "\1\u0344\1\0\1\u0344\1\0\1\u0344\1\0\1\u0344\1\0"+
    "\1\u0344\1\0\1\u0344\1\0\1\u0344\1\0\1\u0344\2\0"+
    "\1\u0344\1\0\2\u0344\3\0\1\u0344\1\0\1\u0344\1\0"+
    "\2\u0344\1\0\1\u0344\2\0\1\u0344\3\0\1\u0344\1\0"+
    "\1\u0344\1\0\1\u0344\2\0\1\u02e5\2\0\101\u02e5\13\0"+
    "\1\u0379\12\0\1\u0379\72\0\1\u037a\12\0\1\u037a\163\0"+
    "\2\u037b\55\0\2\u037c\133\0\2\u037d\52\0\3\u037e\122\0"+
    "\2\u037f\55\0\2\u0380\44\0\74\u0381\1\0\11\u0381\55\0"+
    "\1\u0382\105\0\1\u0383\41\0\1\u0384\12\0\1\u0384\72\0"+
    "\1\u0385\12\0\1\u0385\62\0\1\u0386\1\u0354\2\u0386\1\u0387"+
    "\5\0\1\u0386\1\0\1\u0388\23\0\1\u0357\43\0\1\u0386"+
    "\1\0\4\u0386\1\u0387\5\0\1\u0386\1\0\1\u0388\23\0"+
    "\1\u0357\43\0\1\u0386\6\0\1\u0389\12\0\1\u0389\125\0"+
    "\1\u0357\55\0\1\u038a\151\0\1\u0359\17\0\1\u038b\17\0"+
    "\1\u038c\12\0\1\u038c\154\0\3\u038d\42\0\2\u038e\64\0"+
    "\1\u038f\12\0\1\u038f\2\0\1\u038f\66\0\1\u0390\12\0"+
    "\1\u0390\71\0\1\u0391\12\0\1\u0391\166\0\2\u0392\57\0"+
    "\1\u0393\103\0\2\u0394\106\0\1\u0363\17\0\1\u0395\105\0"+
    "\1\u0396\10\0\74\u0365\1\u0397\11\u0365\4\0\1\u0398\105\0"+
    "\1\u0399\1\0\2\344\1\0\1\344\5\0\1\u0128\5\0"+
    "\2\344\2\0\1\344\1\0\1\344\1\0\1\344\1\0"+
    "\1\344\1\0\1\344\1\0\1\344\1\0\1\344\1\0"+
    "\1\344\2\0\1\344\1\0\1\344\4\0\1\344\1\0"+
    "\1\344\1\0\2\344\1\0\1\344\2\0\1\344\3\0"+
    "\1\344\1\0\1\344\1\0\1\344\57\0\1\u0368\17\0"+
    "\1\u039a\21\0\1\u039b\12\0\1\u039b\62\0\2\u01fb\2\u01ab"+
    "\1\u0246\2\0\1\u01ad\1\0\1\u01ab\1\u01fb\4\u01ab\3\0"+
    "\1\u01ad\2\0\1\u01ad\1\0\2\u01ae\10\0\2\325\2\u039c"+
    "\5\0\2\327\1\0\1\u01fb\1\0\2\330\12\0\1\u01b0"+
    "\10\0\1\u01fb\17\0\1\u039d\105\0\1\u039e\141\0\2\u039f"+
    "\42\0\1\u03a0\12\0\1\u03a0\143\0\2\u03a1\22\0\1\u02d3"+
    "\1\u03a2\4\u02d3\2\0\1\u02d3\1\0\6\u02d3\30\0\1\u02d3"+
    "\4\0\3\u02d3\11\0\1\u02d3\2\0\2\u02d3\6\0\2\u02d3"+
    "\1\0\2\u0371\2\0\1\u0372\2\0\1\u02d7\2\0\1\u0371"+
    "\7\0\1\u02d7\2\0\1\u02d7\56\0\1\u0371\6\0\1\u03a3"+
    "\12\0\1\u03a3\137\0\2\u03a4\77\0\2\u03a5\55\0\1\u03a6"+
    "\105\0\1\u03a7\77\0\1\u03a8\12\0\1\u03a8\136\0\1\u03a9"+
    "\42\0\1\u02e5\175\0\2\u03aa\21\0\1\u03ab\74\0\1\u03ac"+
    "\12\0\1\u03ac\56\0\2\u03ac\23\0\1\u03ad\141\0\2\u03ae"+
    "\71\0\2\u03af\44\0\74\u0381\1\u03b0\11\u0381\55\0\1\u0382"+
    "\17\0\1\u03b1\65\0\1\u0383\17\0\1\u03b2\22\0\1\u027e"+
    "\133\0\2\u03b3\53\0\1\u03b4\12\0\1\u03b4\137\0\1\u03b5"+
    "\31\0\74\u03b6\1\0\11\u03b6\10\0\1\u03b7\12\0\1\u03b7"+
    "\2\0\1\u03b7\65\0\1\u03b8\12\0\1\u03b8\72\0\1\u03b9"+
    "\12\0\1\u03b9\75\0\1\u03ba\12\0\1\u03ba\61\0\1\u03bb"+
    "\1\u03bc\4\u03bb\2\0\1\u03bb\1\0\6\u03bb\30\0\1\u03bb"+
    "\5\0\1\u03bd\1\u03bb\2\0\2\u03be\5\0\1\u03bb\2\0"+
    "\2\u03bb\6\0\2\u03bb\17\0\1\u03bf\105\0\1\u03c0\143\0"+
    "\1\u0393\17\0\1\u03c1\70\0\2\u03c2\24\0\74\u03c3\1\0"+
    "\11\u03c3\57\0\1\u03c4\36\0\1\u03c5\12\0\1\u03c5\2\0"+
    "\1\u03c5\63\0\1\344\1\0\2\344\1\u03c5\1\344\5\0"+
    "\1\u0128\3\0\1\u03c5\1\0\1\344\1\u03c6\2\0\1\344"+
    "\1\0\1\344\1\0\1\344\1\0\1\344\1\0\1\344"+
    "\1\0\1\344\1\0\1\344\1\0\1\344\2\0\1\344"+
    "\1\0\1\344\4\0\1\344\1\0\1\344\1\0\2\344"+
    "\1\0\1\344\2\0\1\344\3\0\1\344\1\0\1\344"+
    "\1\0\1\344\2\0\74\u03c7\1\0\11\u03c7\12\0\1\u0298"+
    "\101\0\1\u03c8\12\0\1\u03c8\74\0\1\u03c9\12\0\1\u03c9"+
    "\2\0\1\u03c9\62\0\2\u039e\1\0\2\u039e\1\0\1\u039e"+
    "\5\0\1\u03ca\5\0\2\u039e\2\0\1\u039e\1\0\1\u039e"+
    "\1\0\1\u039e\1\0\1\u039e\1\0\1\u039e\1\0\1\u039e"+
    "\1\0\1\u039e\1\0\1\u039e\2\0\1\u039e\1\0\2\u039e"+
    "\3\0\1\u039e\1\0\1\u039e\1\0\2\u039e\1\0\1\u039e"+
    "\2\0\1\u039e\3\0\1\u039e\1\0\1\u039e\1\0\1\u039e"+
    "\62\0\2\u03cb\36\0\1\u03cc\143\0\3\u03cd\35\0\1\u02d3"+
    "\112\0\1\u03ce\12\0\1\u03ce\71\0\1\u03cf\12\0\1\u03cf"+
    "\120\0\2\u03d0\60\0\1\u03d1\12\0\1\u03d1\2\0\1\u03d1"+
    "\134\0\1\u03d2\132\0\2\u03d3\57\0\1\u03a9\17\0\1\u03d4"+
    "\27\0\1\u03d5\141\0\2\u03d6\50\0\1\u03d7\71\0\2\u03ad"+
    "\1\0\2\u03ad\1\0\1\u03ad\5\0\1\u03d8\5\0\2\u03ad"+
    "\2\0\1\u03ad\1\0\1\u03ad\1\0\1\u03ad\1\0\1\u03ad"+
    "\1\0\1\u03ad\1\0\1\u03ad\1\0\1\u03ad\1\0\1\u03ad"+
    "\2\0\1\u03ad\1\0\2\u03ad\3\0\1\u03ad\1\0\1\u03ad"+
    "\1\0\2\u03ad\1\0\1\u03ad\2\0\1\u03ad\3\0\1\u03ad"+
    "\1\0\1\u03ad\1\0\1\u03ad\10\0\1\u03d9\12\0\1\u03d9"+
    "\132\0\2\u03da\115\0\1\u03db\26\0\74\u03dc\1\0\11\u03dc"+
    "\74\u03dd\1\0\11\u03dd\1\u0325\2\0\101\u0325\12\0\1\u03de"+
    "\12\0\1\u03de\2\0\1\u03de\57\0\1\170\1\171\4\170"+
    "\2\0\1\170\1\0\4\170\1\u03df\1\170\30\0\1\170"+
    "\5\0\2\170\11\0\1\170\2\0\2\170\6\0\2\170"+
    "\74\u03b6\1\u03e0\11\u03b6\11\0\1\u03e1\12\0\1\u03e1\100\0"+
    "\1\u03e2\106\0\1\u03e3\4\0\1\u03e3\72\0\1\u02bf\75\0"+
    "\1\u03bb\103\0\1\u03bb\1\u03bc\4\u03bb\2\0\1\u03bb\1\0"+
    "\6\u03bb\30\0\1\u03bb\5\0\2\u03bb\11\0\1\u03bb\2\0"+
    "\2\u03bb\6\0\2\u03bb\50\0\3\u03e4\43\0\1\u03e5\12\0"+
    "\1\u03e5\2\0\1\u03e5\62\0\2\u03c0\1\0\2\u03c0\1\0"+
    "\1\u03c0\5\0\1\u03e6\5\0\2\u03c0\2\0\1\u03c0\1\0"+
    "\1\u03c0\1\0\1\u03c0\1\0\1\u03c0\1\0\1\u03c0\1\0"+
    "\1\u03c0\1\0\1\u03c0\1\0\1\u03c0\2\0\1\u03c0\1\0"+
    "\2\u03c0\3\0\1\u03c0\1\0\1\u03c0\1\0\2\u03c0\1\0"+
    "\1\u03c0\2\0\1\u03c0\3\0\1\u03c0\1\0\1\u03c0\1\0"+
    "\1\u03c0\2\0\74\u03e7\1\0\11\u03e7\17\0\1\u03e8\66\0"+
    "\74\u03c3\1\u03e9\11\u03c3\62\0\2\u03ea\62\0\2\u03eb\50\0"+
    "\1\344\1\0\2\344\1\0\1\344\5\0\1\u0128\5\0"+
    "\2\344\2\0\1\344\1\0\1\344\1\0\1\344\1\0"+
    "\1\344\1\u03eb\1\u03ec\1\0\1\344\1\0\1\344\1\0"+
    "\1\344\2\0\1\344\1\0\1\344\4\0\1\344\1\0"+
    "\1\344\1\0\2\344\1\0\1\344\2\0\1\344\3\0"+
    "\1\344\1\0\1\344\1\0\1\344\2\0\74\u03c7\1\u03ed"+
    "\11\u03c7\30\0\2\u03ee\122\0\2\u03ef\113\0\1\u03f0\47\0"+
    "\1\u03f1\116\0\2\u03f2\64\0\1\u03f3\12\0\1\u03f3\2\0"+
    "\1\u03f3\117\0\2\u0371\74\0\2\u03f4\122\0\2\u03f5\113\0"+
    "\1\u03d2\17\0\1\u03f6\27\0\1\u03f7\66\0\74\u03f8\1\0"+
    "\11\u03f8\53\0\2\u03f9\131\0\2\u03fa\61\0\1\u03fb\105\0"+
    "\1\u03fc\47\0\1\u03fd\116\0\2\u03fe\136\0\2\u03ff\22\0"+
    "\74\u03dc\1\u0400\11\u03dc\74\u03dd\1\u0401\11\u03dd\11\0\1\u0402"+
    "\12\0\1\u0402\140\0\1\u0403\40\0\1\u02f7\103\0\1\u0404"+
    "\12\0\1\u0404\2\0\1\u0404\107\0\2\u0405\116\0\2\u0406"+
    "\110\0\2\u0407\113\0\1\u0408\30\0\74\u03e7\1\u0409\11\u03e7"+
    "\55\0\1\u040a\107\0\1\u040b\117\0\3\u040c\54\0\2\u040d"+
    "\46\0\1\344\1\0\2\344\1\0\1\344\5\0\1\u0128"+
    "\5\0\2\344\2\0\1\344\1\0\1\344\1\0\1\344"+
    "\1\0\1\344\1\0\1\344\1\u040d\1\u040e\1\0\1\344"+
    "\1\0\1\344\2\0\1\344\1\0\1\344\4\0\1\344"+
    "\1\0\1\344\1\0\2\344\1\0\1\344\2\0\1\344"+
    "\3\0\1\344\1\0\1\344\1\0\1\344\61\0\1\u040f"+
    "\110\0\2\u0410\33\0\1\u0411\12\0\1\u0411\136\0\1\u03f0"+
    "\17\0\1\u0412\65\0\1\u0413\30\0\1\u02d3\1\u03a2\4\u02d3"+
    "\1\u0414\1\0\1\u02d3\1\0\6\u02d3\1\0\1\u0414\26\0"+
    "\1\u02d3\4\0\3\u02d3\11\0\1\u02d3\2\0\2\u02d3\6\0"+
    "\2\u02d3\11\0\1\u0415\12\0\1\u0415\127\0\2\u0416\47\0"+
    "\1\u0417\12\0\1\u0417\61\0\74\u0418\1\0\11\u0418\53\0"+
    "\2\u0419\31\0\74\u03f8\1\u041a\11\u03f8\100\0\2\u041b\23\0"+
    "\1\u041c\143\0\1\u03fb\17\0\1\u041d\65\0\1\u03fc\17\0"+
    "\1\u041e\13\0\2\u03fd\1\0\2\u03fd\1\0\1\u03fd\5\0"+
    "\1\u041f\5\0\2\u03fd\2\0\1\u03fd\1\0\1\u03fd\1\0"+
    "\1\u03fd\1\0\1\u03fd\1\0\1\u03fd\1\0\1\u03fd\1\0"+
    "\1\u03fd\1\0\1\u03fd\2\0\1\u03fd\1\0\2\u03fd\3\0"+
    "\1\u03fd\1\0\1\u03fd\1\0\2\u03fd\1\0\1\u03fd\2\0"+
    "\1\u03fd\3\0\1\u03fd\1\0\1\u03fd\1\0\1\u03fd\44\0"+
    "\2\u0420\133\0\3\u0421\71\0\1\u0422\105\0\1\u0423\40\0"+
    "\1\u0386\155\0\2\u0424\70\0\2\u0425\134\0\2\u0426\17\0"+
    "\1\u0427\12\0\1\u0427\136\0\1\u0408\17\0\1\u0428\67\0"+
    "\1\u0429\103\0\1\u040a\17\0\1\u042a\72\0\2\u042b\30\0"+
    "\1\u042c\12\0\1\u042c\132\0\2\u016b\42\0\1\344\1\0"+
    "\2\344\1\0\1\344\5\0\1\u0128\5\0\2\344\2\0"+
    "\1\344\1\0\1\344\1\0\1\344\1\0\1\344\1\0"+
    "\1\344\1\0\1\344\1\0\1\344\1\u016b\1\u016c\2\0"+
    "\1\344\1\0\1\344\4\0\1\344\1\0\1\344\1\0"+
    "\2\344\1\0\1\344\2\0\1\344\3\0\1\344\1\0"+
    "\1\344\1\0\1\344\64\0\2\u042d\62\0\2\u01fb\146\0"+
    "\2\u042e\2\0\74\u042f\1\0\11\u042f\55\0\1\u0413\17\0"+
    "\1\u0430\40\0\2\u0370\66\0\1\u0371\143\0\3\u0431\135\0"+
    "\2\u0432\2\0\74\u0418\1\u0433\11\u0418\100\0\2\u0434\63\0"+
    "\1\u0435\45\0\1\u0436\143\0\1\u0437\30\0\74\u0438\1\0"+
    "\11\u0438\74\u0439\1\0\11\u0439\55\0\1\u043a\126\0\2\u043b"+
    "\14\0\1\u043c\12\0\1\u043c\146\0\2\u043d\104\0\2\u043e"+
    "\113\0\3\u043f\23\0\1\u0440\12\0\1\u0440\121\0\2\u0441"+
    "\146\0\2\u0442\2\0\74\u0443\1\0\11\u0443\62\0\2\u0444"+
    "\22\0\74\u0445\1\0\11\u0445\71\0\3\u0446\107\0\1\u0447"+
    "\101\0\3\u0448\31\0\1\u0449\66\0\74\u042f\1\u044a\11\u042f"+
    "\74\u044b\1\0\11\u044b\36\0\2\u044c\65\0\1\u044d\145\0"+
    "\1\u044e\45\0\1\u044f\150\0\2\u0450\77\0\1\u0451\105\0"+
    "\1\u0437\17\0\1\u0452\10\0\74\u0438\1\u0453\11\u0438\74\u0439"+
    "\1\u0454\11\u0439\55\0\1\u043a\17\0\1\u0455\50\0\2\u0456"+
    "\141\0\1\121\101\0\3\u0457\103\0\3\u0458\20\0\1\u0459"+
    "\12\0\1\u0459\166\0\2\u045a\21\0\1\u045b\66\0\74\u0443"+
    "\1\u045c\11\u0443\71\0\3\u045d\12\0\74\u0445\1\u045e\11\u0445"+
    "\6\0\1\u045f\12\0\1\u045f\72\0\1\u0460\12\0\1\u0460"+
    "\67\0\2\u0449\1\0\2\u0449\1\0\1\u0449\5\0\1\u0461"+
    "\5\0\2\u0449\2\0\1\u0449\1\0\1\u0449\1\0\1\u0449"+
    "\1\0\1\u0449\1\0\1\u0449\1\0\1\u0449\1\0\1\u0449"+
    "\1\0\1\u0449\2\0\1\u0449\1\0\2\u0449\3\0\1\u0449"+
    "\1\0\1\u0449\1\0\2\u0449\1\0\1\u0449\2\0\1\u0449"+
    "\3\0\1\u0449\1\0\1\u0449\1\0\1\u0449\61\0\1\u0462"+
    "\26\0\74\u044b\1\u0463\11\u044b\30\0\2\u03cc\57\0\2\u044d"+
    "\1\0\2\u044d\1\0\1\u044d\5\0\1\u0464\5\0\2\u044d"+
    "\2\0\1\u044d\1\0\1\u044d\1\0\1\u044d\1\0\1\u044d"+
    "\1\0\1\u044d\1\0\1\u044d\1\0\1\u044d\1\0\1\u044d"+
    "\2\0\1\u044d\1\0\2\u044d\3\0\1\u044d\1\0\1\u044d"+
    "\1\0\2\u044d\1\0\1\u044d\2\0\1\u044d\3\0\1\u044d"+
    "\1\0\1\u044d\1\0\1\u044d\64\0\2\u0465\77\0\1\u0466"+
    "\121\0\3\u0467\67\0\1\u0451\17\0\1\u0468\10\0\74\u0469"+
    "\1\0\11\u0469\57\0\1\u046a\105\0\1\u046b\26\0\74\u046c"+
    "\1\0\11\u046c\67\0\2\u046d\23\0\1\u046e\12\0\1\u046e"+
    "\72\0\1\u046f\12\0\1\u046f\161\0\1\212\27\0\1\u0470"+
    "\71\0\2\u045b\1\0\2\u045b\1\0\1\u045b\5\0\1\u0471"+
    "\5\0\2\u045b\2\0\1\u045b\1\0\1\u045b\1\0\1\u045b"+
    "\1\0\1\u045b\1\0\1\u045b\1\0\1\u045b\1\0\1\u045b"+
    "\1\0\1\u045b\2\0\1\u045b\1\0\2\u045b\3\0\1\u045b"+
    "\1\0\1\u045b\1\0\2\u045b\1\0\1\u045b\2\0\1\u045b"+
    "\3\0\1\u045b\1\0\1\u045b\1\0\1\u045b\61\0\1\u0472"+
    "\34\0\1\u0473\12\0\1\u0473\143\0\1\u0474\123\0\1\u0475"+
    "\105\0\1\246\65\0\1\u0476\112\0\2\u0477\101\0\1\u0478"+
    "\103\0\1\u0479\121\0\3\u047a\67\0\1\u0466\17\0\1\u047b"+
    "\16\0\1\u047c\12\0\1\u047c\64\0\74\u047d\1\0\11\u047d"+
    "\74\u0469\1\u047e\11\u0469\62\0\2\u047f\104\0\2\u0480\22\0"+
    "\74\u046c\1\u0481\11\u046c\4\0\1\u0482\176\0\1\u0483\105\0"+
    "\1\u0484\13\0\2\u0470\1\0\2\u0470\1\0\1\u0470\5\0"+
    "\1\u0485\5\0\2\u0470\2\0\1\u0470\1\0\1\u0470\1\0"+
    "\1\u0470\1\0\1\u0470\1\0\1\u0470\1\0\1\u0470\1\0"+
    "\1\u0470\1\0\1\u0470\2\0\1\u0470\1\0\2\u0470\3\0"+
    "\1\u0470\1\0\1\u0470\1\0\2\u0470\1\0\1\u0470\2\0"+
    "\1\u0470\3\0\1\u0470\1\0\1\u0470\1\0\1\u0470\57\0"+
    "\1\u0486\112\0\2\u0487\117\0\1\323\72\0\2\u0488\23\0"+
    "\2\u0475\2\0\1\u0489\5\0\1\u0475\26\0\2\75\41\0"+
    "\1\u0475\55\0\1\u0476\17\0\1\u048a\101\0\3\u048b\74\0"+
    "\2\u048c\77\0\1\u0479\17\0\1\u048d\16\0\1\u048e\12\0"+
    "\1\u048e\64\0\74\u048f\1\0\11\u048f\75\0\1\u0144\10\0"+
    "\74\u047d\1\u0490\11\u047d\57\0\1\u0491\117\0\3\u0492\103\0"+
    "\3\u0493\71\0\1\u0494\36\0\1\u0495\12\0\1\u0495\2\0"+
    "\1\u0495\60\0\2\u0483\2\0\1\u0496\5\0\1\u0483\16\0"+
    "\2\125\6\0\2\u0497\41\0\1\u0483\1\0\2\u0484\2\121"+
    "\1\u0498\4\0\1\121\1\u0484\4\121\10\0\2\124\2\125"+
    "\6\0\2\u0497\30\0\1\201\10\0\1\u0484\55\0\1\u0499"+
    "\105\0\1\u0486\17\0\1\u049a\101\0\3\u049b\103\0\3\u049c"+
    "\20\0\1\u049d\12\0\1\u049d\64\0\74\u049e\1\0\11\u049e"+
    "\6\0\1\u049f\12\0\1\u049f\155\0\3\u04a0\12\0\74\u04a1"+
    "\1\0\11\u04a1\75\0\1\u04a2\10\0\74\u048f\1\u04a3\11\u048f"+
    "\57\0\1\u04a4\110\0\2\u04a5\30\0\1\u04a6\12\0\1\u04a6"+
    "\72\0\1\u04a7\12\0\1\u04a7\146\0\2\u04a8\62\0\2\u04a9"+
    "\52\0\1\u04aa\12\0\1\u04aa\114\0\2\55\21\0\2\u04ab"+
    "\37\0\1\u04ac\12\0\1\u04ac\141\0\1\u0499\17\0\1\u04ad"+
    "\10\0\74\u04ae\1\0\11\u04ae\6\0\1\u04af\12\0\1\u04af"+
    "\72\0\1\u04b0\12\0\1\u04b0\73\0\1\u04b1\12\0\1\u04b1"+
    "\63\0\74\u049e\1\u04b2\11\u049e\75\0\1\u0136\16\0\1\u04b3"+
    "\12\0\1\u04b3\64\0\74\u04a1\1\u04b4\11\u04a1\1\0\2\u04a2"+
    "\2\0\1\u04b5\2\0\1\275\2\0\1\u04a2\7\0\1\275"+
    "\2\0\1\275\56\0\1\u04a2\57\0\1\u04b6\110\0\2\u04b7"+
    "\113\0\3\u04b8\107\0\1\u04b9\105\0\1\u01ec\101\0\3\u04ba"+
    "\54\0\2\u04bb\51\0\1\u04bc\12\0\1\u04bc\71\0\1\311"+
    "\12\0\1\311\73\0\1\u04bd\12\0\1\u04bd\63\0\74\u04be"+
    "\1\0\11\u04be\74\u04ae\1\u04bf\11\u04ae\75\0\1\u01ab\105\0"+
    "\1\u04c0\20\0\1\u04c1\12\0\1\u04c1\2\0\1\u04c1\136\0"+
    "\1\u04c2\123\0\1\u04c3\67\0\1\u04c4\34\0\1\u04c5\12\0"+
    "\1\u04c5\146\0\2\u04c6\113\0\3\u04c7\20\0\1\u04c8\12\0"+
    "\1\u04c8\65\0\2\u04b9\2\0\1\u04c9\5\0\1\u04b9\53\0"+
    "\2\u010d\14\0\1\u04b9\6\0\1\u04ca\12\0\1\u04ca\132\0"+
    "\2\u034b\46\0\1\u04cb\12\0\1\u04cb\2\0\1\u04cb\67\0"+
    "\1\u04cc\12\0\1\u04cc\2\0\1\u04cc\57\0\74\u04be\1\u04cd"+
    "\11\u04be\57\0\1\u04ce\27\0\2\u04c0\2\0\1\u04cf\5\0"+
    "\1\u04c0\26\0\2\u04d0\41\0\1\u04c0\11\0\1\u04d1\12\0"+
    "\1\u04d1\143\0\2\u04d2\23\0\2\u04c3\2\0\1\u04d3\2\0"+
    "\1\21\1\u04d4\1\0\1\u04c3\7\0\1\21\1\u04d4\1\0"+
    "\1\21\1\0\2\23\2\24\5\0\1\u04d5\2\30\2\31"+
    "\2\32\35\0\1\u04c3\62\0\2\u04d6\31\0\1\u04d7\12\0"+
    "\1\u04d7\154\0\3\u04d8\20\0\1\u04d9\12\0\1\u04d9\161\0"+
    "\1\u04da\16\0\1\u04db\12\0\1\u04db\161\0\1\u04dc\21\0"+
    "\1\u04dd\12\0\1\u04dd\72\0\1\u04de\12\0\1\u04de\140\0"+
    "\1\u04df\110\0\2\u04e0\30\0\1\u04e1\12\0\1\u04e1\76\0"+
    "\1\u0475\164\0\3\u04e2\20\0\1\u04e3\12\0\1\u04e3\120\0"+
    "\2\u04e4\61\0\1\54\165\0\3\u04e5\22\0\1\u04e6\12\0"+
    "\1\u04e6\2\0\1\u04e6\65\0\1\u04e7\12\0\1\u04e7\161\0"+
    "\1\u04e8\11\0\2\u04da\2\0\1\u04e9\5\0\1\u04da\30\0"+
    "\2\u0195\37\0\1\u04da\7\0\1\u04ea\12\0\1\u04ea\75\0"+
    "\1\u0483\105\0\1\u0484\155\0\2\u04eb\113\0\3\u04ec\21\0"+
    "\1\u04ed\12\0\1\u04ed\71\0\1\u04ee\12\0\1\u04ee\73\0"+
    "\1\u04ef\12\0\1\u04ef\123\0\2\103\11\0\2\u04f0\37\0"+
    "\1\u04f1\12\0\1\u04f1\75\0\1\u04f2\12\0\1\u04f2\156\0"+
    "\1\u04f3\11\0\2\u04e8\2\0\1\u04f4\5\0\1\u04e8\26\0"+
    "\2\u01e3\2\u01e4\37\0\1\u04e8\6\0\1\u04f5\12\0\1\u04f5"+
    "\74\0\1\u04f6\12\0\1\u04f6\2\0\1\u04f6\150\0\3\u04f7"+
    "\20\0\1\u04f8\12\0\1\u04f8\74\0\1\u04f9\12\0\1\u04f9"+
    "\2\0\1\u04f9\154\0\1\u0298\20\0\1\u04fa\12\0\1\u04fa"+
    "\2\0\1\u04fa\121\0\2\157\137\0\1\u04fb\22\0\1\u04a2"+
    "\74\0\2\u04f3\2\0\1\u04fc\5\0\1\u04f3\26\0\2\u0224"+
    "\41\0\1\u04f3\6\0\1\u04fd\12\0\1\u04fd\73\0\1\u04fe"+
    "\12\0\1\u04fe\74\0\1\u04ff\12\0\1\u04ff\67\0\1\u0500"+
    "\12\0\1\u0500\161\0\1\u02bf\21\0\1\u0501\12\0\1\u0501"+
    "\72\0\1\u0502\12\0\1\u0502\61\0\1\u02d3\1\u0503\1\u0504"+
    "\2\u02d3\1\u0505\2\0\1\u02d6\1\0\1\u02d3\1\u0504\4\u02d3"+
    "\3\0\1\u02d7\2\0\1\u02d7\5\0\2\u02d8\12\0\1\u02d3"+
    "\4\0\3\u02d3\11\0\1\u02d3\2\0\2\u02d3\6\0\1\u02d3"+
    "\1\u0504\6\0\1\u0506\12\0\1\u0506\73\0\1\u0507\12\0"+
    "\1\u0507\73\0\1\u0508\12\0\1\u0508\2\0\1\u0508\71\0"+
    "\1\u04b9\170\0\1\u02f7\22\0\1\u04c0\105\0\1\u04c3\74\0"+
    "\1\u0509\1\u0504\2\0\1\u050a\2\0\1\u02d7\2\0\1\u0509"+
    "\7\0\1\u02d7\2\0\1\u02d7\5\0\2\u02d8\47\0\1\u0509"+
    "\1\0\2\u0509\2\0\1\u050a\2\0\1\u02d7\2\0\1\u0509"+
    "\7\0\1\u02d7\2\0\1\u02d7\5\0\2\u02d8\47\0\1\u0509"+
    "\6\0\1\u050b\12\0\1\u050b\73\0\1\u050c\12\0\1\u050c"+
    "\73\0\1\u050d\12\0\1\u050d\2\0\1\u050d\70\0\1\u050e"+
    "\12\0\1\u050e\70\0\1\u050f\12\0\1\u050f\73\0\1\u0510"+
    "\12\0\1\u0510\2\0\1\u0510\70\0\1\u0511\12\0\1\u0511"+
    "\73\0\1\u04da\103\0\1\u0512\12\0\1\u0512\2\0\1\u0512"+
    "\70\0\1\u0513\12\0\1\u0513\73\0\1\u04e8\104\0\1\u0514"+
    "\12\0\1\u0514\73\0\1\u04f3\105\0\1\u0509\73\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[85540];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\1\1\11\1\1\1\11\1\1\1\11\6\1"+
    "\140\0\1\11\1\1\1\0\1\1\3\0\1\11\1\1"+
    "\32\0\1\11\13\0\1\11\1\1\2\0\1\1\14\0"+
    "\1\11\1\1\1\0\1\1\1\11\1\1\1\11\1\1"+
    "\1\11\1\1\106\0\1\11\3\1\1\0\1\1\1\0"+
    "\2\1\34\0\1\11\22\0\1\1\30\0\1\11\2\1"+
    "\1\0\1\1\33\0\1\11\1\1\1\0\5\1\36\0"+
    "\1\11\4\1\5\0\1\11\1\1\1\0\1\1\13\0"+
    "\1\11\1\1\1\0\1\1\1\11\2\1\1\0\1\1"+
    "\37\0\1\11\1\1\1\0\1\1\2\0\3\1\3\0"+
    "\1\1\36\0\1\11\11\0\1\11\1\1\11\0\1\11"+
    "\1\1\6\0\3\1\1\0\1\1\111\0\1\1\3\0"+
    "\1\1\7\0\1\1\32\0\1\11\1\1\20\0\3\1"+
    "\20\0\1\11\1\1\1\0\1\1\24\0\1\11\3\1"+
    "\2\0\1\1\1\0\1\1\167\0\4\1\77\0\1\11"+
    "\13\0\1\1\30\0\1\11\2\1\41\0\1\1\147\0"+
    "\1\11\224\0\1\11\46\0\3\1\17\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1300];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	
	/* Custom java code */

    @Override
	public String language() { return "IT"; }

	@Override
	public String version() { return "1.8"; }


	/* An empty default constructor is required to comply with LinkolnService */
	
	public CaseLawAuthorities() { }
	
	@Override
	public final boolean run() {
		
		try {
			
			yyreset(new StringReader(getInput()));
			yylex();
			
		} catch (IOException e) {

			e.printStackTrace();
			return false;
		}
		
		return true;
	}
	
	@Override
	protected void addValue() {
	
		//annotationEntity.setValue("value");
	} 



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CaseLawAuthorities(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 382) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { addText(yytext());
	position++;
            } 
            // fall through
          case 31: break;
          case 2: 
            { addText(yytext());
		position++;
            } 
            // fall through
          case 32: break;
          case 3: 
            { checkEnd();
            } 
            // fall through
          case 33: break;
          case 4: 
            { annotate(new CaseLawAuthority(), "IT_CPP", true, true);
            } 
            // fall through
          case 34: break;
          case 5: 
            { annotate(new EuropeanCaseLawAuthority(), "EU_EPO", true, true);
            } 
            // fall through
          case 35: break;
          case 6: 
            { addText(yytext());
		position--; //account for the following {LKN_C} character
		yybegin(YYINITIAL);
            } 
            // fall through
          case 36: break;
          case 7: 
            { annotate(new CaseLawAuthority(), "IT_PTR", true, true);
            } 
            // fall through
          case 37: break;
          case 8: 
            { annotate(new CaseLawAuthority(), "IT_CASS", true, true);
            } 
            // fall through
          case 38: break;
          case 9: 
            { annotate(new EuropeanCaseLawAuthority(), "EU_CJEC", true, true);
            } 
            // fall through
          case 39: break;
          case 10: 
            { annotate(new EuropeanCaseLawAuthority(), "EU_CJEU", true, true);
            } 
            // fall through
          case 40: break;
          case 11: 
            { annotate(new EuropeanCaseLawAuthority(), "CE_ECHR", true, true);
            } 
            // fall through
          case 41: break;
          case 12: 
            { annotate(new CaseLawAuthority(), "IT_CSS", true, true);
            } 
            // fall through
          case 42: break;
          case 13: 
            { offset += yylength();
		position += Util.removeAllAnnotations(yytext()).length();
            } 
            // fall through
          case 43: break;
          case 14: 
            { annotate(new CaseLawAuthority(), "IT_COST", true, true);
            } 
            // fall through
          case 44: break;
          case 15: 
            { annotate(new CaseLawAuthority(), "IT_PCR", true, true);
            } 
            // fall through
          case 45: break;
          case 16: 
            { annotate(new CaseLawAuthority(), "IT_CONT", true, true);
            } 
            // fall through
          case 46: break;
          case 17: 
            { annotate(new CaseLawAuthority(), "IT_USV", true, true);
            } 
            // fall through
          case 47: break;
          case 18: 
            { annotate(new CaseLawAuthority(), "IT_TMN", true, true);
            } 
            // fall through
          case 48: break;
          case 19: 
            { annotate(new CaseLawAuthority(), "IT_TML", true, true);
            } 
            // fall through
          case 49: break;
          case 20: 
            { annotate(new CaseLawAuthority(), "IT_CSP", true, true);
            } 
            // fall through
          case 50: break;
          case 21: 
            { addText(yytext()); 
	yybegin(lkn);
            } 
            // fall through
          case 51: break;
          case 22: 
            { if(Linkoln.CASS_SUPREME) {
																	annotate(new CaseLawAuthority(), "IT_CASS", true, true);
																} else {
																	addText(yytext());
																	position += yylength();
																}
            } 
            // fall through
          case 52: break;
          case 23: 
            { annotate(new CaseLawAuthority(), "IT_CDS", true, true);
            } 
            // fall through
          case 53: break;
          case 24: 
            { annotate(new CaseLawAuthority(), "IT_GPC", true, true);
            } 
            // fall through
          case 54: break;
          case 25: 
            { annotate(new CaseLawAuthority(), "IT_TSV", true, true);
            } 
            // fall through
          case 55: break;
          case 26: 
            { annotate(new CaseLawAuthority(), "IT_CGARS", true, true);
            } 
            // fall through
          case 56: break;
          case 27: 
            { AnnotationEntity retrievedEntity = retrieveEntity(yytext());
		
		offset += yylength();
		position += retrievedEntity.getText().length();
            } 
            // fall through
          case 57: break;
          case 28: 
            { annotate(new CaseLawAuthority(), "IT_TQP", true, true);
            } 
            // fall through
          case 58: break;
          case 29: 
            { AnnotationEntity retrievedEntity = retrieveEntity(yytext());
		
		annotationEntity.addRelatedEntity(retrievedEntity);
		retrievedEntity.addRelatedEntity(annotationEntity);
		
		//Update the annotation value with the normalized location
		String geoValue = retrievedEntity.getValue();
		if(geoValue != null && geoValue.startsWith("IT_")) {
			annotationEntity.setValue("IT_CONT_" + geoValue.substring(3));
		}
				
		offset += yylength();
		position += retrievedEntity.getText().length();
            } 
            // fall through
          case 59: break;
          case 30: 
            { start(new CaseLawAuthority(), corteContiState, true, false);
            } 
            // fall through
          case 60: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java CaseLawAuthorities [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        CaseLawAuthorities scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new CaseLawAuthorities(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
