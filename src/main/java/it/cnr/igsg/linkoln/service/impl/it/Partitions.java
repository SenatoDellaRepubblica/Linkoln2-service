/* The following code was generated by JFlex 1.7.0 */

/*******************************************************************************
 * Copyright (c) 2016-2021 Institute of Legal Information and Judicial Systems IGSG-CNR (formerly ITTIG-CNR)
 * 
 * This program and the accompanying materials  are made available under the terms of the GNU General Public
 * License as published by the Free Software Foundation; either version 3 of the License, or (at your option)
 * any later version. 
 * You may not use this work except in compliance with the Licence.
 * You may obtain a copy of the Licence at: https://www.gnu.org/licenses/gpl-3.0.txt
 * Unless required by applicable law or agreed to in writing, software distributed under the Licence is 
 * distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the Licence for the specific language governing permissions and limitations under the Licence.
 *  
 * Authors: Lorenzo Bacci (IGSG-CNR)
 ******************************************************************************/
 package it.cnr.igsg.linkoln.service.impl.it;

import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;

import it.cnr.igsg.linkoln.entity.*;
import it.cnr.igsg.linkoln.service.*;

import it.cnr.igsg.linkoln.service.impl.Util;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>jflex/Partitions.jflex</tt>
 */
public class Partitions extends LinkolnAnnotationService {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int lkn = 2;
  public static final int readPartitionState = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\1\1\0\1\1\1\1\22\0\1\1\5\0\1\4"+
    "\1\0\1\0\1\0\2\0\1\1\1\2\1\0\1\41\1\40\1\40"+
    "\1\40\1\40\1\40\1\40\1\40\1\40\1\40\1\40\1\12\1\11"+
    "\5\0\1\21\1\6\1\31\1\16\1\27\1\16\1\23\1\53\1\35"+
    "\1\16\1\47\1\45\1\43\1\5\1\37\1\10\1\16\1\25\1\17"+
    "\1\33\1\16\1\16\1\55\1\16\1\16\1\16\1\50\1\0\1\51"+
    "\1\0\1\3\1\0\1\20\1\14\1\30\1\0\1\26\1\0\1\22"+
    "\1\52\1\34\1\0\1\46\1\44\1\42\1\13\1\36\1\15\1\0"+
    "\1\24\1\7\1\32\1\0\1\0\1\54\1\0\1\0\1\0\12\0"+
    "\1\0\44\0\1\0\5\0\1\0\3\0\1\0\5\0\1\0\5\0"+
    "\1\0\1\0\4\0\1\0\1\0\1\0\1\0\2\0\1\0\1\0"+
    "\2\0\1\0\1\0\1\0\1\0\3\0\2\0\1\0\1\0\2\0"+
    "\3\0\1\0\1\0\4\0\1\0\1\0\1\0\1\0\2\0\1\0"+
    "\1\0\2\0\1\0\1\0\1\0\1\0\3\0\2\0\1\0\1\0"+
    "\2\0\53\0\1\0\1\0\6\0\2\34\66\0\1\0\1\0\4\0"+
    "\1\0\1\0\17\0\1\7\u1c88\0\1\0\1\0\216\0\2\0\42\0"+
    "\1\0\1\0\u0144\0\1\1\20\0\1\2\1\2\4\0\1\0\16\0"+
    "\1\0\1\0\u0100\0\1\46\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\2\2\2\3\12\0\1\4\105\0\1\5"+
    "\41\0\1\5\25\0\1\6\1\7\1\10\31\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[173];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\270\0\212\0\346\0\212"+
    "\0\u0114\0\u0142\0\u0170\0\u019e\0\u01cc\0\u01fa\0\u0228\0\u0256"+
    "\0\u0284\0\u02b2\0\u02e0\0\212\0\u030e\0\u033c\0\u036a\0\u0398"+
    "\0\u03c6\0\u03f4\0\u0422\0\u0450\0\u047e\0\u04ac\0\u04da\0\u0508"+
    "\0\u0536\0\u0564\0\u0592\0\u05c0\0\u05ee\0\u061c\0\u064a\0\u0678"+
    "\0\u06a6\0\u06d4\0\u0702\0\u0730\0\u075e\0\u078c\0\u07ba\0\u07e8"+
    "\0\u0816\0\u0844\0\u0872\0\u08a0\0\u08ce\0\u08fc\0\u092a\0\u0958"+
    "\0\u0986\0\u09b4\0\u09e2\0\u0a10\0\u0a3e\0\u0a6c\0\u0a9a\0\u0ac8"+
    "\0\u0af6\0\u0b24\0\u0b52\0\u0b80\0\u0bae\0\u0bdc\0\u0c0a\0\u0c38"+
    "\0\u0c66\0\u0c94\0\u0cc2\0\u0cf0\0\u0d1e\0\u0d4c\0\u0d7a\0\u0da8"+
    "\0\u0dd6\0\u0e04\0\u0e32\0\u0e60\0\u0e8e\0\u0ebc\0\u0eea\0\u0f18"+
    "\0\u0f46\0\212\0\u0f74\0\u0fa2\0\u0fd0\0\u0ffe\0\u102c\0\u105a"+
    "\0\u1088\0\u10b6\0\u10e4\0\u1112\0\u1140\0\u116e\0\u119c\0\u11ca"+
    "\0\u11f8\0\u1226\0\u1254\0\u1282\0\u12b0\0\u12de\0\u130c\0\u133a"+
    "\0\u1368\0\u1396\0\u13c4\0\u13f2\0\u1420\0\u144e\0\u147c\0\u14aa"+
    "\0\u14d8\0\u1506\0\u1534\0\u1534\0\u1562\0\u1590\0\u15be\0\u15ec"+
    "\0\u161a\0\u1648\0\u1676\0\u16a4\0\u16d2\0\u1700\0\u172e\0\u175c"+
    "\0\u178a\0\u17b8\0\u17e6\0\u1814\0\u1842\0\u1870\0\u189e\0\u18cc"+
    "\0\u18fa\0\u1928\0\212\0\212\0\u1928\0\u1956\0\u1984\0\u19b2"+
    "\0\u19e0\0\u1a0e\0\u1a3c\0\u1a6a\0\u1a98\0\u1ac6\0\u1af4\0\u1b22"+
    "\0\u1b50\0\u1b7e\0\u1bac\0\u1bda\0\u1c08\0\u1c36\0\u1c64\0\u1c92"+
    "\0\u1cc0\0\u1cee\0\u1d1c\0\u1d4a\0\u1d78";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[173];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\50\4\1\5\5\4\50\6\1\7\5\6\50\10\1\11"+
    "\5\10\122\0\2\12\51\0\1\13\60\0\2\14\56\0"+
    "\2\15\52\0\2\16\56\0\2\17\13\0\1\20\5\0"+
    "\1\20\110\0\2\21\13\0\1\22\5\0\1\22\54\0"+
    "\1\23\50\0\1\24\5\0\1\24\54\0\1\25\46\0"+
    "\1\26\1\0\2\26\1\0\1\27\4\0\1\30\2\26"+
    "\1\31\1\32\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\33\1\34\1\0\1\26\1\35\1\36\1\0\1\26"+
    "\3\0\1\26\1\37\1\40\1\0\1\26\3\0\1\26"+
    "\1\0\1\26\7\0\1\41\1\42\4\0\1\42\1\0"+
    "\1\41\2\43\6\0\2\44\2\0\2\45\6\0\2\46"+
    "\13\0\1\26\1\0\2\26\1\0\1\26\1\0\1\47"+
    "\3\0\2\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\3\0\1\26\1\0\1\26\1\0\1\26"+
    "\3\0\1\26\1\0\1\26\3\0\1\26\1\0\2\26"+
    "\1\0\1\26\1\0\1\47\3\0\2\26\1\50\1\51"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\3\0\1\26"+
    "\1\0\1\26\1\0\1\26\3\0\1\26\1\0\1\26"+
    "\20\0\2\50\60\0\2\52\33\0\1\26\1\0\2\26"+
    "\1\0\1\26\1\0\1\47\3\0\2\26\1\0\1\26"+
    "\1\0\1\26\1\52\1\53\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\3\0\1\26"+
    "\1\0\1\26\1\0\1\26\3\0\1\26\1\0\1\26"+
    "\36\0\2\54\21\0\1\26\1\0\2\26\1\0\1\26"+
    "\1\0\1\47\3\0\2\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\54\1\55\3\0\1\26\1\0\1\26"+
    "\1\0\1\26\3\0\1\26\1\0\1\26\32\0\2\56"+
    "\25\0\1\26\1\0\2\26\1\0\1\26\1\0\1\47"+
    "\3\0\2\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\56\1\57\1\0\1\26"+
    "\1\0\1\26\3\0\1\26\1\0\1\26\1\0\1\26"+
    "\3\0\1\26\1\0\1\26\26\0\2\60\31\0\1\26"+
    "\1\0\2\26\1\0\1\26\1\0\1\47\3\0\2\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\60\1\61"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\3\0\1\26\1\0\1\26\1\0\1\26\3\0\1\26"+
    "\1\0\1\26\32\0\2\62\42\0\2\63\60\0\2\64"+
    "\66\0\2\65\50\0\2\66\50\0\2\67\30\0\2\47"+
    "\1\0\2\47\1\0\1\47\1\0\1\70\3\0\2\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\2\47"+
    "\2\0\1\47\1\0\1\47\1\0\1\47\3\0\1\47"+
    "\1\0\1\47\24\0\2\71\33\0\1\26\1\0\2\26"+
    "\1\0\1\26\1\0\1\47\3\0\2\26\1\0\1\26"+
    "\1\0\1\26\1\71\1\72\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\3\0\1\26"+
    "\1\0\1\26\1\0\1\26\3\0\1\26\1\0\1\26"+
    "\32\0\2\73\25\0\1\26\1\0\2\26\1\0\1\26"+
    "\1\0\1\47\3\0\2\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\73\1\74"+
    "\1\0\1\26\1\0\1\26\3\0\1\26\1\0\1\26"+
    "\1\0\1\26\3\0\1\26\1\0\1\26\42\0\2\75"+
    "\15\0\1\26\1\0\2\26\1\0\1\26\1\0\1\47"+
    "\3\0\2\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\2\0\1\75\1\76\1\0\1\26\1\0"+
    "\1\26\3\0\1\26\1\0\1\26\26\0\2\77\31\0"+
    "\1\26\1\0\2\26\1\0\1\26\1\0\1\47\3\0"+
    "\2\26\1\0\1\26\1\0\1\26\1\0\1\26\1\77"+
    "\1\100\1\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\3\0\1\26\1\0\1\26\1\0\1\26\3\0"+
    "\1\26\1\0\1\26\32\0\2\101\25\0\1\26\1\0"+
    "\2\26\1\0\1\26\1\0\1\47\3\0\2\26\1\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\101\1\102\1\0\1\26\1\0\1\26\3\0"+
    "\1\26\1\0\1\26\1\0\1\26\3\0\1\26\1\0"+
    "\1\26\10\0\1\103\4\0\1\103\64\0\2\104\62\0"+
    "\2\105\64\0\2\106\40\0\2\107\60\0\2\110\62\0"+
    "\1\111\35\0\2\112\37\0\1\26\1\0\2\26\1\0"+
    "\1\26\1\0\1\47\3\0\2\26\1\112\1\113\1\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\1\26\3\0\1\26\1\0"+
    "\1\26\1\0\1\26\3\0\1\26\1\0\1\26\34\0"+
    "\2\114\23\0\1\26\1\0\2\26\1\0\1\26\1\0"+
    "\1\47\3\0\2\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\1\26\1\114"+
    "\1\115\1\0\1\26\3\0\1\26\1\0\1\26\1\0"+
    "\1\26\3\0\1\26\1\0\1\26\42\0\2\116\15\0"+
    "\1\26\1\0\2\26\1\0\1\26\1\0\1\47\3\0"+
    "\2\26\1\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\2\0\1\116\1\117\1\0\1\26\1\0\1\26"+
    "\3\0\1\26\1\0\1\26\42\0\2\120\15\0\1\26"+
    "\1\0\2\26\1\0\1\26\1\0\1\47\3\0\2\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\2\0\1\120\1\121\1\0\1\26\1\0\1\26\3\0"+
    "\1\26\1\0\1\26\32\0\2\122\25\0\1\26\1\0"+
    "\2\26\1\0\1\26\1\0\1\47\3\0\2\26\1\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\122\1\123\1\0\1\26\1\0\1\26\3\0"+
    "\1\26\1\0\1\26\1\0\1\26\3\0\1\26\1\0"+
    "\1\26\54\0\2\124\20\0\2\125\70\0\2\126\62\0"+
    "\2\127\54\0\2\130\44\0\2\131\62\0\1\111\10\0"+
    "\1\132\26\0\2\133\35\0\1\26\1\0\2\26\1\0"+
    "\1\26\1\0\1\47\3\0\2\26\1\0\1\26\1\133"+
    "\1\134\1\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\1\26\3\0\1\26\1\0"+
    "\1\26\1\0\1\26\3\0\1\26\1\0\1\26\30\0"+
    "\2\135\27\0\1\26\1\0\2\26\1\0\1\26\1\0"+
    "\1\47\3\0\2\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\135\1\136\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\3\0\1\26\1\0\1\26\1\0"+
    "\1\26\3\0\1\26\1\0\1\26\20\0\2\120\37\0"+
    "\1\26\1\0\2\26\1\0\1\26\1\0\1\47\3\0"+
    "\2\26\1\120\1\121\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\3\0\1\26\1\0\1\26\1\0\1\26\3\0"+
    "\1\26\1\0\1\26\12\0\1\137\46\0\1\26\1\0"+
    "\2\26\1\0\1\26\1\0\1\140\3\0\2\26\1\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\1\26\3\0"+
    "\1\26\1\0\1\26\1\0\1\26\3\0\1\26\1\0"+
    "\1\26\26\0\2\141\31\0\1\26\1\0\2\26\1\0"+
    "\1\26\1\0\1\47\3\0\2\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\141\1\142\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\1\26\3\0\1\26\1\0"+
    "\1\26\1\0\1\26\3\0\1\26\1\0\1\26\12\0"+
    "\1\143\65\0\2\144\62\0\2\145\44\0\2\130\46\0"+
    "\1\146\71\0\2\147\52\0\2\150\33\0\1\26\1\0"+
    "\2\26\1\0\1\26\1\0\1\47\3\0\2\26\1\0"+
    "\1\26\1\0\1\26\1\150\1\151\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\1\26\3\0"+
    "\1\26\1\0\1\26\1\0\1\26\3\0\1\26\1\0"+
    "\1\26\44\0\2\152\13\0\1\26\1\0\2\26\1\0"+
    "\1\26\1\0\1\47\3\0\2\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\1\26\3\0\1\26\1\152"+
    "\1\153\1\0\1\26\3\0\1\26\1\0\1\26\2\0"+
    "\2\137\1\0\2\137\1\0\1\137\1\0\1\154\3\0"+
    "\2\137\1\0\1\137\1\0\1\137\1\0\1\137\1\0"+
    "\1\137\1\0\1\137\1\0\1\137\1\0\1\137\1\0"+
    "\2\137\2\0\1\137\1\0\1\137\1\0\1\137\3\0"+
    "\1\137\1\0\1\137\2\0\2\140\1\0\2\140\1\0"+
    "\1\140\1\0\1\155\3\0\2\140\1\0\1\140\1\0"+
    "\1\140\1\0\1\140\1\0\1\140\1\0\1\140\1\0"+
    "\1\140\1\0\1\140\1\0\2\140\2\0\1\140\1\0"+
    "\1\140\1\0\1\140\3\0\1\140\1\0\1\140\24\0"+
    "\2\120\33\0\1\26\1\0\2\26\1\0\1\26\1\0"+
    "\1\47\3\0\2\26\1\0\1\26\1\0\1\26\1\120"+
    "\1\121\1\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\3\0\1\26\1\0\1\26\1\0"+
    "\1\26\3\0\1\26\1\0\1\26\2\0\2\143\1\0"+
    "\2\143\1\0\1\143\1\0\1\156\3\0\2\143\1\0"+
    "\1\143\1\0\1\143\1\0\1\143\1\0\1\143\1\0"+
    "\1\143\1\0\1\143\1\0\1\143\1\0\2\143\2\0"+
    "\1\143\1\0\1\143\1\0\1\143\3\0\1\143\1\0"+
    "\1\143\24\0\2\157\74\0\2\160\12\0\2\146\1\0"+
    "\2\146\1\0\1\146\1\0\1\161\3\0\2\146\1\0"+
    "\1\146\1\0\1\146\1\0\1\146\1\0\1\146\1\0"+
    "\1\146\1\0\1\146\1\0\1\146\1\0\2\146\2\0"+
    "\1\146\1\0\1\146\1\0\1\146\3\0\1\146\1\0"+
    "\1\146\24\0\2\130\50\0\2\162\37\0\1\26\1\0"+
    "\2\26\1\0\1\26\1\0\1\47\3\0\2\26\1\162"+
    "\1\163\1\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\1\26\3\0"+
    "\1\26\1\0\1\26\1\0\1\26\3\0\1\26\1\0"+
    "\1\26\26\0\2\120\31\0\1\26\1\0\2\26\1\0"+
    "\1\26\1\0\1\47\3\0\2\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\120\1\121\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\1\26\3\0\1\26\1\0"+
    "\1\26\1\0\1\26\3\0\1\26\1\0\1\26\40\0"+
    "\1\164\55\0\1\165\55\0\1\166\35\0\2\167\62\0"+
    "\2\130\66\0\1\170\25\0\1\171\4\0\1\171\43\0"+
    "\1\26\1\0\2\26\1\0\1\172\1\0\1\47\2\0"+
    "\1\171\2\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\3\0\1\26\1\0\1\26\1\0\1\26"+
    "\3\0\1\26\1\0\1\26\40\0\1\164\10\0\1\173"+
    "\44\0\1\165\10\0\1\174\44\0\1\166\10\0\1\175"+
    "\14\0\1\176\4\0\1\176\100\0\1\170\10\0\1\177"+
    "\56\0\2\120\5\0\1\26\1\0\2\26\1\0\1\26"+
    "\1\0\1\47\3\0\2\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\3\0\1\26\1\0\1\26"+
    "\1\0\1\26\2\0\1\120\1\121\1\0\1\26\50\200"+
    "\1\0\5\200\50\201\1\0\5\201\52\0\2\130\2\0"+
    "\50\202\1\0\5\202\50\200\1\203\5\200\50\201\1\204"+
    "\5\201\50\202\1\205\5\202\41\0\1\206\55\0\1\207"+
    "\55\0\1\210\60\0\2\211\54\0\2\212\54\0\2\213"+
    "\56\0\2\214\54\0\2\215\54\0\2\216\13\0\1\217"+
    "\5\0\1\217\47\0\1\220\5\0\1\220\47\0\1\221"+
    "\5\0\1\221\113\0\1\222\55\0\1\223\55\0\1\224"+
    "\5\0\3\225\1\226\43\0\1\227\12\0\1\230\5\0"+
    "\1\230\106\0\2\231\16\0\1\232\5\0\1\232\107\0"+
    "\2\233\15\0\1\234\7\0\1\234\43\0\1\235\5\0"+
    "\1\235\52\0\1\236\4\0\1\236\52\0\1\237\54\0"+
    "\1\225\53\0\1\240\1\30\4\0\1\30\1\0\1\240"+
    "\2\31\6\0\2\33\2\0\2\35\6\0\2\37\42\0"+
    "\2\241\32\0\1\242\4\0\1\242\114\0\2\243\12\0"+
    "\1\244\45\0\2\244\1\0\2\244\1\0\1\244\1\0"+
    "\1\245\3\0\2\244\1\0\1\244\1\0\1\244\1\0"+
    "\1\244\1\0\1\244\1\0\1\244\1\0\1\244\1\0"+
    "\1\244\1\0\2\244\2\0\1\244\1\0\1\244\1\0"+
    "\1\244\3\0\1\244\1\0\1\244\40\0\1\246\55\0"+
    "\1\246\10\0\1\247\4\0\50\250\1\0\55\250\1\251"+
    "\5\250\41\0\1\252\60\0\2\253\56\0\2\254\13\0"+
    "\1\255\5\0\1\255\113\0\1\225\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7590];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\1\1\1\11\1\1\12\0"+
    "\1\11\105\0\1\11\41\0\1\1\25\0\1\1\2\11"+
    "\31\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[173];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	
	/* Custom java code */

    @Override
	public String language() { return "IT"; }

	@Override
	public String version() { return "2.6"; }


	/* An empty default constructor is required to comply with LinkolnService */
	
	public Partitions() { }
	
	@Override
	public final boolean run() {
		
		try {
			
			yyreset(new StringReader(getInput()));
			yylex();
			
		} catch (IOException e) {

			e.printStackTrace();
			return false;
		}
		
		return true;
	}
	
	@Override
	protected void addValue() {
	
		//annotationEntity.setValue("value");
	}
		
	private ArrayList<Object> partitionsAndText = new ArrayList<Object>();

	private AnnotationEntity firstEntity = null;
	private boolean modeSet = false;
	private boolean ascendingMode = false;
	
	private StringBuilder buffer = new StringBuilder();


	private void propagateBackwards(AnnotationEntity retrievedEntity) {
	
		for(Object partext : partitionsAndText) {
			
			if( !(partext instanceof Partition)) continue;
			
			if(partext == annotationEntity) continue; // avoid checking the actual partition
			
			boolean add = true;
			
			for(AnnotationEntity related : ((Partition) partext).getRelatedEntities()) {
			
				if( !(related instanceof PartitionElement)) continue;
				
				if(((PartitionElement) related).getRank() >= ((PartitionElement) retrievedEntity).getRank()) {
				
					add = false;
				} 
			}
			
			if(add) {
			
				((Partition) partext).addRelatedEntity(retrievedEntity);
				retrievedEntity.addRelatedEntity((Partition) partext);
				
				((LegislativePartition) partext).updateValue();
			}
		}
	}
	
	private void propagateForward(AnnotationEntity retrievedEntity) {
	
		for(Object partext : partitionsAndText) {
			
			if( !(partext instanceof Partition)) continue;
			
			if(partext == annotationEntity) continue; // avoid checking the actual partition
			
			for(AnnotationEntity related : ((Partition) partext).getRelatedEntities()) {
			
				if( !(related instanceof PartitionElement)) continue;
				
				if(((PartitionElement) related).getRank() > ((PartitionElement) retrievedEntity).getRank()) {

					annotationEntity.addRelatedEntity(related);
					related.addRelatedEntity(annotationEntity);
					
					((LegislativePartition) annotationEntity).updateValue();
				} 
			}	
		}
	}
	


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Partitions(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 382) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { addText(yytext());
	position++;
            } 
            // fall through
          case 9: break;
          case 2: 
            { addText(yytext());
		position++;
            } 
            // fall through
          case 10: break;
          case 3: 
            { offset++;
		position++;
		
		if(offset >= length) {
			
			if(offset > length) {
				yypushback(1);
				position--;
			}
			
			for(Object partext : partitionsAndText) {
				
				if(partext instanceof String) {
				
					addText((String) partext);
				}
				
				if(partext instanceof AnnotationEntity) {
				
					addEntity((AnnotationEntity) partext);
				}
			}
			
			yybegin(0);
		}
		
		buffer.append(yytext());
            } 
            // fall through
          case 11: break;
          case 4: 
            { addText(yytext());
		position--; //account for the following {LKN_C} character
		yybegin(YYINITIAL);
            } 
            // fall through
          case 12: break;
          case 5: 
            { addText(yytext()); 
	yybegin(lkn);
            } 
            // fall through
          case 13: break;
          case 6: 
            { partitionsAndText = new ArrayList<Object>();
	
	firstEntity = null;
	modeSet = false;
	buffer = new StringBuilder();

	offset = 0;
	length = yylength();	
	
	yypushback(length);
	
	annotationEntity = new LegislativePartition();
	annotationEntity.setPosition(position);
	partitionsAndText.add(annotationEntity);
	
	yybegin(readPartitionState);
            } 
            // fall through
          case 14: break;
          case 7: 
            { AnnotationEntity retrievedEntity = retrieveEntity(yytext());
		
		offset += yylength();

		if(offset > length) {
		
			yypushback(yylength());

			for(Object partext : partitionsAndText) {
				
				if(partext instanceof String) {
				
					addText((String) partext);
				}
				
				if(partext instanceof AnnotationEntity) {
				
					addEntity((AnnotationEntity) partext);
				}
			}

			yybegin(0);
		
		} else {

			position += retrievedEntity.getText().length();
			//buffer.append(retrievedEntity.getText());
			buffer.append(yytext());
		}
            } 
            // fall through
          case 15: break;
          case 8: 
            { AnnotationEntity retrievedEntity = retrieveEntity(yytext());
		
		if(firstEntity == null) {
		
			firstEntity = retrievedEntity;
	
		} else {
		
			if( !modeSet) {
			
				if(((PartitionElement) retrievedEntity).getRank() > ((PartitionElement) firstEntity).getRank()) {
				
					ascendingMode = true;
					modeSet = true;
				}
				
				if(((PartitionElement) retrievedEntity).getRank() < ((PartitionElement) firstEntity).getRank()) {
				
					ascendingMode = false;
					modeSet = true;
				}
			}
		}

		if(annotationEntity.getRelatedEntity(retrievedEntity.getEntityName()) != null) {
			
			//Un partition element dello stesso tipo è già presente nell'attuale partition. Inizializza una nuova partition
		
			annotationEntity = new LegislativePartition();
			annotationEntity.setPosition(position);

			partitionsAndText.add(buffer.toString());		
			partitionsAndText.add(annotationEntity);
			buffer = new StringBuilder();
			
			annotationEntity.addRelatedEntity(retrievedEntity);
			retrievedEntity.addRelatedEntity(annotationEntity);
			
			annotationEntity.setText(retrievedEntity.getText());
			
			((LegislativePartition) annotationEntity).updateValue();
			
			if(modeSet) {
				
				if(ascendingMode) {
	
					//Aggiungi questo elemento alle partizioni precedenti che non avevano questo elemento o elementi di ordine superiore SE SIAMO IN UP

					propagateBackwards(retrievedEntity);
	
				} else {
				
					//Si ereditano gli oggetti di ordine superiore delle partizioni precedenti SE SIAMO IN DOWN
					
					propagateForward(retrievedEntity);				
				}
			}
			
		} else {
		
			//Il partition element non è presente nell'attuale partition, aggiungilo
		
			annotationEntity.setText(Util.removeAllAnnotations(annotationEntity.getText() + buffer.toString() + retrievedEntity.getText()));
			buffer = new StringBuilder();
			 
			annotationEntity.addRelatedEntity(retrievedEntity);
			retrievedEntity.addRelatedEntity(annotationEntity);
			
			((LegislativePartition) annotationEntity).updateValue();
			
			if(modeSet) {
				
				if(ascendingMode) {
					
					propagateBackwards(retrievedEntity);				
				}
			}
		}
		
		position += Util.removeAllAnnotations(yytext()).length();
		offset += yylength();
            } 
            // fall through
          case 16: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Partitions [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Partitions scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Partitions(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
