/* The following code was generated by JFlex 1.7.0 */

/*******************************************************************************
 * Copyright (c) 2016-2021 Institute of Legal Information and Judicial Systems IGSG-CNR (formerly ITTIG-CNR)
 * 
 * This program and the accompanying materials  are made available under the terms of the GNU General Public
 * License as published by the Free Software Foundation; either version 3 of the License, or (at your option)
 * any later version. 
 * You may not use this work except in compliance with the Licence.
 * You may obtain a copy of the Licence at: https://www.gnu.org/licenses/gpl-3.0.txt
 * Unless required by applicable law or agreed to in writing, software distributed under the Licence is 
 * distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the Licence for the specific language governing permissions and limitations under the Licence.
 *  
 * Authors: Lorenzo Bacci (IGSG-CNR)
 ******************************************************************************/
 package it.cnr.igsg.linkoln.service.impl.it;

import java.io.IOException;
import java.io.StringReader;

import it.cnr.igsg.linkoln.entity.*;
import it.cnr.igsg.linkoln.service.*;

import it.cnr.igsg.linkoln.service.impl.Util;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>jflex/RegionalCaseLawAuthorities.jflex</tt>
 */
public class RegionalCaseLawAuthorities extends LinkolnAnnotationService {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int lkn = 2;
  public static final int regionalState = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\13\1\2\1\0\1\13\1\1\22\0\1\13\5\0\1\5"+
    "\1\0\1\14\1\14\2\0\1\14\1\3\1\53\1\54\1\52\1\52"+
    "\1\52\1\52\1\52\1\52\1\52\1\52\1\52\1\52\1\15\1\12"+
    "\5\0\1\26\1\7\1\40\1\62\1\36\1\75\1\30\1\73\1\47"+
    "\1\77\1\65\1\60\1\56\1\6\1\51\1\11\1\23\1\32\1\24"+
    "\1\44\1\42\1\34\1\101\1\23\1\71\1\23\1\66\1\0\1\67"+
    "\1\0\1\4\1\0\1\25\1\20\1\37\1\61\1\35\1\74\1\27"+
    "\1\72\1\46\1\76\1\64\1\57\1\55\1\17\1\50\1\22\1\16"+
    "\1\31\1\21\1\43\1\41\1\33\1\100\1\16\1\70\1\16\12\0"+
    "\1\0\44\0\1\0\5\0\1\0\3\0\1\0\5\0\1\0\5\0"+
    "\1\16\1\16\4\16\1\0\1\16\1\16\1\16\2\16\1\16\1\16"+
    "\2\16\1\0\1\16\1\16\1\16\3\16\2\0\1\16\1\16\2\16"+
    "\3\0\1\16\1\16\4\16\1\0\1\16\1\16\1\16\2\16\1\16"+
    "\1\16\2\16\1\0\1\16\1\16\1\16\3\16\2\0\1\16\1\16"+
    "\2\16\53\0\1\16\1\16\6\0\2\45\66\0\1\16\1\16\4\0"+
    "\1\16\1\16\17\0\1\10\u1c88\0\1\16\1\16\216\0\2\16\42\0"+
    "\1\16\1\16\u0144\0\1\13\20\0\1\3\1\3\4\0\1\0\16\0"+
    "\1\0\1\0\u0100\0\1\63\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\4\1\2\2\5\3\54\0\1\4\36\0\1\4"+
    "\1\0\1\5\15\0\4\6\1\0\2\6\6\0\1\7"+
    "\5\0\1\4\6\0\1\5\40\0\3\10\1\0\1\10"+
    "\50\0\1\6\26\0\1\5\63\0\1\5\40\0\4\10"+
    "\1\0\2\10\53\0\1\11\23\0\1\12\42\0\1\11"+
    "\56\0\1\11\45\0\1\13\50\0\1\13\1\0\1\14"+
    "\46\0\1\14\54\0\1\5\37\0\1\5\2\0\1\15"+
    "\125\0\1\16\112\0\1\17\4\0\1\20\27\0\1\17"+
    "\74\0\1\21\147\0\1\17\30\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[1051];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\u0108\0\u014a\0\u018c\0\u01ce"+
    "\0\u0210\0\u01ce\0\u0252\0\u01ce\0\u0294\0\u02d6\0\u0318\0\u035a"+
    "\0\u039c\0\u03de\0\u0420\0\u0462\0\u04a4\0\u04e6\0\u0528\0\u056a"+
    "\0\u05ac\0\u05ee\0\u0630\0\u014a\0\u0672\0\u06b4\0\u06f6\0\u0738"+
    "\0\u077a\0\u07bc\0\u07fe\0\u0840\0\u0882\0\u08c4\0\u0906\0\u0948"+
    "\0\u098a\0\u09cc\0\u0a0e\0\u0a50\0\u0a92\0\u0ad4\0\u0b16\0\u0b58"+
    "\0\u0b9a\0\u0bdc\0\u0c1e\0\u0c60\0\u0ca2\0\u0ce4\0\u0d26\0\u0d68"+
    "\0\u0daa\0\u0dec\0\u0e2e\0\u0e70\0\u0eb2\0\u0ef4\0\u0f36\0\u0f78"+
    "\0\u0fba\0\u0ffc\0\u103e\0\u1080\0\u10c2\0\u1104\0\u1146\0\u1188"+
    "\0\u11ca\0\u120c\0\u124e\0\u1290\0\u12d2\0\u1314\0\u1356\0\u1398"+
    "\0\u13da\0\u141c\0\u145e\0\u14a0\0\u14e2\0\u1524\0\u1566\0\u15a8"+
    "\0\u15ea\0\u162c\0\u166e\0\u01ce\0\u16b0\0\u16f2\0\u1734\0\u1776"+
    "\0\u17b8\0\u17fa\0\u183c\0\u187e\0\u18c0\0\u1902\0\u1944\0\u1986"+
    "\0\u19c8\0\u1a0a\0\u1a4c\0\u01ce\0\u1a8e\0\u1ad0\0\u1b12\0\u1b54"+
    "\0\u1b96\0\u1bd8\0\u1c1a\0\u1c5c\0\u1c9e\0\u1ce0\0\u1d22\0\u1d64"+
    "\0\u01ce\0\u1da6\0\u1de8\0\u1e2a\0\u1e6c\0\u1eae\0\u1ef0\0\u1f32"+
    "\0\u1f74\0\u1fb6\0\u1ff8\0\u203a\0\u207c\0\u1f74\0\u20be\0\u2100"+
    "\0\u2142\0\u2184\0\u21c6\0\u2208\0\u224a\0\u228c\0\u22ce\0\u2310"+
    "\0\u2352\0\u2394\0\u23d6\0\u2418\0\u245a\0\u249c\0\u24de\0\u2520"+
    "\0\u1ad0\0\u1b12\0\u1bd8\0\u2562\0\u25a4\0\u25e6\0\u2628\0\u266a"+
    "\0\u26ac\0\u26ee\0\u2730\0\u2772\0\u27b4\0\u27f6\0\u01ce\0\u2838"+
    "\0\u287a\0\u287a\0\u28bc\0\u28fe\0\u2940\0\u2982\0\u29c4\0\u2a06"+
    "\0\u2a48\0\u2a8a\0\u2acc\0\u2b0e\0\u2b50\0\u2b92\0\u2bd4\0\u2c16"+
    "\0\u2c58\0\u2c9a\0\u2cdc\0\u2d1e\0\u2d60\0\u2da2\0\u2de4\0\u2e26"+
    "\0\u2e68\0\u2eaa\0\u2eec\0\u2f2e\0\u2f70\0\u2fb2\0\u2ff4\0\u3036"+
    "\0\u3078\0\u30ba\0\u30fc\0\u313e\0\u3180\0\u31c2\0\u3204\0\u3246"+
    "\0\u3288\0\u32ca\0\u330c\0\u334e\0\u334e\0\u3390\0\u33d2\0\u3414"+
    "\0\u3456\0\u3498\0\u34da\0\u351c\0\u355e\0\u35a0\0\u35e2\0\u3624"+
    "\0\u3666\0\u36a8\0\u36ea\0\u372c\0\u376e\0\u37b0\0\u37f2\0\u3834"+
    "\0\u3876\0\u38b8\0\u38fa\0\u393c\0\u397e\0\u39c0\0\u3a02\0\u3a44"+
    "\0\u3a86\0\u3ac8\0\u3b0a\0\u3b4c\0\u3b8e\0\u3bd0\0\u3c12\0\u3c54"+
    "\0\u3c96\0\u3cd8\0\u3d1a\0\u3d5c\0\u3d9e\0\u3de0\0\u3e22\0\u3e64"+
    "\0\u3ea6\0\u3ee8\0\u3f2a\0\u3f6c\0\u3fae\0\u3ff0\0\u4032\0\u4074"+
    "\0\u40b6\0\u40f8\0\u413a\0\u417c\0\u41be\0\u4200\0\u4242\0\u4284"+
    "\0\u42c6\0\u4308\0\u434a\0\u438c\0\u43ce\0\u4410\0\u4452\0\u4494"+
    "\0\u44d6\0\u4518\0\u455a\0\u459c\0\u45de\0\u4620\0\u01ce\0\u4662"+
    "\0\u46a4\0\u46e6\0\u4728\0\u476a\0\u47ac\0\u47ee\0\u4830\0\u4872"+
    "\0\u48b4\0\u48f6\0\u4938\0\u497a\0\u49bc\0\u49fe\0\u4a40\0\u4a82"+
    "\0\u4ac4\0\u4b06\0\u4b48\0\u4b8a\0\u4bcc\0\u4c0e\0\u4c50\0\u4c92"+
    "\0\u4cd4\0\u4d16\0\u4d58\0\u4d9a\0\u4ddc\0\u4e1e\0\u4e60\0\u4ea2"+
    "\0\u187e\0\u2208\0\u4ee4\0\u4ee4\0\u4f26\0\u224a\0\u4f68\0\u4faa"+
    "\0\u4fec\0\u502e\0\u5070\0\u50b2\0\u50f4\0\u5136\0\u5178\0\u51ba"+
    "\0\u51fc\0\u523e\0\u5280\0\u52c2\0\u5304\0\u5346\0\u5388\0\u53ca"+
    "\0\u540c\0\u544e\0\u5490\0\u54d2\0\u5514\0\u5556\0\u5598\0\u55da"+
    "\0\u561c\0\u565e\0\u56a0\0\u56e2\0\u5724\0\u5766\0\u57a8\0\u57ea"+
    "\0\u582c\0\u586e\0\u58b0\0\u58f2\0\u5934\0\u5976\0\u59b8\0\u59fa"+
    "\0\u5a3c\0\u5a7e\0\u5ac0\0\u5b02\0\u5b44\0\u5b86\0\u5bc8\0\u1b96"+
    "\0\u5c0a\0\u5c4c\0\u5c8e\0\u5cd0\0\u5d12\0\u5d54\0\u5d96\0\u5dd8"+
    "\0\u5e1a\0\u5e5c\0\u5e9e\0\u5ee0\0\u5f22\0\u01ce\0\u5f64\0\u5fa6"+
    "\0\u5fe8\0\u602a\0\u606c\0\u60ae\0\u60f0\0\u6132\0\u6174\0\u61b6"+
    "\0\u61f8\0\u623a\0\u627c\0\u62be\0\u6300\0\u6342\0\u6384\0\u63c6"+
    "\0\u6408\0\u644a\0\u01ce\0\u648c\0\u64ce\0\u6510\0\u6552\0\u6594"+
    "\0\u65d6\0\u6618\0\u665a\0\u669c\0\u66de\0\u6720\0\u6762\0\u67a4"+
    "\0\u01ce\0\u67e6\0\u6828\0\u686a\0\u68ac\0\u68ee\0\u6930\0\u6972"+
    "\0\u69b4\0\u69f6\0\u6a38\0\u6a7a\0\u6abc\0\u6afe\0\u6b40\0\u6b82"+
    "\0\u28bc\0\u6bc4\0\u6c06\0\u6c48\0\u6c8a\0\u6ccc\0\u6d0e\0\u6d50"+
    "\0\u6d92\0\u6dd4\0\u6e16\0\u6e58\0\u6e9a\0\u6edc\0\u6f1e\0\u6f60"+
    "\0\u6fa2\0\u6fe4\0\u7026\0\u7068\0\u70aa\0\u70ec\0\u712e\0\u7170"+
    "\0\u71b2\0\u71f4\0\u7236\0\u7278\0\u72ba\0\u72fc\0\u733e\0\u7380"+
    "\0\u73c2\0\u7404\0\u7446\0\u7488\0\u74ca\0\u750c\0\u754e\0\u7590"+
    "\0\u75d2\0\u7614\0\u7656\0\u7698\0\u76da\0\u771c\0\u775e\0\u77a0"+
    "\0\u77e2\0\u7824\0\u7866\0\u78a8\0\u78ea\0\u792c\0\u796e\0\u79b0"+
    "\0\u79f2\0\u7a34\0\u7a76\0\u7ab8\0\u7afa\0\u7b3c\0\u7b7e\0\u7bc0"+
    "\0\u7c02\0\u7c44\0\u7c86\0\u7cc8\0\u7d0a\0\u7d4c\0\u7d8e\0\u7dd0"+
    "\0\u7e12\0\u7e54\0\u7e96\0\u7ed8\0\u7f1a\0\u7f5c\0\u7f9e\0\u7fe0"+
    "\0\u8022\0\u8064\0\u80a6\0\u80e8\0\u812a\0\u816c\0\u81ae\0\u81f0"+
    "\0\u8232\0\u8274\0\u82b6\0\u82f8\0\u833a\0\u837c\0\u83be\0\u8400"+
    "\0\u8442\0\u8484\0\u84c6\0\u8508\0\u854a\0\u858c\0\u85ce\0\u8610"+
    "\0\u8652\0\u8694\0\u86d6\0\u8718\0\u875a\0\u879c\0\u01ce\0\u87de"+
    "\0\u8820\0\u8862\0\u88a4\0\u88e6\0\u8928\0\u896a\0\u89ac\0\u89ee"+
    "\0\u8a30\0\u4f26\0\u8a72\0\u8ab4\0\u8af6\0\u8b38\0\u8b7a\0\u8bbc"+
    "\0\u8bfe\0\u8c40\0\u8c82\0\u8cc4\0\u8d06\0\u8d48\0\u8d8a\0\u8dcc"+
    "\0\u8e0e\0\u8e50\0\u8e92\0\u8ed4\0\u8f16\0\u8f58\0\u8f9a\0\u8fdc"+
    "\0\u901e\0\u9060\0\u90a2\0\u90e4\0\u9126\0\u9168\0\u91aa\0\u01ce"+
    "\0\u91ec\0\u922e\0\u9270\0\u92b2\0\u92f4\0\u9336\0\u9378\0\u93ba"+
    "\0\u93fc\0\u943e\0\u9480\0\u94c2\0\u9504\0\u9546\0\u9588\0\u95ca"+
    "\0\u960c\0\u964e\0\u9690\0\u96d2\0\u9714\0\u9756\0\u9798\0\u97da"+
    "\0\u981c\0\u985e\0\u98a0\0\u98e2\0\u9924\0\u9966\0\u99a8\0\u99ea"+
    "\0\u9a2c\0\u9a6e\0\u9ab0\0\u9af2\0\u9b34\0\u9b76\0\u9bb8\0\u9bfa"+
    "\0\u9c3c\0\u9c7e\0\u9cc0\0\u9d02\0\u9d44\0\u9d86\0\u9dc8\0\u9e0a"+
    "\0\u9e4c\0\u9e8e\0\u9ed0\0\u9f12\0\u9f54\0\u9f96\0\u9fd8\0\ua01a"+
    "\0\ua05c\0\ua09e\0\ua0e0\0\ua122\0\ua164\0\ua1a6\0\ua1e8\0\ua22a"+
    "\0\ua26c\0\ua2ae\0\ua2f0\0\ua332\0\ua374\0\ua3b6\0\ua3f8\0\ua43a"+
    "\0\ua47c\0\ua4be\0\ua500\0\ua542\0\ua4be\0\ua584\0\ua5c6\0\u01ce"+
    "\0\ua608\0\ua64a\0\ua68c\0\ua6ce\0\ua710\0\ua752\0\ua794\0\ua7d6"+
    "\0\ua818\0\ua85a\0\ua89c\0\ua8de\0\ua920\0\ua962\0\ua9a4\0\ua9e6"+
    "\0\uaa28\0\uaa6a\0\uaaac\0\uaaee\0\uab30\0\uab72\0\uabb4\0\uabf6"+
    "\0\uac38\0\uac7a\0\uacbc\0\uacfe\0\uad40\0\uad82\0\uadc4\0\uae06"+
    "\0\uae48\0\uae8a\0\uaecc\0\uaf0e\0\uaf50\0\uaf92\0\uafd4\0\ub016"+
    "\0\ub058\0\ub09a\0\ub0dc\0\ub11e\0\ub160\0\ub1a2\0\ub1e4\0\ub226"+
    "\0\ub268\0\ub2aa\0\ub2ec\0\ub32e\0\ub370\0\ub3b2\0\ub3f4\0\ub436"+
    "\0\ub478\0\ub4ba\0\ub4fc\0\ub53e\0\ub580\0\ub5c2\0\ub604\0\ub646"+
    "\0\ub688\0\ub6ca\0\ub70c\0\ub74e\0\ub790\0\ub7d2\0\ub814\0\ub856"+
    "\0\ub898\0\ub8da\0\ub91c\0\ub95e\0\ub9a0\0\ub9e2\0\uba24\0\uba66"+
    "\0\ubaa8\0\ubaea\0\ubb2c\0\ubb6e\0\ubbb0\0\u01ce\0\ubbf2\0\ubc34"+
    "\0\ubc76\0\ubcb8\0\ubcfa\0\ubd3c\0\ubd7e\0\ubdc0\0\ube02\0\ube44"+
    "\0\ube86\0\ubec8\0\ubf0a\0\ubf4c\0\ubf8e\0\ubfd0\0\uc012\0\uc054"+
    "\0\uc096\0\uc0d8\0\uc11a\0\uc15c\0\uc19e\0\uc1e0\0\uc222\0\uc264"+
    "\0\uc2a6\0\uc2e8\0\uc32a\0\uc36c\0\uc3ae\0\uc3f0\0\uc432\0\uc474"+
    "\0\uc4b6\0\uc4f8\0\uc53a\0\uc57c\0\uc5be\0\uc600\0\uc642\0\uc684"+
    "\0\uc6c6\0\uc708\0\uc74a\0\uc78c\0\uc7ce\0\uc810\0\uc852\0\uc894"+
    "\0\uc8d6\0\uc918\0\uc95a\0\uc99c\0\uc9de\0\uca20\0\uca62\0\ucaa4"+
    "\0\ucae6\0\ucb28\0\ucb6a\0\ucbac\0\ucbee\0\ucc30\0\ucc72\0\uccb4"+
    "\0\uccf6\0\ucd38\0\ucd7a\0\ucdbc\0\ucdfe\0\uce40\0\uce82\0\ucec4"+
    "\0\u01ce\0\ucf06\0\ucf48\0\ucf8a\0\ucfcc\0\u01ce\0\ud00e\0\ud050"+
    "\0\ud092\0\ud0d4\0\ud116\0\ud158\0\ud19a\0\ud1dc\0\ud21e\0\ud260"+
    "\0\ud2a2\0\ud2e4\0\ud326\0\ud368\0\ud3aa\0\ud3ec\0\ud42e\0\ud470"+
    "\0\ud4b2\0\ud4f4\0\ud536\0\ud578\0\ud5ba\0\ud5fc\0\ud63e\0\ud680"+
    "\0\ud6c2\0\ud704\0\ud746\0\ud788\0\ud7ca\0\ud80c\0\ud84e\0\ud890"+
    "\0\ud8d2\0\ud914\0\ud956\0\ud5fc\0\ud998\0\ud9da\0\uda1c\0\uda5e"+
    "\0\udaa0\0\udae2\0\udb24\0\udb66\0\udba8\0\udbea\0\udc2c\0\udc6e"+
    "\0\udcb0\0\udcf2\0\udd34\0\udd76\0\uddb8\0\uddfa\0\ude3c\0\ude7e"+
    "\0\udec0\0\udf02\0\udf44\0\udf86\0\udfc8\0\ue00a\0\ue04c\0\ue08e"+
    "\0\ue0d0\0\ue112\0\ue154\0\ue196\0\ue1d8\0\ue21a\0\ue25c\0\ue29e"+
    "\0\ue2e0\0\ue322\0\ue364\0\ue3a6\0\ue3e8\0\ue42a\0\ue46c\0\ue4ae"+
    "\0\ue4f0\0\ue532\0\u01ce\0\ue574\0\ue5b6\0\ue5f8\0\ue63a\0\ue67c"+
    "\0\ue6be\0\ue700\0\ue742\0\ue784\0\ue7c6\0\ue808\0\ue84a\0\ue88c"+
    "\0\ue8ce\0\ue910\0\ue952\0\ue994\0\ue9d6\0\uea18\0\uea5a\0\uea9c"+
    "\0\ueade\0\ueb20\0\ueb62\0\ueba4\0\uebe6\0\uec28\0\uec6a\0\uecac"+
    "\0\uecee\0\ued30\0\ued72\0\uedb4\0\uedf6\0\uee38\0\uee7a\0\ueebc"+
    "\0\ueefe\0\uef40\0\uef82\0\uefc4\0\uf006\0\uf048\0\uf08a\0\uf0cc"+
    "\0\uf10e\0\uf150\0\uf192\0\uf1d4\0\uf216\0\uf258\0\uf29a\0\uf2dc"+
    "\0\uf31e\0\uf360\0\uf3a2\0\uf3e4\0\uf426\0\uf468\0\uf4aa\0\uf4ec"+
    "\0\uf52e\0\uf570\0\uf5b2\0\uf5f4\0\uf636\0\uf678\0\uf6ba\0\uf6fc"+
    "\0\uf73e\0\uf780\0\uf7c2\0\uf804\0\uf846\0\uf888\0\uf8ca\0\uf90c"+
    "\0\uf94e\0\uf990\0\uf9d2\0\ufa14\0\ufa56\0\ufa98\0\ufada\0\ufb1c"+
    "\0\ufb5e\0\ufba0\0\ufbe2\0\ufc24\0\ufc66\0\ufca8\0\ufcea\0\ufd2c"+
    "\0\ufd6e\0\ufdb0\0\ufdf2\0\ufe34\0\ufe76\0\ufeb8\0\ufefa\0\uff3c"+
    "\0\uff7e\0\uffc0\1\2\1\104\1\206\1\310\1\u010a\1\u014c"+
    "\1\u018e\1\u01d0\1\u0212\1\u0254\1\u0296\1\u02d8\1\u031a\1\u035c"+
    "\1\u039e\1\u03e0\1\u0422\1\u0464\1\u04a6\1\u04e8\1\u052a\1\u056c"+
    "\1\u05ae\1\u05f0\1\u0632";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1051];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\4\6\2\10\1\6\1\10\4\6\27\10"+
    "\1\6\5\10\2\6\6\10\1\6\2\10\1\11\1\6"+
    "\12\10\66\12\1\13\13\12\25\14\2\15\2\16\12\14"+
    "\2\17\21\14\1\20\13\14\1\21\1\22\4\21\2\0"+
    "\1\21\1\0\4\21\27\0\1\21\5\0\2\21\6\0"+
    "\1\21\2\0\2\21\101\0\1\23\23\0\1\24\10\0"+
    "\1\24\2\0\2\25\2\26\2\27\2\0\2\30\2\31"+
    "\2\0\2\32\25\0\2\33\10\0\1\34\6\0\1\24"+
    "\10\0\1\24\2\0\2\25\2\26\2\27\2\0\2\30"+
    "\2\31\2\0\2\32\25\0\2\33\121\0\1\24\10\0"+
    "\1\24\2\0\2\25\2\26\2\27\2\0\2\30\2\31"+
    "\2\0\2\32\12\0\2\35\11\0\2\33\62\0\1\36"+
    "\36\0\1\37\10\0\1\37\124\0\3\40\33\0\2\41"+
    "\2\0\1\42\5\0\1\41\11\0\2\43\2\0\2\44"+
    "\20\0\1\41\105\0\2\45\60\0\2\46\43\0\1\21"+
    "\34\0\2\46\47\0\1\47\10\0\1\47\113\0\2\50"+
    "\60\0\1\51\10\0\1\51\124\0\3\52\67\0\2\53"+
    "\120\0\2\54\73\0\2\55\31\0\2\56\2\57\1\60"+
    "\4\0\1\57\1\56\2\57\7\0\2\61\2\0\2\62"+
    "\15\0\2\63\1\0\1\56\12\0\1\64\40\0\2\65"+
    "\136\0\3\66\73\0\2\67\32\0\1\70\10\0\1\70"+
    "\120\0\2\71\40\0\2\41\2\0\1\42\5\0\1\41"+
    "\11\0\2\43\61\0\1\72\10\0\1\72\63\0\2\73"+
    "\2\0\1\74\5\0\1\73\15\0\2\75\20\0\1\73"+
    "\1\0\2\76\70\0\3\77\115\0\3\100\64\0\2\101"+
    "\113\0\3\102\64\0\2\103\41\0\1\104\10\0\1\104"+
    "\120\0\2\105\47\0\1\106\10\0\1\106\2\0\1\106"+
    "\102\0\2\107\6\0\2\110\120\0\2\111\24\0\2\56"+
    "\2\57\1\60\4\0\1\57\1\56\2\57\7\0\2\61"+
    "\21\0\2\63\14\0\1\64\14\0\4\57\1\112\4\0"+
    "\4\57\50\0\1\64\21\0\1\113\10\0\1\113\63\0"+
    "\2\114\2\0\1\115\5\0\1\114\15\0\2\116\20\0"+
    "\1\114\1\0\2\117\70\0\3\120\63\0\2\121\126\0"+
    "\2\122\22\0\2\123\2\0\1\124\5\0\1\123\74\0"+
    "\1\125\10\0\1\125\145\0\3\126\67\0\1\127\107\0"+
    "\2\130\26\0\1\131\10\0\1\131\62\0\2\73\2\0"+
    "\1\74\5\0\1\73\15\0\2\75\55\0\1\132\10\0"+
    "\1\132\117\0\2\133\14\0\1\134\103\0\2\135\32\0"+
    "\1\136\10\0\1\136\67\0\1\137\10\0\1\137\137\0"+
    "\2\140\102\0\2\141\27\0\1\142\10\0\1\142\35\0"+
    "\2\143\76\0\1\144\107\0\2\145\44\0\2\146\6\0"+
    "\2\146\7\0\4\146\36\0\1\147\10\0\1\147\72\0"+
    "\1\53\10\0\1\53\2\0\1\53\132\0\2\150\31\0"+
    "\1\151\10\0\1\151\71\0\1\152\10\0\1\152\62\0"+
    "\2\114\2\0\1\115\5\0\1\114\15\0\2\116\55\0"+
    "\1\153\10\0\1\153\62\0\1\154\1\155\3\156\1\157"+
    "\2\0\1\154\1\0\4\156\17\0\2\160\6\0\1\154"+
    "\5\0\1\161\1\154\6\0\1\154\2\0\1\162\1\154"+
    "\67\0\2\163\32\0\1\164\10\0\1\164\142\0\2\165"+
    "\102\0\3\166\15\0\2\123\2\0\1\124\3\0\1\24"+
    "\1\0\1\123\6\0\1\24\6\0\2\27\2\0\2\30"+
    "\51\0\1\167\10\0\1\167\77\0\1\170\72\0\1\171"+
    "\10\0\1\171\63\0\4\127\1\172\4\0\4\127\50\0"+
    "\1\173\60\0\3\174\42\0\1\175\10\0\1\175\2\0"+
    "\1\175\64\0\1\176\10\0\1\176\110\0\2\177\52\0"+
    "\2\73\2\0\1\74\5\0\1\73\15\0\2\75\12\0"+
    "\3\200\3\0\1\73\27\0\2\201\2\0\1\202\5\0"+
    "\1\201\11\0\2\43\10\0\2\203\2\204\5\0\2\205"+
    "\1\0\1\206\43\0\1\207\141\0\2\210\77\0\1\211"+
    "\66\0\2\212\100\0\2\213\40\0\4\144\1\214\4\0"+
    "\4\144\50\0\1\215\60\0\3\216\33\0\2\146\2\0"+
    "\1\217\5\0\1\146\52\0\1\220\40\0\2\221\54\0"+
    "\2\222\2\0\1\223\5\0\1\222\27\0\2\224\3\225"+
    "\3\0\1\222\35\0\1\226\10\0\1\226\71\0\1\227"+
    "\10\0\1\227\2\0\1\227\64\0\1\230\10\0\1\230"+
    "\62\0\1\231\1\156\2\231\1\232\4\0\4\231\50\0"+
    "\1\233\14\0\4\231\1\232\4\0\4\231\50\0\1\233"+
    "\21\0\1\234\10\0\1\234\111\0\2\235\51\0\1\154"+
    "\1\155\3\156\1\157\2\0\1\154\1\0\4\156\27\0"+
    "\1\154\5\0\2\154\6\0\1\154\2\0\1\162\1\154"+
    "\71\0\2\236\22\0\2\114\2\0\1\115\5\0\1\114"+
    "\15\0\2\116\12\0\3\237\3\0\1\114\27\0\2\240"+
    "\2\241\1\242\4\0\1\241\1\240\2\241\7\0\2\61"+
    "\10\0\2\243\2\244\5\0\2\245\1\0\1\240\12\0"+
    "\1\246\13\0\1\247\1\250\4\247\2\0\1\247\1\0"+
    "\4\247\27\0\1\251\2\252\3\0\1\253\1\247\6\0"+
    "\1\247\2\0\2\247\20\0\1\254\10\0\1\254\71\0"+
    "\1\255\10\0\1\255\65\0\1\256\1\0\2\256\1\0"+
    "\1\256\11\0\2\256\1\0\1\256\1\0\1\256\1\0"+
    "\1\256\1\0\1\256\1\0\1\256\1\0\1\256\1\0"+
    "\1\256\1\0\1\256\2\0\1\256\1\0\1\256\4\0"+
    "\1\256\1\0\1\256\1\0\1\256\2\0\1\256\3\0"+
    "\1\256\1\0\1\256\1\0\1\256\1\0\1\256\1\0"+
    "\1\256\6\0\1\257\10\0\1\257\141\0\2\260\60\0"+
    "\2\261\52\0\1\262\10\0\1\262\67\0\1\263\10\0"+
    "\1\263\2\0\1\263\122\0\3\264\3\0\1\134\34\0"+
    "\1\265\10\0\1\265\63\0\2\201\2\0\1\202\5\0"+
    "\1\201\11\0\2\43\10\0\2\203\7\0\2\205\36\0"+
    "\1\266\10\0\1\266\132\0\2\267\36\0\1\270\10\0"+
    "\1\270\113\0\2\271\53\0\1\272\1\0\2\272\1\0"+
    "\1\272\11\0\2\272\1\0\1\272\1\0\1\272\1\273"+
    "\1\274\1\0\1\272\1\0\1\272\1\275\1\276\1\0"+
    "\1\272\1\0\1\272\2\0\1\272\1\0\1\272\3\0"+
    "\1\277\1\300\1\0\1\272\1\0\1\272\2\0\1\272"+
    "\3\0\1\272\1\0\1\272\1\0\1\272\1\0\1\272"+
    "\1\0\1\272\1\0\2\301\2\0\1\302\5\0\1\301"+
    "\27\0\2\303\3\304\3\0\1\301\114\0\1\305\21\0"+
    "\1\306\10\0\1\306\141\0\2\307\27\0\1\310\10\0"+
    "\1\310\141\0\2\311\60\0\2\312\47\0\1\313\10\0"+
    "\1\313\141\0\2\314\64\0\2\106\36\0\2\222\2\0"+
    "\1\223\5\0\1\222\27\0\2\224\43\0\1\315\10\0"+
    "\1\315\113\0\2\316\57\0\1\317\10\0\1\317\2\0"+
    "\1\317\65\0\1\320\10\0\1\320\2\0\1\320\66\0"+
    "\1\321\10\0\1\321\67\0\1\322\10\0\1\322\2\0"+
    "\1\322\64\0\1\323\10\0\1\323\61\0\1\154\1\155"+
    "\3\156\1\157\2\0\1\154\1\0\4\156\27\0\1\324"+
    "\2\325\3\0\1\161\1\154\6\0\1\154\2\0\1\162"+
    "\1\154\75\0\3\326\22\0\1\327\10\0\1\327\63\0"+
    "\2\240\2\241\1\242\4\0\1\241\1\240\2\241\7\0"+
    "\2\61\10\0\2\243\7\0\2\245\14\0\1\246\14\0"+
    "\4\241\1\330\4\0\4\241\50\0\1\246\21\0\1\331"+
    "\10\0\1\331\132\0\2\332\36\0\1\333\10\0\1\333"+
    "\113\0\2\334\126\0\2\335\23\0\1\247\105\0\1\336"+
    "\10\0\1\336\62\0\1\247\1\250\4\247\2\0\1\247"+
    "\1\0\4\247\27\0\1\247\5\0\2\247\6\0\1\247"+
    "\2\0\2\247\27\0\1\337\74\0\1\340\10\0\1\340"+
    "\2\0\1\340\61\0\1\256\1\0\2\256\1\0\1\256"+
    "\3\0\1\341\5\0\2\256\1\0\1\256\1\0\1\256"+
    "\1\0\1\256\1\0\1\256\1\0\1\256\1\0\1\256"+
    "\1\0\1\256\1\0\1\256\2\0\1\256\1\0\1\256"+
    "\4\0\1\256\1\0\1\256\1\0\1\256\2\0\1\256"+
    "\3\0\1\256\1\0\1\256\1\0\1\256\1\0\1\256"+
    "\1\0\1\256\7\0\1\342\10\0\1\342\144\0\3\343"+
    "\51\0\2\344\55\0\1\41\100\0\1\345\10\0\1\345"+
    "\127\0\2\346\31\0\2\73\2\0\1\74\5\0\1\73"+
    "\15\0\2\75\12\0\3\347\3\0\1\73\35\0\1\350"+
    "\10\0\1\350\140\0\2\351\46\0\2\352\134\0\2\353"+
    "\23\0\1\272\1\0\2\272\1\0\1\272\3\0\1\354"+
    "\5\0\2\272\1\0\1\272\1\0\1\272\1\0\1\272"+
    "\1\0\1\272\1\0\1\272\1\0\1\272\1\0\1\272"+
    "\1\0\1\272\2\0\1\272\1\0\1\272\4\0\1\272"+
    "\1\0\1\272\1\0\1\272\2\0\1\272\3\0\1\272"+
    "\1\0\1\272\1\0\1\272\1\0\1\272\1\0\1\272"+
    "\35\0\2\355\47\0\1\272\1\0\2\272\1\0\1\272"+
    "\3\0\1\354\5\0\2\272\1\0\1\272\1\0\1\272"+
    "\1\0\1\272\1\0\1\272\1\355\1\356\1\0\1\272"+
    "\1\0\1\272\1\0\1\272\2\0\1\272\1\0\1\272"+
    "\4\0\1\272\1\0\1\272\1\0\1\272\2\0\1\272"+
    "\3\0\1\272\1\0\1\272\1\0\1\272\1\0\1\272"+
    "\1\0\1\272\45\0\3\357\7\0\2\360\25\0\1\272"+
    "\1\0\2\272\1\0\1\272\3\0\1\354\5\0\2\272"+
    "\1\0\1\272\1\0\1\272\1\0\1\272\1\0\1\272"+
    "\1\0\1\272\1\0\1\272\1\0\1\272\1\0\1\272"+
    "\2\357\1\361\1\0\1\272\4\0\1\272\1\360\1\362"+
    "\1\0\1\272\2\0\1\272\3\0\1\272\1\0\1\272"+
    "\1\0\1\272\1\0\1\272\1\0\1\272\41\0\2\363"+
    "\43\0\1\272\1\0\2\272\1\0\1\272\3\0\1\354"+
    "\5\0\2\272\1\0\1\272\1\0\1\272\1\0\1\272"+
    "\1\0\1\272\1\0\1\272\1\0\1\272\1\363\1\364"+
    "\1\0\1\272\2\0\1\272\1\0\1\272\4\0\1\272"+
    "\1\0\1\272\1\0\1\272\2\0\1\272\3\0\1\272"+
    "\1\0\1\272\1\0\1\272\1\0\1\272\1\0\1\272"+
    "\1\0\2\301\2\0\1\302\5\0\1\301\27\0\2\303"+
    "\43\0\1\365\10\0\1\365\113\0\2\366\57\0\1\367"+
    "\10\0\1\367\2\0\1\367\55\0\66\370\1\0\13\370"+
    "\37\0\2\371\70\0\2\147\60\0\1\372\10\0\1\372"+
    "\144\0\3\373\51\0\2\374\52\0\1\375\10\0\1\375"+
    "\144\0\3\376\23\0\1\377\10\0\1\377\126\0\3\u0100"+
    "\42\0\1\u0101\10\0\1\u0101\2\0\1\u0101\66\0\1\u0102"+
    "\10\0\1\u0102\71\0\1\56\100\0\1\u0103\10\0\1\u0103"+
    "\67\0\1\u0104\10\0\1\u0104\2\0\1\u0104\125\0\2\u0105"+
    "\36\0\1\u0106\10\0\1\u0106\63\0\2\114\2\0\1\115"+
    "\5\0\1\114\15\0\2\116\12\0\3\u0107\3\0\1\114"+
    "\34\0\1\u0108\10\0\1\u0108\71\0\1\u0109\10\0\1\u0109"+
    "\140\0\2\u010a\46\0\2\u010b\134\0\2\u010c\102\0\3\u010d"+
    "\41\0\2\u010e\63\0\1\u010f\10\0\1\u010f\2\0\1\u010f"+
    "\12\0\2\u0110\52\0\1\u0111\10\0\1\u0111\62\0\2\341"+
    "\1\0\2\341\1\0\1\341\3\0\1\u0112\5\0\2\341"+
    "\1\0\1\341\1\0\1\341\1\0\1\341\1\0\1\341"+
    "\1\0\1\341\1\0\1\341\1\0\1\341\1\0\1\341"+
    "\2\0\1\341\1\0\2\341\3\0\1\341\1\0\1\341"+
    "\1\0\1\341\2\0\1\341\3\0\1\341\1\0\1\341"+
    "\1\0\1\341\1\0\1\341\1\0\1\341\10\0\1\u0113"+
    "\10\0\1\u0113\2\0\1\u0113\63\0\1\u0114\10\0\1\u0114"+
    "\63\0\4\344\1\u0115\4\0\4\344\23\0\2\u0116\14\0"+
    "\2\u0117\5\0\1\u0118\25\0\1\73\75\0\1\u0119\10\0"+
    "\1\u0119\72\0\1\u011a\10\0\1\u011a\2\0\1\u011a\65\0"+
    "\1\u011b\10\0\1\u011b\2\0\1\u011b\134\0\2\u011c\100\0"+
    "\2\u011d\66\0\3\u011e\3\0\1\u011f\31\0\2\354\1\0"+
    "\2\354\1\0\1\354\3\0\1\u0120\5\0\2\354\1\0"+
    "\1\354\1\0\1\354\1\0\1\354\1\0\1\354\1\0"+
    "\1\354\1\0\1\354\1\0\1\354\1\0\1\354\2\0"+
    "\1\354\1\0\2\354\3\0\1\354\1\0\1\354\1\0"+
    "\1\354\2\0\1\354\3\0\1\354\1\0\1\354\1\0"+
    "\1\354\1\0\1\354\1\0\1\354\27\0\2\u0121\55\0"+
    "\1\272\1\0\2\272\1\0\1\272\3\0\1\354\5\0"+
    "\2\272\1\0\1\272\1\u0121\1\u0122\1\0\1\272\1\0"+
    "\1\272\1\0\1\272\1\0\1\272\1\0\1\272\1\0"+
    "\1\272\2\0\1\272\1\0\1\272\4\0\1\272\1\0"+
    "\1\272\1\0\1\272\2\0\1\272\3\0\1\272\1\0"+
    "\1\272\1\0\1\272\1\0\1\272\1\0\1\272\43\0"+
    "\2\u0123\41\0\1\u0124\101\0\1\272\1\0\2\272\1\0"+
    "\1\272\3\0\1\354\5\0\2\272\1\0\1\272\1\0"+
    "\1\272\1\0\1\272\1\0\1\272\1\0\1\272\1\0"+
    "\1\272\1\0\1\272\1\u0123\1\u0125\2\0\1\272\1\0"+
    "\1\272\4\0\1\272\1\0\1\272\1\0\1\272\2\0"+
    "\1\272\3\0\1\272\1\0\1\272\1\0\1\272\1\0"+
    "\1\272\1\0\1\272\4\0\1\u0126\1\0\2\272\1\0"+
    "\1\272\3\0\1\354\5\0\2\272\1\0\1\272\1\0"+
    "\1\272\1\0\1\272\1\0\1\272\1\0\1\272\1\0"+
    "\1\272\1\0\1\272\1\0\1\272\2\0\1\272\1\0"+
    "\1\272\4\0\1\272\1\0\1\272\1\0\1\272\2\0"+
    "\1\272\3\0\1\272\1\0\1\272\1\0\1\272\1\0"+
    "\1\272\1\0\1\272\6\0\1\u0127\10\0\1\u0127\66\0"+
    "\1\272\1\0\1\u0128\1\272\1\0\1\272\3\0\1\354"+
    "\1\0\1\u0127\3\0\2\272\1\0\1\272\1\0\1\272"+
    "\1\0\1\272\1\0\1\272\1\0\1\272\1\0\1\272"+
    "\1\0\1\272\1\0\1\272\2\0\1\272\1\0\1\272"+
    "\4\0\1\272\1\0\1\272\1\0\1\272\2\0\1\272"+
    "\3\0\1\272\1\0\1\272\1\0\1\272\1\0\1\272"+
    "\1\0\1\272\7\0\1\u0129\10\0\1\u0129\126\0\3\u012a"+
    "\42\0\1\u012b\10\0\1\u012b\2\0\1\u012b\55\0\66\370"+
    "\1\0\1\u012c\12\370\45\0\3\147\42\0\1\u012d\10\0"+
    "\1\u012d\2\0\1\u012d\63\0\1\u012e\10\0\1\u012e\63\0"+
    "\4\374\1\u012f\4\0\4\374\23\0\2\u0130\14\0\2\u0131"+
    "\5\0\1\u0132\23\0\1\u0133\10\0\1\u0133\2\0\1\u0133"+
    "\63\0\1\u0134\10\0\1\u0134\72\0\1\u0135\10\0\1\u0135"+
    "\2\0\1\u0135\64\0\1\u0136\10\0\1\u0136\126\0\3\u0137"+
    "\44\0\1\57\101\0\1\114\100\0\1\u0138\10\0\1\u0138"+
    "\65\0\1\u0139\10\0\1\u0139\77\0\1\u013a\74\0\1\u013b"+
    "\10\0\1\u013b\2\0\1\u013b\64\0\1\u013c\10\0\1\u013c"+
    "\71\0\1\u013d\10\0\1\u013d\2\0\1\u013d\134\0\2\u013e"+
    "\100\0\2\u013f\21\0\1\247\1\u0140\3\u0141\1\u0142\2\0"+
    "\1\247\1\0\4\u0141\27\0\1\u0143\2\u0144\3\0\1\u0145"+
    "\1\247\6\0\1\247\2\0\1\u0146\1\247\20\0\1\u0147"+
    "\10\0\1\u0147\113\0\2\u0148\110\0\2\u0149\2\u014a\114\0"+
    "\2\u014b\33\0\1\123\141\0\1\u014c\40\0\1\u014d\10\0"+
    "\1\u014d\74\0\1\u014e\72\0\1\u014f\10\0\1\u014f\70\0"+
    "\1\u0150\10\0\1\u0150\107\0\2\u0151\132\0\2\u0152\46\0"+
    "\2\u0153\6\0\2\134\106\0\2\u0154\46\0\1\u0155\10\0"+
    "\1\u0155\114\0\2\u0156\14\0\1\u011f\63\0\2\206\51\0"+
    "\1\u0157\10\0\1\u0157\134\0\1\u0158\74\0\3\u0159\36\0"+
    "\1\272\1\0\2\272\1\0\1\272\3\0\1\354\5\0"+
    "\2\272\1\0\1\272\1\0\1\272\1\0\1\272\1\0"+
    "\1\272\1\0\1\272\1\0\1\272\1\0\1\272\1\0"+
    "\1\272\2\u0159\1\u015a\1\0\1\272\4\0\1\272\1\0"+
    "\1\272\1\0\1\272\2\0\1\272\3\0\1\272\1\0"+
    "\1\272\1\0\1\272\1\0\1\272\1\0\1\272\70\0"+
    "\2\u015b\71\0\2\u015c\23\0\1\272\1\0\2\272\1\0"+
    "\1\272\3\0\1\354\5\0\2\272\1\0\1\272\1\0"+
    "\1\272\1\0\1\272\1\0\1\272\1\0\1\272\1\0"+
    "\1\272\1\0\1\272\1\0\1\272\2\0\1\272\1\0"+
    "\1\272\4\0\1\272\1\0\1\272\1\0\1\272\2\0"+
    "\1\272\2\0\1\u015b\1\u015d\1\0\1\272\1\0\1\272"+
    "\1\0\1\272\1\0\1\272\4\0\1\272\1\0\2\272"+
    "\1\0\1\272\3\0\1\354\5\0\2\272\1\0\1\272"+
    "\1\0\1\272\1\0\1\272\1\0\1\272\1\0\1\272"+
    "\1\0\1\272\1\0\1\272\1\0\1\272\2\0\1\272"+
    "\1\0\1\272\4\0\1\272\1\0\1\272\1\u015c\1\u015e"+
    "\2\0\1\272\3\0\1\272\1\0\1\272\1\0\1\272"+
    "\1\0\1\272\1\0\1\272\45\0\3\u015f\36\0\1\272"+
    "\1\0\2\272\1\0\1\272\3\0\1\354\5\0\2\272"+
    "\1\0\1\272\1\0\1\272\1\0\1\272\1\0\1\272"+
    "\1\0\1\272\1\0\1\272\1\0\1\272\1\0\1\272"+
    "\2\u015f\1\u0160\1\0\1\272\4\0\1\272\1\0\1\272"+
    "\1\0\1\272\2\0\1\272\3\0\1\272\1\0\1\272"+
    "\1\0\1\272\1\0\1\272\1\0\1\272\10\0\1\u0161"+
    "\10\0\1\u0161\2\0\1\u0161\64\0\1\u0162\10\0\1\u0162"+
    "\126\0\3\u0163\32\0\52\370\1\u0164\13\370\1\0\1\u012c"+
    "\12\370\11\0\1\u0165\10\0\1\u0165\74\0\1\u0166\72\0"+
    "\1\u0167\10\0\1\u0167\70\0\1\u0168\10\0\1\u0168\107\0"+
    "\2\u0169\132\0\2\u016a\32\0\1\u016b\10\0\1\u016b\74\0"+
    "\1\u016c\75\0\1\u016d\10\0\1\u016d\60\0\2\u016e\2\u016f"+
    "\1\u0170\3\0\1\u0171\1\u016f\1\u016e\2\u016f\4\0\1\u0171"+
    "\6\0\2\u0172\4\0\2\u0173\2\u0174\10\0\1\u016e\12\0"+
    "\1\u0175\63\0\2\u0176\42\0\1\231\114\0\2\u0177\6\0"+
    "\2\u0178\53\0\1\u0179\10\0\1\u0179\2\0\1\u0179\4\0"+
    "\2\u017a\4\0\2\u017b\104\0\2\u017c\45\0\1\u017d\10\0"+
    "\1\u017d\2\0\1\u017d\66\0\1\u017e\10\0\1\u017e\114\0"+
    "\2\u017f\14\0\1\144\63\0\2\240\44\0\1\144\1\u0141"+
    "\2\144\1\214\4\0\4\144\50\0\1\215\21\0\1\u0180"+
    "\10\0\1\u0180\62\0\1\247\1\u0140\3\u0141\1\u0142\2\0"+
    "\1\247\1\0\4\u0141\27\0\1\247\5\0\2\247\6\0"+
    "\1\247\2\0\1\u0146\1\247\27\0\1\u0181\131\0\3\u0182"+
    "\41\0\1\u0183\10\0\1\u0183\72\0\1\u0184\10\0\1\u0184"+
    "\63\0\1\u0185\147\0\1\u014c\14\0\1\u0186\24\0\1\127"+
    "\77\0\1\u0187\10\0\1\u0187\2\0\1\u0187\12\0\2\u0188"+
    "\50\0\1\u0189\10\0\1\u0189\126\0\3\u018a\65\0\2\u018b"+
    "\130\0\3\u018c\73\0\2\u018d\52\0\2\u018e\61\0\1\201"+
    "\116\0\2\u018f\76\0\2\u0190\125\0\1\u0158\14\0\1\u0191"+
    "\62\0\2\u0192\34\0\1\272\1\0\2\272\1\0\1\272"+
    "\3\0\1\354\5\0\2\272\1\0\1\272\1\0\1\272"+
    "\1\0\1\272\1\0\1\272\1\0\1\272\1\0\1\272"+
    "\1\0\1\272\1\0\1\272\2\0\1\272\1\u0192\1\u0193"+
    "\4\0\1\272\1\0\1\272\1\0\1\272\2\0\1\272"+
    "\3\0\1\272\1\0\1\272\1\0\1\272\1\0\1\272"+
    "\1\0\1\272\15\0\1\u0194\121\0\2\u0195\47\0\1\272"+
    "\1\0\2\272\1\0\1\272\3\0\1\u0194\5\0\2\272"+
    "\1\0\1\272\1\0\1\272\1\0\1\272\1\0\1\272"+
    "\1\0\1\272\1\0\1\272\1\0\1\272\1\0\1\272"+
    "\2\0\1\272\1\0\1\272\4\0\1\272\1\0\1\272"+
    "\1\0\1\272\2\0\1\272\3\0\1\272\1\0\1\272"+
    "\1\0\1\272\1\0\1\272\1\0\1\272\4\0\1\272"+
    "\1\0\2\272\1\0\1\272\3\0\1\354\5\0\2\272"+
    "\1\0\1\272\1\0\1\272\1\0\1\272\1\0\1\272"+
    "\1\u0195\1\u0196\1\0\1\272\1\0\1\272\1\0\1\272"+
    "\2\0\1\272\1\0\1\272\4\0\1\272\1\0\1\272"+
    "\1\0\1\272\2\0\1\272\3\0\1\272\1\0\1\272"+
    "\1\0\1\272\1\0\1\272\1\0\1\272\37\0\2\u0197"+
    "\45\0\1\272\1\0\2\272\1\0\1\272\3\0\1\354"+
    "\5\0\2\272\1\0\1\272\1\0\1\272\1\0\1\272"+
    "\1\0\1\272\1\0\1\272\1\u0197\1\u0198\1\0\1\272"+
    "\1\0\1\272\2\0\1\272\1\0\1\272\4\0\1\272"+
    "\1\0\1\272\1\0\1\272\2\0\1\272\3\0\1\272"+
    "\1\0\1\272\1\0\1\272\1\0\1\272\1\0\1\272"+
    "\11\0\1\u0199\10\0\1\u0199\120\0\2\u019a\10\0\1\u019b"+
    "\76\0\2\u019c\30\0\15\370\1\u019d\34\370\1\u0164\13\370"+
    "\1\0\1\u012c\12\370\12\0\1\144\77\0\1\u019e\10\0"+
    "\1\u019e\2\0\1\u019e\12\0\2\u019f\50\0\1\u01a0\10\0"+
    "\1\u01a0\126\0\3\u01a1\65\0\2\u01a2\130\0\3\u01a3\26\0"+
    "\1\146\77\0\1\u01a4\10\0\1\u01a4\2\0\1\u01a4\67\0"+
    "\1\222\70\0\2\u016e\2\u016f\1\u0170\3\0\1\u0171\1\u016f"+
    "\1\u016e\2\u016f\4\0\1\u0171\6\0\2\u0172\4\0\2\u0173"+
    "\25\0\1\u0175\14\0\4\u016f\1\u01a5\4\0\4\u016f\50\0"+
    "\1\u0175\21\0\1\u01a6\10\0\1\u01a6\113\0\2\u01a7\104\0"+
    "\2\u01a8\14\0\1\u01a9\63\0\2\u01aa\106\0\2\u01ab\114\0"+
    "\2\u01ac\27\0\1\u01ad\10\0\1\u01ad\141\0\2\u01ae\64\0"+
    "\2\u01af\72\0\2\u01b0\110\0\3\u01b1\7\0\2\u01b2\52\0"+
    "\2\u01b3\60\0\1\u01b4\10\0\1\u01b4\71\0\1\240\116\0"+
    "\2\u01b5\76\0\2\u01b6\63\0\1\u01b7\10\0\1\u01b7\2\0"+
    "\1\u01b7\12\0\2\u01b8\111\0\2\u01b9\126\0\2\u01ba\102\0"+
    "\2\u01bb\25\0\2\u01bc\116\0\2\u01bd\102\0\3\u01be\42\0"+
    "\1\u01bf\10\0\1\u01bf\2\0\1\u01bf\114\0\2\u01c0\111\0"+
    "\2\u01c1\36\0\1\u01c2\10\0\1\u01c2\117\0\2\134\70\0"+
    "\2\u01c3\120\0\3\u01c4\63\0\2\u01c5\47\0\66\u01c6\1\0"+
    "\13\u01c6\6\0\1\u015b\10\0\1\u015b\66\0\1\272\1\0"+
    "\1\u015d\1\272\1\0\1\272\3\0\1\354\1\0\1\u015b"+
    "\3\0\2\272\1\0\1\272\1\0\1\272\1\0\1\272"+
    "\1\0\1\272\1\0\1\272\1\0\1\272\1\0\1\272"+
    "\1\0\1\272\2\0\1\272\1\0\1\272\4\0\1\272"+
    "\1\0\1\272\1\0\1\272\2\0\1\272\3\0\1\272"+
    "\1\0\1\272\1\0\1\272\1\0\1\272\1\0\1\272"+
    "\3\0\2\u0194\1\0\2\u0194\1\0\1\u0194\3\0\1\u01c7"+
    "\5\0\2\u0194\1\0\1\u0194\1\0\1\u0194\1\0\1\u0194"+
    "\1\0\1\u0194\1\0\1\u0194\1\0\1\u0194\1\0\1\u0194"+
    "\1\0\1\u0194\2\0\1\u0194\1\0\2\u0194\3\0\1\u0194"+
    "\1\0\1\u0194\1\0\1\u0194\2\0\1\u0194\3\0\1\u0194"+
    "\1\0\1\u0194\1\0\1\u0194\1\0\1\u0194\1\0\1\u0194"+
    "\43\0\2\u01c8\41\0\1\272\1\0\2\272\1\0\1\272"+
    "\3\0\1\354\5\0\2\272\1\0\1\272\1\0\1\272"+
    "\1\0\1\272\1\0\1\272\1\0\1\272\1\0\1\272"+
    "\1\0\1\272\1\u01c8\1\u01c9\2\0\1\272\1\0\1\272"+
    "\4\0\1\272\1\0\1\272\1\0\1\272\2\0\1\272"+
    "\3\0\1\272\1\0\1\272\1\0\1\272\1\0\1\272"+
    "\1\0\1\272\45\0\3\u01ca\36\0\1\272\1\0\2\272"+
    "\1\0\1\272\3\0\1\354\5\0\2\272\1\0\1\272"+
    "\1\0\1\272\1\0\1\272\1\0\1\272\1\0\1\272"+
    "\1\0\1\272\1\0\1\272\1\0\1\272\2\u01ca\1\u01cb"+
    "\1\0\1\272\4\0\1\272\1\0\1\272\1\0\1\272"+
    "\2\0\1\272\3\0\1\272\1\0\1\272\1\0\1\272"+
    "\1\0\1\272\1\0\1\272\12\0\1\301\132\0\2\u01cc"+
    "\43\0\1\u01cd\10\0\1\u01cd\62\0\3\370\2\u019d\1\370"+
    "\2\u019d\1\370\1\u019d\3\370\1\u01ce\5\370\2\u019d\1\370"+
    "\1\u019d\1\370\1\u019d\1\370\1\u019d\1\370\1\u019d\1\370"+
    "\1\u019d\1\370\1\u019d\1\370\1\u019d\1\370\1\u019d\2\370"+
    "\1\u019d\1\370\2\u019d\3\370\1\u019d\1\370\1\u019d\1\370"+
    "\1\u019d\2\370\1\u019d\1\0\1\u012c\1\370\1\u019d\1\370"+
    "\1\u019d\1\370\1\u019d\1\370\1\u019d\1\370\1\u019d\43\0"+
    "\2\u01cf\102\0\3\u01b1\42\0\1\u01d0\10\0\1\u01d0\2\0"+
    "\1\u01d0\114\0\2\u01d1\111\0\2\u01d2\36\0\1\u01d3\10\0"+
    "\1\u01d3\125\0\2\u01d4\43\0\1\u01d5\10\0\1\u01d5\71\0"+
    "\1\u01d6\10\0\1\u01d6\131\0\2\u01d7\57\0\2\u01d8\57\0"+
    "\1\u01d9\10\0\1\u01d9\107\0\2\u01da\136\0\3\u01db\51\0"+
    "\2\222\100\0\2\u0178\54\0\1\u01dc\10\0\1\u01dc\106\0"+
    "\2\u01dd\114\0\2\u01de\41\0\1\u01df\122\0\2\u01e0\65\0"+
    "\1\241\134\0\3\u01e1\63\0\2\u01e2\110\0\2\u0149\2\u01e3"+
    "\102\0\3\u01b1\7\0\2\u014b\56\0\2\u01e4\60\0\1\u01e5"+
    "\125\0\2\u01e6\50\0\1\u01e7\10\0\1\u01e7\122\0\2\u01e8"+
    "\46\0\1\u01e9\10\0\1\u01e9\127\0\2\u01ea\61\0\2\u01c0"+
    "\64\0\1\u01eb\127\0\2\u01ec\62\0\2\u01ed\120\0\3\u01ee"+
    "\32\0\66\u01c6\1\u01ef\13\u01c6\52\0\1\u01f0\54\0\2\u01f1"+
    "\57\0\1\272\1\0\2\272\1\0\1\272\3\0\1\354"+
    "\5\0\2\272\1\u01f1\1\u01f2\1\0\1\272\1\0\1\272"+
    "\1\0\1\272\1\0\1\272\1\0\1\272\1\0\1\272"+
    "\1\0\1\272\2\0\1\272\1\0\1\272\4\0\1\272"+
    "\1\0\1\272\1\0\1\272\2\0\1\272\3\0\1\272"+
    "\1\0\1\272\1\0\1\272\1\0\1\272\1\0\1\272"+
    "\11\0\1\u01f3\10\0\1\u01f3\63\0\1\272\1\0\2\272"+
    "\1\0\1\u01f4\3\0\1\354\4\0\1\u01f3\2\272\1\0"+
    "\1\272\1\0\1\272\1\0\1\272\1\0\1\272\1\0"+
    "\1\272\1\0\1\272\1\0\1\272\1\0\1\272\2\0"+
    "\1\272\1\0\1\272\4\0\1\272\1\0\1\272\1\0"+
    "\1\272\2\0\1\272\3\0\1\272\1\0\1\272\1\0"+
    "\1\272\1\0\1\272\1\0\1\272\25\0\2\u01f5\110\0"+
    "\2\301\43\0\6\370\1\u01f6\10\370\1\u01f6\46\370\1\0"+
    "\1\u012c\12\370\11\0\1\u01f7\10\0\1\u01f7\70\0\1\u01f8"+
    "\10\0\1\u01f8\127\0\2\u01f9\61\0\2\u01d1\64\0\1\u01fa"+
    "\75\0\1\u01fb\10\0\1\u01fb\66\0\1\u01fc\10\0\1\u01fc"+
    "\71\0\1\u01fd\10\0\1\u01fd\2\0\1\u01fd\110\0\2\u01fe"+
    "\112\0\3\u01ff\3\0\1\u01a9\71\0\2\u0200\66\0\2\u0201"+
    "\55\0\1\u0202\10\0\1\u0202\162\0\2\u0203\45\0\3\u0204"+
    "\122\0\2\u0205\71\0\2\u0206\62\0\2\u0207\62\0\2\u0208"+
    "\120\0\3\u0209\43\0\1\u020a\10\0\1\u020a\116\0\2\u020b"+
    "\44\0\2\u01e5\1\0\2\u01e5\1\0\1\u01e5\3\0\1\u020c"+
    "\5\0\2\u01e5\1\0\1\u01e5\1\0\1\u01e5\1\0\1\u01e5"+
    "\1\0\1\u01e5\1\0\1\u01e5\1\0\1\u01e5\1\0\1\u01e5"+
    "\1\0\1\u01e5\2\0\1\u01e5\1\0\2\u01e5\3\0\1\u01e5"+
    "\1\0\1\u01e5\1\0\1\u01e5\2\0\1\u01e5\3\0\1\u01e5"+
    "\1\0\1\u01e5\1\0\1\u01e5\1\0\1\u01e5\1\0\1\u01e5"+
    "\43\0\2\u020d\135\0\2\u020e\70\0\2\u020f\22\0\1\344"+
    "\70\0\4\u01ea\1\u0210\4\0\4\u01ea\25\0\2\u0211\21\0"+
    "\1\u0212\23\0\1\u0213\10\0\1\u0213\2\0\1\u0213\122\0"+
    "\3\u0214\111\0\2\u0215\71\0\2\u011f\104\0\1\u0216\77\0"+
    "\1\u01f0\14\0\1\u0217\51\0\2\u0218\45\0\1\272\1\0"+
    "\2\272\1\0\1\272\3\0\1\354\5\0\2\272\1\0"+
    "\1\272\1\0\1\272\1\0\1\272\1\0\1\272\1\0"+
    "\1\272\1\u0218\1\u0219\1\0\1\272\1\0\1\272\2\0"+
    "\1\272\1\0\1\272\4\0\1\272\1\0\1\272\1\0"+
    "\1\272\2\0\1\272\3\0\1\272\1\0\1\272\1\0"+
    "\1\272\1\0\1\272\1\0\1\272\25\0\2\u021a\57\0"+
    "\1\272\1\0\2\272\1\0\1\272\3\0\1\354\5\0"+
    "\2\272\1\u021a\1\u021b\1\0\1\272\1\0\1\272\1\0"+
    "\1\272\1\0\1\272\1\0\1\272\1\0\1\272\1\0"+
    "\1\272\2\0\1\272\1\0\1\272\4\0\1\272\1\0"+
    "\1\272\1\0\1\272\2\0\1\272\3\0\1\272\1\0"+
    "\1\272\1\0\1\272\1\0\1\272\1\0\1\272\31\0"+
    "\2\u021c\47\0\50\370\2\u021d\14\370\1\0\1\u012c\12\370"+
    "\100\0\2\u021e\12\0\1\374\70\0\4\u01f9\1\u021f\4\0"+
    "\4\u01f9\25\0\2\u0220\21\0\1\u0221\23\0\1\u0222\10\0"+
    "\1\u0222\2\0\1\u0222\155\0\2\u0223\10\0\1\u0224\10\0"+
    "\1\u0224\2\0\1\u0224\66\0\1\u0225\10\0\1\u0225\124\0"+
    "\3\u0226\3\0\1\u0227\76\0\2\u0228\61\0\2\u0229\114\0"+
    "\3\u022a\47\0\1\u022b\101\0\1\u022c\134\0\2\u022d\45\0"+
    "\1\u022e\121\0\2\u022f\110\0\3\u0230\111\0\2\u0231\71\0"+
    "\2\u0232\130\0\2\u0233\43\0\2\u0234\107\0\1\u0235\121\0"+
    "\2\u0236\23\0\1\u0237\101\0\1\u0238\72\0\1\u0239\10\0"+
    "\1\u0239\113\0\2\u023a\126\0\2\u023b\64\0\2\u023c\70\0"+
    "\2\u023d\102\0\2\u011f\122\0\2\u023e\21\0\66\u023f\1\0"+
    "\13\u023f\72\0\2\u0240\12\0\1\272\1\0\2\272\1\0"+
    "\1\272\3\0\1\354\5\0\2\272\1\0\1\272\1\0"+
    "\1\272\1\0\1\272\1\0\1\272\1\0\1\272\1\0"+
    "\1\272\1\0\1\272\1\0\1\272\2\0\1\272\1\0"+
    "\1\272\4\0\1\272\1\0\1\272\1\0\1\272\2\0"+
    "\1\272\3\0\1\272\1\u0240\1\u0241\1\0\1\272\1\0"+
    "\1\272\1\0\1\272\57\0\2\u0242\25\0\1\272\1\0"+
    "\2\272\1\0\1\272\3\0\1\354\5\0\2\272\1\0"+
    "\1\272\1\0\1\272\1\0\1\272\1\0\1\272\1\0"+
    "\1\272\1\0\1\272\1\0\1\272\1\0\1\272\2\0"+
    "\1\272\1\0\1\272\4\0\1\272\1\u0242\1\u0243\1\0"+
    "\1\272\2\0\1\272\3\0\1\272\1\0\1\272\1\0"+
    "\1\272\1\0\1\272\1\0\1\272\45\0\3\u0244\32\0"+
    "\45\370\3\u0245\16\370\1\0\1\u012c\12\370\15\0\1\u0246"+
    "\72\0\1\u0247\10\0\1\u0247\113\0\2\u0248\126\0\2\u0249"+
    "\64\0\2\u024a\52\0\1\u024b\75\0\1\u024c\10\0\1\u024c"+
    "\71\0\1\u016e\75\0\1\u024d\10\0\1\u024d\70\0\1\u024e"+
    "\10\0\1\u024e\107\0\2\u024f\24\0\1\u0250\53\0\2\u016e"+
    "\63\0\1\u0251\10\0\1\u0251\2\0\1\u0251\4\0\2\u0252"+
    "\52\0\2\u022c\1\0\2\u022c\1\0\1\u022c\3\0\1\u0253"+
    "\5\0\2\u022c\1\0\1\u022c\1\0\1\u022c\1\0\1\u022c"+
    "\1\0\1\u022c\1\0\1\u022c\1\0\1\u022c\1\0\1\u022c"+
    "\1\0\1\u022c\2\0\1\u022c\1\0\2\u022c\3\0\1\u022c"+
    "\1\0\1\u022c\1\0\1\u022c\2\0\1\u022c\3\0\1\u022c"+
    "\1\0\1\u022c\1\0\1\u022c\1\0\1\u022c\1\0\1\u022c"+
    "\6\0\1\u0254\10\0\1\u0254\65\0\2\u022e\1\0\2\u022e"+
    "\1\0\1\u022e\3\0\1\u0255\5\0\2\u022e\1\0\1\u022e"+
    "\1\0\1\u022e\1\0\1\u022e\1\0\1\u022e\1\0\1\u022e"+
    "\1\0\1\u022e\1\0\1\u022e\1\0\1\u022e\2\0\1\u022e"+
    "\1\0\2\u022e\3\0\1\u022e\1\0\1\u022e\1\0\1\u022e"+
    "\2\0\1\u022e\3\0\1\u022e\1\0\1\u022e\1\0\1\u022e"+
    "\1\0\1\u022e\1\0\1\u022e\43\0\2\u0256\70\0\2\u0257"+
    "\102\0\2\144\60\0\1\u0258\101\0\1\u0259\136\0\1\u0235"+
    "\14\0\1\u025a\16\0\1\u025b\100\0\2\u0237\1\0\2\u0237"+
    "\1\0\1\u0237\3\0\1\u025c\5\0\2\u0237\1\0\1\u0237"+
    "\1\0\1\u0237\1\0\1\u0237\1\0\1\u0237\1\0\1\u0237"+
    "\1\0\1\u0237\1\0\1\u0237\1\0\1\u0237\2\0\1\u0237"+
    "\1\0\2\u0237\3\0\1\u0237\1\0\1\u0237\1\0\1\u0237"+
    "\2\0\1\u0237\3\0\1\u0237\1\0\1\u0237\1\0\1\u0237"+
    "\1\0\1\u0237\1\0\1\u0237\3\0\2\u0238\1\0\2\u0238"+
    "\1\0\1\u0238\3\0\1\u025d\5\0\2\u0238\1\0\1\u0238"+
    "\1\0\1\u0238\1\0\1\u0238\1\0\1\u0238\1\0\1\u0238"+
    "\1\0\1\u0238\1\0\1\u0238\1\0\1\u0238\2\0\1\u0238"+
    "\1\0\2\u0238\3\0\1\u0238\1\0\1\u0238\1\0\1\u0238"+
    "\2\0\1\u0238\3\0\1\u0238\1\0\1\u0238\1\0\1\u0238"+
    "\1\0\1\u0238\1\0\1\u0238\7\0\1\u025e\10\0\1\u025e"+
    "\126\0\3\u025f\115\0\3\u0260\25\0\1\u0261\10\0\1\u0261"+
    "\127\0\2\73\113\0\3\u0262\14\0\66\u023f\1\u0263\13\u023f"+
    "\35\0\2\u0264\47\0\1\272\1\0\2\272\1\0\1\272"+
    "\3\0\1\354\5\0\2\272\1\0\1\272\1\0\1\272"+
    "\1\0\1\272\1\0\1\272\1\u0264\1\u0265\1\0\1\272"+
    "\1\0\1\272\1\0\1\272\2\0\1\272\1\0\1\272"+
    "\4\0\1\272\1\0\1\272\1\0\1\272\2\0\1\272"+
    "\3\0\1\272\1\0\1\272\1\0\1\272\1\0\1\272"+
    "\1\0\1\272\45\0\3\357\36\0\1\272\1\0\2\272"+
    "\1\0\1\272\3\0\1\354\5\0\2\272\1\0\1\272"+
    "\1\0\1\272\1\0\1\272\1\0\1\272\1\0\1\272"+
    "\1\0\1\272\1\0\1\272\1\0\1\272\2\357\1\361"+
    "\1\0\1\272\4\0\1\272\1\0\1\272\1\0\1\272"+
    "\2\0\1\272\3\0\1\272\1\0\1\272\1\0\1\272"+
    "\1\0\1\272\1\0\1\272\25\0\2\u019b\53\0\27\370"+
    "\2\u0266\35\370\1\0\1\u012c\12\370\3\0\2\u0246\1\0"+
    "\2\u0246\1\0\1\u0246\3\0\1\u0267\5\0\2\u0246\1\0"+
    "\1\u0246\1\0\1\u0246\1\0\1\u0246\1\0\1\u0246\1\0"+
    "\1\u0246\1\0\1\u0246\1\0\1\u0246\1\0\1\u0246\2\0"+
    "\1\u0246\1\0\2\u0246\3\0\1\u0246\1\0\1\u0246\1\0"+
    "\1\u0246\2\0\1\u0246\3\0\1\u0246\1\0\1\u0246\1\0"+
    "\1\u0246\1\0\1\u0246\1\0\1\u0246\7\0\1\u0268\10\0"+
    "\1\u0268\126\0\3\u0269\115\0\3\u026a\25\0\1\u026b\10\0"+
    "\1\u026b\153\0\2\u026c\16\0\1\u016f\126\0\2\u026d\66\0"+
    "\2\u026e\6\0\2\u01a9\122\0\2\u026f\64\0\2\u0270\72\0"+
    "\2\u0271\115\0\1\u0272\44\0\1\u0273\136\0\1\u0274\54\0"+
    "\2\u0275\123\0\2\114\33\0\2\u0258\1\0\2\u0258\1\0"+
    "\1\u0258\3\0\1\u0276\5\0\2\u0258\1\0\1\u0258\1\0"+
    "\1\u0258\1\0\1\u0258\1\0\1\u0258\1\0\1\u0258\1\0"+
    "\1\u0258\1\0\1\u0258\1\0\1\u0258\2\0\1\u0258\1\0"+
    "\2\u0258\3\0\1\u0258\1\0\1\u0258\1\0\1\u0258\2\0"+
    "\1\u0258\3\0\1\u0258\1\0\1\u0258\1\0\1\u0258\1\0"+
    "\1\u0258\1\0\1\u0258\3\0\2\u0259\1\0\2\u0259\1\0"+
    "\1\u0259\3\0\1\u0277\5\0\2\u0259\1\0\1\u0259\1\0"+
    "\1\u0259\1\0\1\u0259\1\0\1\u0259\1\0\1\u0259\1\0"+
    "\1\u0259\1\0\1\u0259\1\0\1\u0259\2\0\1\u0259\1\0"+
    "\2\u0259\3\0\1\u0259\1\0\1\u0259\1\0\1\u0259\2\0"+
    "\1\u0259\3\0\1\u0259\1\0\1\u0259\1\0\1\u0259\1\0"+
    "\1\u0259\1\0\1\u0259\66\u0278\1\0\13\u0278\10\0\1\u0279"+
    "\10\0\1\u0279\2\0\1\u0279\127\0\1\u027a\101\0\1\u027b"+
    "\37\0\1\u027c\10\0\1\u027c\2\0\1\u027c\64\0\1\u027d"+
    "\10\0\1\u027d\67\0\1\u027e\10\0\1\u027e\162\0\2\u027f"+
    "\6\0\1\u0280\10\0\1\u0280\136\0\1\u0281\106\0\2\u0282"+
    "\23\0\1\272\1\0\2\272\1\0\1\272\3\0\1\354"+
    "\5\0\2\272\1\0\1\272\1\0\1\272\1\0\1\272"+
    "\1\0\1\272\1\0\1\272\1\0\1\272\1\0\1\272"+
    "\1\0\1\272\2\0\1\272\1\0\1\272\4\0\1\272"+
    "\1\0\1\272\1\u0282\1\u0283\2\0\1\272\3\0\1\272"+
    "\1\0\1\272\1\0\1\272\1\0\1\272\1\0\1\272"+
    "\35\370\2\u0284\27\370\1\0\1\u012c\12\370\52\0\1\u0285"+
    "\37\0\1\u0286\10\0\1\u0286\2\0\1\u0286\64\0\1\u0287"+
    "\10\0\1\u0287\67\0\1\u0288\10\0\1\u0288\162\0\2\u0289"+
    "\31\0\2\u028a\114\0\3\u028b\111\0\2\u028c\56\0\2\u0250"+
    "\54\0\1\u028d\10\0\1\u028d\106\0\2\u028e\123\0\1\u0272"+
    "\14\0\1\u028f\15\0\2\u0273\1\0\2\u0273\1\0\1\u0273"+
    "\3\0\1\u0290\5\0\2\u0273\1\0\1\u0273\1\0\1\u0273"+
    "\1\0\1\u0273\1\0\1\u0273\1\0\1\u0273\1\0\1\u0273"+
    "\1\0\1\u0273\1\0\1\u0273\2\0\1\u0273\1\0\2\u0273"+
    "\3\0\1\u0273\1\0\1\u0273\1\0\1\u0273\2\0\1\u0273"+
    "\3\0\1\u0273\1\0\1\u0273\1\0\1\u0273\1\0\1\u0273"+
    "\1\0\1\u0273\52\0\1\u0274\14\0\1\u0291\51\0\2\u0292"+
    "\113\0\1\u0293\101\0\1\u0294\27\0\66\u0278\1\u0295\13\u0278"+
    "\35\0\2\u0296\115\0\1\u027a\14\0\1\u0297\64\0\1\u027b"+
    "\14\0\1\u0298\23\0\1\u0299\10\0\1\u0299\60\0\2\u029a"+
    "\2\0\1\u029b\5\0\1\u029a\23\0\2\203\2\u029c\5\0"+
    "\2\205\1\0\1\u029d\43\0\1\u029e\101\0\1\u029f\153\0"+
    "\1\u02a0\71\0\2\u02a1\25\0\1\u02a2\101\0\1\u02a3\1\0"+
    "\2\272\1\0\1\272\3\0\1\354\5\0\2\272\1\0"+
    "\1\272\1\0\1\272\1\0\1\272\1\0\1\272\1\0"+
    "\1\272\1\0\1\272\1\0\1\272\1\0\1\272\2\0"+
    "\1\272\1\0\1\272\4\0\1\272\1\0\1\272\1\0"+
    "\1\272\2\0\1\272\3\0\1\272\1\0\1\272\1\0"+
    "\1\272\1\0\1\272\1\0\1\272\31\370\2\u02a4\33\370"+
    "\1\0\1\u012c\12\370\52\0\1\u0285\14\0\1\u02a5\23\0"+
    "\1\u02a6\10\0\1\u02a6\60\0\2\u02a7\2\144\1\u02a8\4\0"+
    "\1\144\1\u02a7\2\144\21\0\2\243\2\u02a9\5\0\2\u02aa"+
    "\1\0\1\u02a7\12\0\1\215\30\0\1\u02ab\101\0\1\u02ac"+
    "\134\0\2\u02ad\55\0\2\u02ae\110\0\2\u01a9\143\0\2\u02af"+
    "\45\0\3\u02b0\32\0\66\u02b1\1\0\13\u02b1\52\0\1\u02b2"+
    "\27\0\66\u02b3\1\0\13\u02b3\72\0\2\u02b4\60\0\1\u0293"+
    "\14\0\1\u02b5\64\0\1\u0294\14\0\1\u02b6\66\0\1\u02b7"+
    "\64\0\2\u02b8\41\0\66\u02b9\1\0\13\u02b9\66\u02ba\1\0"+
    "\13\u02ba\12\0\1\u01ea\70\0\2\u029a\2\0\1\u029b\5\0"+
    "\1\u029a\23\0\2\203\7\0\2\205\36\0\1\u02bb\10\0"+
    "\1\u02bb\70\0\1\u02bc\10\0\1\u02bc\72\0\1\u02bd\10\0"+
    "\1\u02bd\2\0\1\u02bd\60\0\2\u029f\1\0\2\u029f\1\0"+
    "\1\u029f\3\0\1\u02be\5\0\2\u029f\1\0\1\u029f\1\0"+
    "\1\u029f\1\0\1\u029f\1\0\1\u029f\1\0\1\u029f\1\0"+
    "\1\u029f\1\0\1\u029f\1\0\1\u029f\2\0\1\u029f\1\0"+
    "\2\u029f\3\0\1\u029f\1\0\1\u029f\1\0\1\u029f\2\0"+
    "\1\u029f\3\0\1\u029f\1\0\1\u029f\1\0\1\u029f\1\0"+
    "\1\u029f\1\0\1\u029f\63\0\3\u02bf\24\0\1\u02c0\10\0"+
    "\1\u02c0\2\0\1\u02c0\61\0\1\272\1\0\2\272\1\u02c0"+
    "\1\272\3\0\1\354\3\0\1\u02c0\1\0\1\272\1\u02c1"+
    "\1\0\1\272\1\0\1\272\1\0\1\272\1\0\1\272"+
    "\1\0\1\272\1\0\1\272\1\0\1\272\1\0\1\272"+
    "\2\0\1\272\1\0\1\272\4\0\1\272\1\0\1\272"+
    "\1\0\1\272\2\0\1\272\3\0\1\272\1\0\1\272"+
    "\1\0\1\272\1\0\1\272\1\0\1\272\15\370\1\u02c2"+
    "\50\370\1\0\1\u012c\12\370\66\u02c3\1\0\13\u02c3\12\0"+
    "\1\u01f9\70\0\2\u02a7\2\144\1\u02a8\4\0\1\144\1\u02a7"+
    "\2\144\21\0\2\243\7\0\2\u02aa\14\0\1\215\21\0"+
    "\1\u02c4\10\0\1\u02c4\70\0\1\u02c5\10\0\1\u02c5\113\0"+
    "\2\u02c6\57\0\1\u02c7\10\0\1\u02c7\2\0\1\u02c7\60\0"+
    "\2\u02ac\1\0\2\u02ac\1\0\1\u02ac\3\0\1\u02c8\5\0"+
    "\2\u02ac\1\0\1\u02ac\1\0\1\u02ac\1\0\1\u02ac\1\0"+
    "\1\u02ac\1\0\1\u02ac\1\0\1\u02ac\1\0\1\u02ac\1\0"+
    "\1\u02ac\2\0\1\u02ac\1\0\2\u02ac\3\0\1\u02ac\1\0"+
    "\1\u02ac\1\0\1\u02ac\2\0\1\u02ac\3\0\1\u02ac\1\0"+
    "\1\u02ac\1\0\1\u02ac\1\0\1\u02ac\1\0\1\u02ac\55\0"+
    "\2\u02c9\102\0\2\u02ca\36\0\1\u02cb\134\0\2\u02cc\30\0"+
    "\66\u02b1\1\u02cd\13\u02b1\52\0\1\u02b2\14\0\1\u02ce\12\0"+
    "\66\u02b3\1\u02cf\13\u02b3\35\0\2\u02d0\43\0\66\u02d1\1\0"+
    "\13\u02d1\66\u02d2\1\0\13\u02d2\57\0\2\u02d3\64\0\2\u02d4"+
    "\35\0\66\u02b9\1\u02d5\13\u02b9\66\u02ba\1\u02d6\13\u02ba\7\0"+
    "\1\u02d7\10\0\1\u02d7\106\0\2\u02d8\116\0\2\u02d9\107\0"+
    "\1\u02da\35\0\1\u02db\10\0\1\u02db\117\0\2\u02dc\47\0"+
    "\1\272\1\0\2\272\1\0\1\272\3\0\1\354\5\0"+
    "\2\272\1\0\1\272\1\0\1\272\1\0\1\272\1\0"+
    "\1\272\1\u02dc\1\u02dd\1\0\1\272\1\0\1\272\1\0"+
    "\1\272\2\0\1\272\1\0\1\272\4\0\1\272\1\0"+
    "\1\272\1\0\1\272\2\0\1\272\3\0\1\272\1\0"+
    "\1\272\1\0\1\272\1\0\1\272\1\0\1\272\6\370"+
    "\1\u02de\10\370\1\u02de\46\370\1\0\1\u012c\12\370\66\u02c3"+
    "\1\u02df\13\u02c3\7\0\1\u02e0\10\0\1\u02e0\106\0\2\u02e1"+
    "\134\0\2\u02e2\62\0\2\u02e3\107\0\1\u02e4\44\0\1\u02e5"+
    "\121\0\2\u0227\46\0\2\u02cb\1\0\2\u02cb\1\0\1\u02cb"+
    "\3\0\1\u02e6\5\0\2\u02cb\1\0\1\u02cb\1\0\1\u02cb"+
    "\1\0\1\u02cb\1\0\1\u02cb\1\0\1\u02cb\1\0\1\u02cb"+
    "\1\0\1\u02cb\1\0\1\u02cb\2\0\1\u02cb\1\0\2\u02cb"+
    "\3\0\1\u02cb\1\0\1\u02cb\1\0\1\u02cb\2\0\1\u02cb"+
    "\3\0\1\u02cb\1\0\1\u02cb\1\0\1\u02cb\1\0\1\u02cb"+
    "\1\0\1\u02cb\6\0\1\u02e7\10\0\1\u02e7\136\0\1\u02e8"+
    "\25\0\66\u02e9\1\0\13\u02e9\54\0\1\u02ea\106\0\2\u02eb"+
    "\17\0\66\u02d1\1\u02ec\13\u02d1\66\u02d2\1\u02ed\13\u02d2\63\0"+
    "\3\u02ee\61\0\3\u02ef\106\0\1\u02f0\101\0\1\u02f1\35\0"+
    "\1\u02f2\10\0\1\u02f2\2\0\1\u02f2\134\0\2\u02f3\32\0"+
    "\1\u02f4\10\0\1\u02f4\131\0\1\u02da\14\0\1\u02f5\101\0"+
    "\1\u02f6\51\0\2\u02f7\45\0\1\272\1\0\2\272\1\0"+
    "\1\272\3\0\1\354\5\0\2\272\1\0\1\272\1\0"+
    "\1\272\1\0\1\272\1\0\1\272\1\0\1\272\1\u02f7"+
    "\1\u02f8\1\0\1\272\1\0\1\272\2\0\1\272\1\0"+
    "\1\272\4\0\1\272\1\0\1\272\1\0\1\272\2\0"+
    "\1\272\3\0\1\272\1\0\1\272\1\0\1\272\1\0"+
    "\1\272\1\0\1\272\63\370\3\u02f9\1\0\1\u012c\12\370"+
    "\54\0\1\u02fa\35\0\1\u02fb\10\0\1\u02fb\2\0\1\u02fb"+
    "\134\0\2\u02fc\22\0\4\144\1\214\4\0\4\144\27\0"+
    "\3\u02fd\3\0\1\144\12\0\1\215\24\0\1\u02fe\10\0"+
    "\1\u02fe\131\0\1\u02e4\14\0\1\u02ff\64\0\1\u0300\101\0"+
    "\1\u0301\44\0\1\u0302\143\0\2\u0303\21\0\66\u02e9\1\u0304"+
    "\13\u02e9\57\0\2\u0305\25\0\1\u0306\151\0\1\u0307\101\0"+
    "\1\u0308\33\0\1\u0309\10\0\1\u0309\132\0\2\u030a\107\0"+
    "\2\u030b\100\0\2\u030c\32\0\1\u030d\10\0\1\u030d\114\0"+
    "\2\u029d\143\0\2\u030e\66\u030f\1\0\13\u030f\43\0\2\u0121"+
    "\41\0\1\272\1\0\2\272\1\0\1\272\3\0\1\354"+
    "\5\0\2\272\1\0\1\272\1\0\1\272\1\0\1\272"+
    "\1\0\1\272\1\0\1\272\1\0\1\272\1\0\1\272"+
    "\1\u0121\1\u0122\2\0\1\272\1\0\1\272\4\0\1\272"+
    "\1\0\1\272\1\0\1\272\2\0\1\272\3\0\1\272"+
    "\1\0\1\272\1\0\1\272\1\0\1\272\1\0\1\272"+
    "\57\370\2\u0310\5\370\1\0\1\u012c\12\370\57\0\2\u0311"+
    "\32\0\1\u0312\10\0\1\u0312\114\0\2\u02a7\51\0\1\u0313"+
    "\10\0\1\u0313\162\0\2\u0314\66\u0315\1\0\13\u0315\52\0"+
    "\1\u0300\14\0\1\u0316\64\0\1\u0301\14\0\1\u0317\15\0"+
    "\2\u0302\1\0\2\u0302\1\0\1\u0302\3\0\1\u0318\5\0"+
    "\2\u0302\1\0\1\u0302\1\0\1\u0302\1\0\1\u0302\1\0"+
    "\1\u0302\1\0\1\u0302\1\0\1\u0302\1\0\1\u0302\1\0"+
    "\1\u0302\2\0\1\u0302\1\0\2\u0302\3\0\1\u0302\1\0"+
    "\1\u0302\1\0\1\u0302\2\0\1\u0302\3\0\1\u0302\1\0"+
    "\1\u0302\1\0\1\u0302\1\0\1\u0302\1\0\1\u0302\63\0"+
    "\3\u0319\70\0\1\u031a\110\0\3\u031b\24\0\1\u031c\10\0"+
    "\1\u031c\2\0\1\u031c\134\0\2\u031d\100\0\2\u031e\110\0"+
    "\1\57\20\0\1\u031f\10\0\1\u031f\145\0\3\u0320\77\0"+
    "\3\u0321\26\0\1\u029a\104\0\1\u0322\64\0\66\u030f\1\u0323"+
    "\13\u030f\66\370\1\u0324\1\u012c\12\370\63\0\3\u0325\26\0"+
    "\1\u02a7\114\0\2\u0326\70\0\1\u0327\64\0\66\u0315\1\u0328"+
    "\13\u0315\66\u0329\1\0\13\u0329\66\u032a\1\0\13\u032a\52\0"+
    "\1\u032b\35\0\1\u032c\10\0\1\u032c\141\0\2\u032d\27\0"+
    "\1\u032e\10\0\1\u032e\117\0\2\u032f\126\0\3\u0330\77\0"+
    "\3\u0331\31\0\1\u0332\72\0\1\u0333\10\0\1\u0333\70\0"+
    "\1\u0334\10\0\1\u0334\65\0\2\u0322\1\0\2\u0322\1\0"+
    "\1\u0322\3\0\1\u0335\5\0\2\u0322\1\0\1\u0322\1\0"+
    "\1\u0322\1\0\1\u0322\1\0\1\u0322\1\0\1\u0322\1\0"+
    "\1\u0322\1\0\1\u0322\1\0\1\u0322\2\0\1\u0322\1\0"+
    "\2\u0322\3\0\1\u0322\1\0\1\u0322\1\0\1\u0322\2\0"+
    "\1\u0322\3\0\1\u0322\1\0\1\u0322\1\0\1\u0322\1\0"+
    "\1\u0322\1\0\1\u0322\54\0\1\u0336\26\0\4\u0324\5\0"+
    "\1\u0337\3\u0324\51\0\1\u0338\20\0\1\u0339\10\0\1\u0339"+
    "\113\0\2\u033a\52\0\2\u0327\1\0\2\u0327\1\0\1\u0327"+
    "\3\0\1\u033b\5\0\2\u0327\1\0\1\u0327\1\0\1\u0327"+
    "\1\0\1\u0327\1\0\1\u0327\1\0\1\u0327\1\0\1\u0327"+
    "\1\0\1\u0327\1\0\1\u0327\2\0\1\u0327\1\0\2\u0327"+
    "\3\0\1\u0327\1\0\1\u0327\1\0\1\u0327\2\0\1\u0327"+
    "\3\0\1\u0327\1\0\1\u0327\1\0\1\u0327\1\0\1\u0327"+
    "\1\0\1\u0327\54\0\1\u033c\25\0\66\u0329\1\u033d\13\u0329"+
    "\66\u032a\1\u033e\13\u032a\52\0\1\u032b\14\0\1\u033f\101\0"+
    "\1\231\75\0\3\u0340\103\0\1\u0341\51\0\2\u0342\47\0"+
    "\1\u0343\10\0\1\u0343\70\0\1\u0344\10\0\1\u0344\65\0"+
    "\2\u0332\1\0\2\u0332\1\0\1\u0332\3\0\1\u0345\5\0"+
    "\2\u0332\1\0\1\u0332\1\0\1\u0332\1\0\1\u0332\1\0"+
    "\1\u0332\1\0\1\u0332\1\0\1\u0332\1\0\1\u0332\1\0"+
    "\1\u0332\2\0\1\u0332\1\0\2\u0332\3\0\1\u0332\1\0"+
    "\1\u0332\1\0\1\u0332\2\0\1\u0332\3\0\1\u0332\1\0"+
    "\1\u0332\1\0\1\u0332\1\0\1\u0332\1\0\1\u0332\67\0"+
    "\1\127\101\0\1\u0346\64\0\1\u0347\106\0\2\u0348\22\0"+
    "\4\u0324\4\0\1\u0349\1\u0337\3\u0324\4\0\1\u0349\44\0"+
    "\1\u0338\20\0\1\u034a\10\0\1\u034a\151\0\1\144\57\0"+
    "\3\u034b\104\0\1\u034c\106\0\2\u034d\75\0\1\u034e\101\0"+
    "\1\u034f\25\0\66\u0350\1\0\13\u0350\6\0\1\u0351\10\0"+
    "\1\u0351\125\0\2\u0352\124\0\1\241\101\0\1\u0353\64\0"+
    "\1\u0354\101\0\1\u0347\14\0\1\u0355\75\0\3\u0356\24\0"+
    "\1\u0357\10\0\1\u0357\2\0\1\u0357\140\0\3\u0358\64\0"+
    "\2\144\102\0\1\u034c\14\0\1\u0359\75\0\3\u035a\73\0"+
    "\2\u035b\100\0\2\u035c\21\0\66\u0350\1\u035d\13\u0350\67\0"+
    "\1\u035e\57\0\3\u035f\33\0\4\u0353\1\u0360\4\0\4\u0353"+
    "\50\0\1\u0361\65\0\1\u0354\14\0\1\u0362\12\0\66\u0363"+
    "\1\0\13\u0363\6\0\1\u0364\10\0\1\u0364\71\0\1\u0365"+
    "\10\0\1\u0365\140\0\2\u0366\21\0\66\u0367\1\0\13\u0367"+
    "\6\0\1\u0368\10\0\1\u0368\145\0\3\u0369\77\0\3\u036a"+
    "\70\0\1\u036b\26\0\4\u036c\1\u036d\4\0\4\u036c\50\0"+
    "\1\u036e\63\0\2\u036f\36\0\1\u0370\10\0\1\u0370\141\0"+
    "\2\u0371\21\0\66\u0372\1\0\13\u0372\66\u0363\1\u0373\13\u0363"+
    "\67\0\1\344\20\0\1\u0374\10\0\1\u0374\136\0\1\u0375"+
    "\25\0\66\u0367\1\u0376\13\u0367\67\0\1\374\20\0\1\u0377"+
    "\10\0\1\u0377\70\0\1\u0378\10\0\1\u0378\141\0\2\u0379"+
    "\27\0\1\u037a\10\0\1\u037a\141\0\2\u037b\27\0\1\u0205"+
    "\10\0\1\u0205\71\0\1\u037c\10\0\1\u037c\144\0\3\u037d"+
    "\14\0\66\u0372\1\u037e\13\u0372\54\0\1\u037f\32\0\1\u0324"+
    "\162\0\1\u0380\67\0\1\u0381\114\0\1\u0382\101\0\1\u016f"+
    "\75\0\3\u0383\23\0\1\u0384\10\0\1\u0384\144\0\3\u0385"+
    "\24\0\1\u0386\10\0\1\u0386\2\0\1\u0386\63\0\1\u0387"+
    "\10\0\1\u0387\136\0\1\u0388\104\0\2\u0389\21\0\66\u038a"+
    "\1\0\13\u038a\57\0\2\u038b\22\0\2\u0382\2\0\1\u038c"+
    "\5\0\1\u0382\13\0\2\26\12\0\2\u038d\43\0\1\u038e"+
    "\10\0\1\u038e\72\0\1\u038f\10\0\1\u038f\2\0\1\u038f"+
    "\63\0\1\u0390\10\0\1\u0390\73\0\1\u0391\10\0\1\u0391"+
    "\74\0\1\u0392\143\0\2\u0393\104\0\3\u0394\14\0\66\u038a"+
    "\1\0\1\u0395\12\u038a\63\0\3\u0396\22\0\1\u0397\10\0"+
    "\1\u0397\63\0\2\u0398\2\0\1\u0399\5\0\1\u0398\15\0"+
    "\2\u039a\15\0\2\63\1\0\1\u0398\115\0\1\u039b\23\0"+
    "\1\u039c\10\0\1\u039c\74\0\1\u039d\76\0\1\u0353\77\0"+
    "\1\u039e\10\0\1\u039e\2\0\1\u039e\12\0\2\u039f\124\0"+
    "\3\u03a0\22\0\1\u03a1\10\0\1\u03a1\62\0\52\u038a\1\u03a2"+
    "\13\u038a\1\0\1\u0395\12\u038a\6\0\1\u03a3\10\0\1\u03a3"+
    "\71\0\1\u03a4\10\0\1\u03a4\62\0\2\u0398\2\0\1\u0399"+
    "\5\0\1\u0398\34\0\2\63\36\0\1\u03a5\10\0\1\u03a5"+
    "\127\0\3\u03a6\44\0\1\u036c\77\0\1\u03a7\10\0\1\u03a7"+
    "\2\0\1\u03a7\12\0\2\u03a8\104\0\2\u03a9\102\0\3\u03aa"+
    "\7\0\2\u03ab\27\0\1\u03ac\10\0\1\u03ac\151\0\1\u01ea"+
    "\12\0\15\u038a\1\u03ad\34\u038a\1\u03a2\13\u038a\1\0\1\u0395"+
    "\12\u038a\67\0\1\u01f9\22\0\1\u03ae\10\0\1\u03ae\2\0"+
    "\1\u03ae\64\0\1\u03af\10\0\1\u03af\70\0\1\u03b0\10\0"+
    "\1\u03b0\124\0\2\u03b1\114\0\2\u01b2\32\0\1\u03b2\10\0"+
    "\1\u03b2\122\0\2\u03b3\41\0\1\u03b4\164\0\1\u03b5\12\0"+
    "\3\u038a\2\u03ad\1\u038a\2\u03ad\1\u038a\1\u03ad\3\u038a\1\u03b6"+
    "\5\u038a\2\u03ad\1\u038a\1\u03ad\1\u038a\1\u03ad\1\u038a\1\u03ad"+
    "\1\u038a\1\u03ad\1\u038a\1\u03ad\1\u038a\1\u03ad\1\u038a\1\u03ad"+
    "\1\u038a\1\u03ad\2\u038a\1\u03ad\1\u038a\2\u03ad\3\u038a\1\u03ad"+
    "\1\u038a\1\u03ad\1\u038a\1\u03ad\2\u038a\1\u03ad\1\0\1\u0395"+
    "\1\u038a\1\u03ad\1\u038a\1\u03ad\1\u038a\1\u03ad\1\u038a\1\u03ad"+
    "\1\u038a\1\u03ad\11\0\1\u03b7\10\0\1\u03b7\67\0\1\u03b8"+
    "\10\0\1\u03b8\2\0\1\u03b8\56\0\2\u03b9\2\144\1\u03ba"+
    "\4\0\1\144\1\u03b9\2\144\21\0\2\243\2\u03bb\5\0"+
    "\2\245\1\0\1\u03b9\12\0\1\215\24\0\1\u03bc\10\0"+
    "\1\u03bc\157\0\2\u0234\70\0\2\u03bd\35\0\2\u03be\54\0"+
    "\4\u03b5\1\u03bf\4\0\4\u03b5\50\0\1\u03c0\13\0\66\u038a"+
    "\1\0\1\u0395\10\u038a\2\u03c1\12\0\1\u0382\100\0\1\u03c2"+
    "\10\0\1\u03c2\60\0\2\u03b9\2\144\1\u03ba\4\0\1\144"+
    "\1\u03b9\2\144\21\0\2\243\7\0\2\245\14\0\1\215"+
    "\21\0\1\u03c3\10\0\1\u03c3\70\0\1\u03c4\10\0\1\u03c4"+
    "\162\0\2\u03c5\15\0\1\u03c6\125\0\2\u03c7\45\0\1\u03c8"+
    "\10\0\1\u03c8\141\0\2\u03c9\21\0\11\u038a\1\u03ca\10\u038a"+
    "\1\u03ca\43\u038a\1\0\1\u0395\12\u038a\12\0\1\u0398\76\0"+
    "\1\u03cb\10\0\1\u03cb\106\0\2\u03cc\70\0\1\u03cd\67\0"+
    "\2\u03c6\1\0\2\u03c6\1\0\1\u03c6\3\0\1\u03ce\5\0"+
    "\2\u03c6\1\0\1\u03c6\1\0\1\u03c6\1\0\1\u03c6\1\0"+
    "\1\u03c6\1\0\1\u03c6\1\0\1\u03c6\1\0\1\u03c6\1\0"+
    "\1\u03c6\2\0\1\u03c6\1\0\2\u03c6\3\0\1\u03c6\1\0"+
    "\1\u03c6\1\0\1\u03c6\2\0\1\u03c6\3\0\1\u03c6\1\0"+
    "\1\u03c6\1\0\1\u03c6\1\0\1\u03c6\1\0\1\u03c6\43\0"+
    "\2\u03cf\44\0\1\u03d0\10\0\1\u03d0\144\0\3\u03d1\14\0"+
    "\43\u038a\2\u03d2\21\u038a\1\0\1\u0395\12\u038a\10\0\1\u03d3"+
    "\10\0\1\u03d3\2\0\1\u03d3\134\0\2\u03d4\24\0\2\u03cd"+
    "\1\0\2\u03cd\1\0\1\u03cd\3\0\1\u03d5\5\0\2\u03cd"+
    "\1\0\1\u03cd\1\0\1\u03cd\1\0\1\u03cd\1\0\1\u03cd"+
    "\1\0\1\u03cd\1\0\1\u03cd\1\0\1\u03cd\1\0\1\u03cd"+
    "\2\0\1\u03cd\1\0\2\u03cd\3\0\1\u03cd\1\0\1\u03cd"+
    "\1\0\1\u03cd\2\0\1\u03cd\3\0\1\u03cd\1\0\1\u03cd"+
    "\1\0\1\u03cd\1\0\1\u03cd\1\0\1\u03cd\52\0\1\u03d6"+
    "\121\0\2\u03d7\16\0\1\u03d8\10\0\1\u03d8\2\0\1\u03d8"+
    "\63\0\1\u03d9\10\0\1\u03d9\62\0\10\u038a\1\u03da\10\u038a"+
    "\1\u03da\2\u038a\1\u03da\41\u038a\1\0\1\u0395\12\u038a\11\0"+
    "\1\u03db\10\0\1\u03db\114\0\2\u03b9\115\0\1\u03dc\101\0"+
    "\1\u03d6\14\0\1\u03dd\16\0\1\u03de\106\0\1\u03df\10\0"+
    "\1\u03df\74\0\1\u03e0\64\0\15\u038a\1\u03e1\50\u038a\1\0"+
    "\1\u0395\12\u038a\12\0\1\u03b9\141\0\1\u03dc\14\0\1\u03e2"+
    "\12\0\66\u03e3\1\0\13\u03e3\10\0\1\u03e4\10\0\1\u03e4"+
    "\2\0\1\u03e4\67\0\1\u03b5\77\0\1\u03e5\10\0\1\u03e5"+
    "\2\0\1\u03e5\12\0\2\u03e6\41\0\6\u038a\1\u03e7\10\u038a"+
    "\1\u03e7\46\u038a\1\0\1\u0395\12\u038a\66\u03e8\1\0\13\u03e8"+
    "\66\u03e3\1\u03e9\13\u03e3\35\0\2\u03ea\104\0\2\u03eb\2\u03ec"+
    "\102\0\3\u03aa\32\0\63\u038a\3\u03ed\1\0\1\u0395\12\u038a"+
    "\66\u03e8\1\u03ee\13\u03e8\54\0\1\u03ef\64\0\2\u03f0\50\0"+
    "\1\u03f1\10\0\1\u03f1\72\0\1\u03f2\10\0\1\u03f2\57\0"+
    "\57\u038a\2\u03f3\5\u038a\1\0\1\u0395\12\u038a\54\0\1\u03f4"+
    "\104\0\2\u03f5\64\0\2\u03f6\133\0\2\u03f7\102\0\2\u031f"+
    "\66\u038a\1\u0324\1\u0395\12\u038a\57\0\2\u03f8\104\0\3\u03f9"+
    "\61\0\3\u03fa\67\0\2\u03fb\126\0\3\u03fc\22\0\1\u03fd"+
    "\10\0\1\u03fd\132\0\2\u03fe\67\0\2\u03ff\47\0\1\u0400"+
    "\10\0\1\u0400\151\0\1\u0401\20\0\1\u0402\10\0\1\u0402"+
    "\125\0\2\u0402\124\0\1\u036c\12\0\1\u0341\1\u0403\4\u0341"+
    "\2\0\1\u0341\1\0\4\u0341\27\0\1\u0341\5\0\2\u0341"+
    "\6\0\1\u0341\2\0\2\u0341\27\0\1\u0404\66\0\1\u0341"+
    "\102\0\2\u0404\1\0\2\u0404\1\0\1\u0404\3\0\1\u0405"+
    "\5\0\2\u0404\1\0\1\u0404\1\0\1\u0404\1\0\1\u0404"+
    "\1\0\1\u0404\1\0\1\u0404\1\0\1\u0404\1\0\1\u0404"+
    "\1\0\1\u0404\2\0\1\u0404\1\0\2\u0404\3\0\1\u0404"+
    "\1\0\1\u0404\1\0\1\u0404\2\0\1\u0404\3\0\1\u0404"+
    "\1\0\1\u0404\1\0\1\u0404\1\0\1\u0404\1\0\1\u0404"+
    "\52\0\1\u0406\101\0\1\u0406\14\0\1\u0407\12\0\66\u0408"+
    "\1\0\101\u0408\1\u0409\13\u0408\54\0\1\u040a\104\0\2\u040b"+
    "\104\0\3\u040c\22\0\1\u040d\10\0\1\u040d\151\0\1\u040e"+
    "\13\0\4\u040e\1\u040f\4\0\4\u040e\50\0\1\u0410\21\0"+
    "\1\u0411\10\0\1\u0411\141\0\2\u0412\30\0\1\u0413\10\0"+
    "\1\u0413\144\0\3\u0414\24\0\1\u0415\10\0\1\u0415\2\0"+
    "\1\u0415\63\0\1\u0416\10\0\1\u0416\73\0\1\u0417\10\0"+
    "\1\u0417\74\0\1\u0418\76\0\1\u040e\77\0\1\u0419\10\0"+
    "\1\u0419\2\0\1\u0419\12\0\2\u03e6\104\0\2\u041a\46\0"+
    "\1\u041b\10\0\1\u041b\157\0\2\u0402";

  private static int [] zzUnpackTrans() {
    int [] result = new int[67188];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\2\1\1\11\1\1\1\11\1\1\1\11\4\1"+
    "\54\0\1\1\36\0\1\11\1\0\1\1\15\0\1\11"+
    "\3\1\1\0\2\1\6\0\1\11\5\0\1\1\6\0"+
    "\1\1\40\0\1\11\2\1\1\0\1\1\50\0\1\1"+
    "\26\0\1\1\63\0\1\11\40\0\4\1\1\0\2\1"+
    "\33\0\1\1\17\0\1\1\23\0\1\11\24\0\1\11"+
    "\15\0\1\11\56\0\1\1\45\0\1\1\50\0\1\11"+
    "\1\0\1\1\46\0\1\11\54\0\1\1\37\0\1\1"+
    "\2\0\1\11\125\0\1\11\55\0\1\1\22\0\1\1"+
    "\11\0\1\11\4\0\1\11\27\0\1\1\74\0\1\11"+
    "\147\0\1\1\30\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1051];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /* user code: */
	
	/* Custom java code */

    @Override
	public String language() { return "IT"; }

	@Override
	public String version() { return "1.4"; }


	/* An empty default constructor is required to comply with LinkolnService */
	
	public RegionalCaseLawAuthorities() { }
	
	@Override
	public final boolean run() {
		
		try {
			
			yyreset(new StringReader(getInput()));
			yylex();
			
		} catch (IOException e) {

			e.printStackTrace();
			return false;
		}
		
		return true;
	}
	



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public RegionalCaseLawAuthorities(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 382) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { addText(yytext());
	position++;
            } 
            // fall through
          case 18: break;
          case 2: 
            { addText(yytext());
		position++;
            } 
            // fall through
          case 19: break;
          case 3: 
            { checkEnd();
            } 
            // fall through
          case 20: break;
          case 4: 
            { annotationEntity.setValue("IT_TAR");

		offset += yylength();
		position += Util.removeAllAnnotations(yytext()).length();
            } 
            // fall through
          case 21: break;
          case 5: 
            { annotationEntity.setValue("IT_TRB");

		offset += yylength();
		position += Util.removeAllAnnotations(yytext()).length();
            } 
            // fall through
          case 22: break;
          case 6: 
            { annotate(new CaseLawAuthority(), "IT_TAR", true, true);
            } 
            // fall through
          case 23: break;
          case 7: 
            { addText(yytext());
		position--; //account for the following {LKN_C} character
		yybegin(YYINITIAL);
            } 
            // fall through
          case 24: break;
          case 8: 
            { annotate(new CaseLawAuthority(), "IT_TRB", true, true);
            } 
            // fall through
          case 25: break;
          case 9: 
            { annotate(new CaseLawAuthority(), "IT_CTR", true, false);
            } 
            // fall through
          case 26: break;
          case 10: 
            { addText(yytext()); 
	yybegin(lkn);
            } 
            // fall through
          case 27: break;
          case 11: 
            { annotate(new CaseLawAuthority(), "IT_CTP", true, false);
            } 
            // fall through
          case 28: break;
          case 12: 
            { annotate(new CaseLawAuthority(), "IT_CTC", true, false);
            } 
            // fall through
          case 29: break;
          case 13: 
            { AnnotationEntity retrievedEntity = retrieveEntity(yytext());
		
		offset += yylength();
		position += retrievedEntity.getText().length();
            } 
            // fall through
          case 30: break;
          case 14: 
            { AnnotationEntity retrievedEntity = retrieveEntity(yytext());
		
		annotationEntity.addRelatedEntity(retrievedEntity);
		retrievedEntity.addRelatedEntity(annotationEntity);
		
		//Update the annotation value with the normalized location
		String geoValue = retrievedEntity.getValue();
		if(geoValue != null && geoValue.startsWith("IT_")) {
			annotationEntity.setValue(annotationEntity.getValue() + "_" + geoValue.substring(3));
		}
				
		offset += yylength();
		position += retrievedEntity.getText().length();
            } 
            // fall through
          case 31: break;
          case 15: 
            { start(new CaseLawAuthority(), regionalState, true, false);
            } 
            // fall through
          case 32: break;
          case 16: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 4);
            { annotationEntity.setValue("IT_CPP");

		offset += yylength();
		position += Util.removeAllAnnotations(yytext()).length();
            } 
            // fall through
          case 33: break;
          case 17: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 3;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos, zzMarkedPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 4;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos, zzStartRead);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              };
              zzMarkedPos = zzFPos;
            }
            { annotate(new CaseLawAuthority(), "IT_CTR", true, false);
            } 
            // fall through
          case 34: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java RegionalCaseLawAuthorities [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        RegionalCaseLawAuthorities scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new RegionalCaseLawAuthorities(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
