/* The following code was generated by JFlex 1.7.0 */

/*******************************************************************************
 * Copyright (c) 2016-2021 Institute of Legal Information and Judicial Systems IGSG-CNR (formerly ITTIG-CNR)
 * 
 * This program and the accompanying materials  are made available under the terms of the GNU General Public
 * License as published by the Free Software Foundation; either version 3 of the License, or (at your option)
 * any later version. 
 * You may not use this work except in compliance with the Licence.
 * You may obtain a copy of the Licence at: https://www.gnu.org/licenses/gpl-3.0.txt
 * Unless required by applicable law or agreed to in writing, software distributed under the Licence is 
 * distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the Licence for the specific language governing permissions and limitations under the Licence.
 *  
 * Authors: Lorenzo Bacci (IGSG-CNR)
 ******************************************************************************/
 package it.cnr.igsg.linkoln.service.impl.it;

import java.io.IOException;
import java.io.StringReader;

import it.cnr.igsg.linkoln.entity.*;
import it.cnr.igsg.linkoln.service.*;

import it.cnr.igsg.linkoln.service.impl.Util;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>jflex/AddPartitionsToReferences.jflex</tt>
 */
public class AddPartitionsToReferences extends LinkolnAnnotationService {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int lkn = 2;
  public static final int convertPartitionAscState = 4;
  public static final int convertPartitionDescState = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\1\1\0\1\1\1\1\22\0\1\1\5\0\1\4"+
    "\1\0\1\1\1\1\2\0\1\1\1\2\1\0\1\41\1\40\1\40"+
    "\1\40\1\40\1\40\1\40\1\40\1\40\1\40\1\40\1\12\1\11"+
    "\5\0\1\21\1\6\1\16\1\16\1\27\1\51\1\23\1\16\1\35"+
    "\1\16\1\45\1\43\1\16\1\5\1\37\1\10\1\16\1\25\1\17"+
    "\1\33\1\31\1\16\1\53\1\16\1\16\1\16\1\46\1\0\1\47"+
    "\1\0\1\3\1\0\1\20\1\14\1\0\1\0\1\26\1\50\1\22"+
    "\1\0\1\34\1\0\1\44\1\42\1\0\1\13\1\36\1\15\1\0"+
    "\1\24\1\7\1\32\1\30\1\0\1\52\1\0\1\0\1\0\12\0"+
    "\1\0\44\0\1\0\5\0\1\0\3\0\1\0\5\0\1\0\5\0"+
    "\1\0\1\0\4\0\1\0\1\0\1\0\1\0\2\0\1\0\1\0"+
    "\2\0\1\0\1\0\1\0\1\0\3\0\2\0\1\0\1\0\2\0"+
    "\3\0\1\0\1\0\4\0\1\0\1\0\1\0\1\0\2\0\1\0"+
    "\1\0\2\0\1\0\1\0\1\0\1\0\3\0\2\0\1\0\1\0"+
    "\2\0\53\0\1\0\1\0\6\0\2\34\66\0\1\0\1\0\4\0"+
    "\1\0\1\0\17\0\1\7\u1c88\0\1\0\1\0\216\0\2\0\42\0"+
    "\1\0\1\0\u0144\0\1\1\20\0\1\2\1\2\4\0\1\0\16\0"+
    "\1\0\1\0\u0100\0\1\44\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\2\1\2\2\3\3\15\0\1\4\102\0\1\5"+
    "\37\0\1\5\102\0\1\6\23\0\1\5\4\0\1\6"+
    "\27\0\1\5\70\0\1\7\1\0\1\7\222\0\1\10"+
    "\1\0\1\11\2\0\1\12\1\13\14\0\1\14\1\15";

  private static int [] zzUnpackAction() {
    int [] result = new int[466];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\204\0\260\0\334\0\260\0\u0108"+
    "\0\260\0\u0134\0\u0160\0\u018c\0\u01b8\0\u01e4\0\u0210\0\u023c"+
    "\0\u0268\0\u0294\0\u02c0\0\u02ec\0\u0318\0\u0344\0\u0370\0\u039c"+
    "\0\260\0\u03c8\0\u03f4\0\u0420\0\u044c\0\u0478\0\u04a4\0\u04d0"+
    "\0\u04fc\0\u0528\0\u0554\0\u0580\0\u05ac\0\u05d8\0\u0604\0\u0630"+
    "\0\u065c\0\u0688\0\u06b4\0\u06e0\0\u070c\0\u0738\0\u0764\0\u0790"+
    "\0\u07bc\0\u07e8\0\u0814\0\u0840\0\u086c\0\u0898\0\u08c4\0\u08f0"+
    "\0\u091c\0\u0948\0\u0974\0\u09a0\0\u09cc\0\u09f8\0\u0a24\0\u0a50"+
    "\0\u0a7c\0\u0aa8\0\u0ad4\0\u0b00\0\u0b2c\0\u0b58\0\u0b84\0\u0bb0"+
    "\0\u0bdc\0\u0c08\0\u0c34\0\u0c60\0\u0c8c\0\u0cb8\0\u0ce4\0\u0d10"+
    "\0\u0d3c\0\u0d68\0\u0d94\0\u0dc0\0\u0dec\0\u0e18\0\u0e44\0\u0e70"+
    "\0\u0e9c\0\u0ec8\0\u0ef4\0\260\0\u0f20\0\u0f4c\0\u0f78\0\u0fa4"+
    "\0\u0fd0\0\u0ffc\0\u1028\0\u1054\0\u1080\0\u10ac\0\u10d8\0\u1104"+
    "\0\u1130\0\u115c\0\u1188\0\u11b4\0\u11e0\0\u120c\0\u1238\0\u1264"+
    "\0\u1290\0\u12bc\0\u12e8\0\u1314\0\u1340\0\u136c\0\u1398\0\u13c4"+
    "\0\u13f0\0\u141c\0\u1448\0\u1448\0\u1474\0\u14a0\0\u14cc\0\u14f8"+
    "\0\u1524\0\u1550\0\u157c\0\u15a8\0\u15d4\0\u1600\0\u162c\0\u1658"+
    "\0\u1684\0\u16b0\0\u16dc\0\u1708\0\u1734\0\u1760\0\u178c\0\u17b8"+
    "\0\u17e4\0\u1810\0\u183c\0\u1868\0\u1894\0\u18c0\0\u18ec\0\u1918"+
    "\0\u1944\0\u1970\0\u199c\0\u19c8\0\u19f4\0\u1a20\0\u1a4c\0\u1a78"+
    "\0\u1aa4\0\u1ad0\0\u1afc\0\u1b28\0\u1b54\0\u1b80\0\u1bac\0\u1bd8"+
    "\0\u1c04\0\u1c30\0\u1c5c\0\u1c88\0\u1cb4\0\u1ce0\0\u1d0c\0\u1d38"+
    "\0\u1d64\0\u1d90\0\u1dbc\0\u1de8\0\u1e14\0\u1e40\0\u1e6c\0\u1e98"+
    "\0\u1ec4\0\u1ef0\0\u1f1c\0\u1f48\0\u1f74\0\u1fa0\0\260\0\u1fcc"+
    "\0\u1ff8\0\u2024\0\u2050\0\u207c\0\u20a8\0\u20d4\0\u2100\0\u212c"+
    "\0\u2158\0\u2184\0\u21b0\0\u21dc\0\u2208\0\u2234\0\u2260\0\u228c"+
    "\0\u22b8\0\u22e4\0\u22e4\0\u2310\0\u233c\0\u2368\0\u2394\0\u2394"+
    "\0\u23c0\0\u23ec\0\u2418\0\u2444\0\u2470\0\u249c\0\u24c8\0\u24f4"+
    "\0\u2520\0\u254c\0\u2578\0\u25a4\0\u25d0\0\u25fc\0\u2628\0\u2654"+
    "\0\u2680\0\u26ac\0\u26d8\0\u2704\0\u2730\0\u275c\0\u2788\0\u2788"+
    "\0\u27b4\0\u27e0\0\u280c\0\u2838\0\u2864\0\u2890\0\u28bc\0\u28e8"+
    "\0\u2914\0\u2940\0\u296c\0\u2998\0\u29c4\0\u29f0\0\u2a1c\0\u2a48"+
    "\0\u2a74\0\u2aa0\0\u2acc\0\u2af8\0\u2b24\0\u2b50\0\u2b7c\0\u2ba8"+
    "\0\u2bd4\0\u2c00\0\u2c2c\0\u2c58\0\u2c84\0\u2cb0\0\u2cdc\0\u2d08"+
    "\0\u2d34\0\u2d60\0\u2d8c\0\u2db8\0\u2de4\0\u2e10\0\u2e3c\0\u2e68"+
    "\0\u2e94\0\u2ec0\0\u2eec\0\u2f18\0\u2f44\0\u2f70\0\u2f9c\0\u2fc8"+
    "\0\u2ff4\0\u3020\0\u304c\0\u3078\0\u30a4\0\u30d0\0\u30fc\0\u3128"+
    "\0\u3154\0\u3180\0\260\0\u31ac\0\u31d8\0\u3204\0\u3230\0\u325c"+
    "\0\u3154\0\u3288\0\u32b4\0\u32e0\0\u330c\0\u3338\0\u3364\0\u3390"+
    "\0\u33bc\0\u33e8\0\u3414\0\u3440\0\u346c\0\u3498\0\u34c4\0\u34f0"+
    "\0\u351c\0\u3548\0\u3574\0\u35a0\0\u35cc\0\u35f8\0\u3624\0\u3650"+
    "\0\u367c\0\u36a8\0\u36d4\0\u3700\0\u372c\0\u3758\0\u3784\0\u37b0"+
    "\0\u37dc\0\u3808\0\u3834\0\u3860\0\u388c\0\u38b8\0\u38e4\0\u3910"+
    "\0\u393c\0\u3968\0\u3994\0\u39c0\0\u39ec\0\u3a18\0\u3a44\0\u3a70"+
    "\0\u3a9c\0\u3ac8\0\u3af4\0\u3b20\0\u3b4c\0\u3b78\0\u3ba4\0\u3bd0"+
    "\0\u3bfc\0\u3c28\0\u3c54\0\u3c80\0\u3cac\0\u3cd8\0\u3d04\0\u3d30"+
    "\0\u3d5c\0\u3d88\0\u3db4\0\u3de0\0\u3e0c\0\u3e38\0\u3e64\0\u3e90"+
    "\0\u3ebc\0\u3ee8\0\u3f14\0\u3f40\0\u3f6c\0\u3f98\0\u3fc4\0\u3ff0"+
    "\0\u401c\0\u4048\0\u4074\0\u40a0\0\u40cc\0\u40f8\0\u4124\0\u4150"+
    "\0\u417c\0\u41a8\0\u41d4\0\u4200\0\u422c\0\u4258\0\u4284\0\u42b0"+
    "\0\u42dc\0\u4308\0\u4334\0\u4360\0\u438c\0\u43b8\0\u43e4\0\u4410"+
    "\0\u443c\0\u4468\0\u4494\0\u44c0\0\u44ec\0\u4518\0\u4544\0\u4570"+
    "\0\u459c\0\u45c8\0\u45f4\0\u4620\0\u464c\0\u4678\0\u46a4\0\u46d0"+
    "\0\u46fc\0\u4728\0\u4754\0\u4780\0\u47ac\0\u47d8\0\u4804\0\u4830"+
    "\0\u485c\0\u4888\0\u48b4\0\u48e0\0\u490c\0\u4938\0\u4964\0\u4990"+
    "\0\u49bc\0\u49e8\0\u4a14\0\u4a40\0\u4a6c\0\u22b8\0\u4a98\0\260"+
    "\0\u4ac4\0\u4af0\0\260\0\260\0\u4b1c\0\u4b48\0\u4b74\0\u4ba0"+
    "\0\u4bcc\0\u4bf8\0\u4c24\0\u4c50\0\u4c7c\0\u4ca8\0\u4cd4\0\u4d00"+
    "\0\u2cdc\0\260";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[466];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\46\5\1\6\5\5\46\7\1\10\5\7\46\11\1\12"+
    "\53\11\1\13\5\11\116\0\2\14\51\0\1\15\54\0"+
    "\2\16\52\0\2\17\54\0\2\20\50\0\2\21\54\0"+
    "\2\22\52\0\2\23\13\0\1\24\5\0\1\24\104\0"+
    "\2\25\13\0\1\26\5\0\1\26\45\0\1\27\5\0"+
    "\1\27\52\0\1\30\46\0\1\31\5\0\1\31\52\0"+
    "\1\32\53\0\1\33\44\0\1\34\1\0\2\34\1\0"+
    "\1\34\5\0\2\34\1\0\1\34\1\0\1\34\1\35"+
    "\1\36\1\37\1\40\1\0\1\34\1\0\1\34\1\0"+
    "\1\34\1\0\1\34\2\0\1\41\1\42\1\0\1\34"+
    "\3\0\1\34\1\0\1\34\3\0\1\43\1\0\2\43"+
    "\1\0\1\43\5\0\2\43\1\0\1\43\1\0\1\43"+
    "\1\0\1\43\1\0\1\43\1\0\1\43\1\0\1\43"+
    "\1\0\1\43\1\0\1\43\2\0\1\44\1\45\1\0"+
    "\1\43\3\0\1\43\1\0\1\43\3\0\1\43\1\0"+
    "\2\43\1\0\1\43\5\0\2\43\1\0\1\43\1\0"+
    "\1\43\1\46\1\47\1\50\1\51\1\0\1\43\1\0"+
    "\1\43\1\0\1\43\1\0\1\43\2\0\1\52\1\53"+
    "\1\0\1\43\3\0\1\43\1\0\1\43\3\0\1\34"+
    "\1\0\2\34\1\0\1\34\1\0\1\54\3\0\2\34"+
    "\1\0\1\34\1\0\1\34\1\0\1\34\1\0\1\34"+
    "\1\0\1\34\1\0\1\34\1\0\1\34\1\0\1\34"+
    "\3\0\1\34\1\0\1\34\3\0\1\34\1\0\1\34"+
    "\26\0\2\55\27\0\1\34\1\0\2\34\1\0\1\34"+
    "\1\0\1\54\3\0\2\34\1\0\1\34\1\0\1\34"+
    "\1\0\1\34\1\55\1\56\1\0\1\34\1\0\1\34"+
    "\1\0\1\34\1\0\1\34\3\0\1\34\1\0\1\34"+
    "\3\0\1\34\1\0\1\34\30\0\2\57\25\0\1\34"+
    "\1\0\2\34\1\0\1\34\1\0\1\54\3\0\2\34"+
    "\1\0\1\34\1\0\1\34\1\0\1\34\1\0\1\34"+
    "\1\57\1\60\1\0\1\34\1\0\1\34\1\0\1\34"+
    "\3\0\1\34\1\0\1\34\3\0\1\34\1\0\1\34"+
    "\26\0\2\61\27\0\1\34\1\0\2\34\1\0\1\34"+
    "\1\0\1\54\3\0\2\34\1\0\1\34\1\0\1\34"+
    "\1\0\1\34\1\61\1\62\1\0\1\34\1\0\1\34"+
    "\1\0\1\34\1\0\1\34\3\0\1\34\1\0\1\34"+
    "\3\0\1\34\1\0\1\34\3\0\1\43\1\0\2\43"+
    "\1\0\1\43\1\0\1\63\3\0\2\43\1\0\1\43"+
    "\1\0\1\43\1\0\1\43\1\0\1\43\1\0\1\43"+
    "\1\0\1\43\1\0\1\43\1\0\1\43\3\0\1\43"+
    "\1\0\1\43\3\0\1\43\1\0\1\43\26\0\2\64"+
    "\27\0\1\43\1\0\2\43\1\0\1\43\1\0\1\63"+
    "\3\0\2\43\1\0\1\43\1\0\1\43\1\0\1\43"+
    "\1\64\1\65\1\0\1\43\1\0\1\43\1\0\1\43"+
    "\1\0\1\43\3\0\1\43\1\0\1\43\3\0\1\43"+
    "\1\0\1\43\26\0\2\66\27\0\1\43\1\0\2\43"+
    "\1\0\1\43\1\0\1\63\3\0\2\43\1\0\1\43"+
    "\1\0\1\43\1\0\1\43\1\66\1\67\1\0\1\43"+
    "\1\0\1\43\1\0\1\43\1\0\1\43\3\0\1\43"+
    "\1\0\1\43\3\0\1\43\1\0\1\43\30\0\2\70"+
    "\25\0\1\43\1\0\2\43\1\0\1\43\1\0\1\63"+
    "\3\0\2\43\1\0\1\43\1\0\1\43\1\0\1\43"+
    "\1\0\1\43\1\70\1\71\1\0\1\43\1\0\1\43"+
    "\1\0\1\43\3\0\1\43\1\0\1\43\3\0\1\43"+
    "\1\0\1\43\26\0\2\72\27\0\1\43\1\0\2\43"+
    "\1\0\1\43\1\0\1\63\3\0\2\43\1\0\1\43"+
    "\1\0\1\43\1\0\1\43\1\72\1\73\1\0\1\43"+
    "\1\0\1\43\1\0\1\43\1\0\1\43\3\0\1\43"+
    "\1\0\1\43\3\0\1\43\1\0\1\43\2\0\2\54"+
    "\1\0\2\54\1\0\1\54\1\0\1\74\3\0\2\54"+
    "\1\0\1\54\1\0\1\54\1\0\1\54\1\0\1\54"+
    "\1\0\1\54\1\0\1\54\1\0\1\54\1\0\2\54"+
    "\2\0\1\54\1\0\1\54\3\0\1\54\1\0\1\54"+
    "\50\0\2\75\5\0\1\34\1\0\2\34\1\0\1\34"+
    "\1\0\1\54\3\0\2\34\1\0\1\34\1\0\1\34"+
    "\1\0\1\34\1\0\1\34\1\0\1\34\1\0\1\34"+
    "\1\0\1\34\1\0\1\34\3\0\1\34\1\0\1\34"+
    "\2\0\1\75\1\76\1\0\1\34\3\0\1\77\53\0"+
    "\1\100\1\0\2\34\1\0\1\34\1\0\1\54\3\0"+
    "\2\34\1\0\1\34\1\0\1\34\1\0\1\34\1\0"+
    "\1\34\1\0\1\34\1\0\1\34\1\0\1\34\1\0"+
    "\1\34\3\0\1\34\1\0\1\34\3\0\1\34\1\0"+
    "\1\34\22\0\2\101\33\0\1\34\1\0\2\34\1\0"+
    "\1\34\1\0\1\54\3\0\2\34\1\0\1\34\1\101"+
    "\1\102\1\0\1\34\1\0\1\34\1\0\1\34\1\0"+
    "\1\34\1\0\1\34\1\0\1\34\3\0\1\34\1\0"+
    "\1\34\3\0\1\34\1\0\1\34\2\0\2\63\1\0"+
    "\2\63\1\0\1\63\1\0\1\103\3\0\2\63\1\0"+
    "\1\63\1\0\1\63\1\0\1\63\1\0\1\63\1\0"+
    "\1\63\1\0\1\63\1\0\1\63\1\0\2\63\2\0"+
    "\1\63\1\0\1\63\3\0\1\63\1\0\1\63\22\0"+
    "\2\104\33\0\1\43\1\0\2\43\1\0\1\43\1\0"+
    "\1\63\3\0\2\43\1\0\1\43\1\104\1\105\1\0"+
    "\1\43\1\0\1\43\1\0\1\43\1\0\1\43\1\0"+
    "\1\43\1\0\1\43\3\0\1\43\1\0\1\43\3\0"+
    "\1\43\1\0\1\43\50\0\2\106\5\0\1\43\1\0"+
    "\2\43\1\0\1\43\1\0\1\63\3\0\2\43\1\0"+
    "\1\43\1\0\1\43\1\0\1\43\1\0\1\43\1\0"+
    "\1\43\1\0\1\43\1\0\1\43\1\0\1\43\3\0"+
    "\1\43\1\0\1\43\2\0\1\106\1\107\1\0\1\43"+
    "\3\0\1\110\53\0\1\111\1\0\2\43\1\0\1\43"+
    "\1\0\1\63\3\0\2\43\1\0\1\43\1\0\1\43"+
    "\1\0\1\43\1\0\1\43\1\0\1\43\1\0\1\43"+
    "\1\0\1\43\1\0\1\43\3\0\1\43\1\0\1\43"+
    "\3\0\1\43\1\0\1\43\22\0\2\112\33\0\1\43"+
    "\1\0\2\43\1\0\1\43\1\0\1\63\3\0\2\43"+
    "\1\0\1\43\1\112\1\113\1\0\1\43\1\0\1\43"+
    "\1\0\1\43\1\0\1\43\1\0\1\43\1\0\1\43"+
    "\3\0\1\43\1\0\1\43\3\0\1\43\1\0\1\43"+
    "\40\0\1\114\25\0\1\115\44\0\1\34\1\0\2\34"+
    "\1\0\1\34\1\0\1\116\3\0\2\34\1\0\1\34"+
    "\1\0\1\34\1\0\1\34\1\0\1\34\1\0\1\34"+
    "\1\0\1\34\1\0\1\34\1\0\1\34\3\0\1\34"+
    "\1\0\1\34\3\0\1\34\1\0\1\34\42\0\2\117"+
    "\13\0\1\34\1\0\2\34\1\0\1\34\1\0\1\54"+
    "\3\0\2\34\1\0\1\34\1\0\1\34\1\0\1\34"+
    "\1\0\1\34\1\0\1\34\1\0\1\34\1\0\1\34"+
    "\1\0\1\34\2\0\1\117\1\120\1\0\1\34\3\0"+
    "\1\34\1\0\1\34\3\0\1\121\53\0\1\122\1\0"+
    "\2\34\1\0\1\34\1\0\1\54\3\0\2\34\1\0"+
    "\1\34\1\0\1\34\1\0\1\34\1\0\1\34\1\0"+
    "\1\34\1\0\1\34\1\0\1\34\1\0\1\34\3\0"+
    "\1\34\1\0\1\34\3\0\1\34\1\0\1\34\40\0"+
    "\1\123\16\0\1\124\53\0\1\125\1\0\2\43\1\0"+
    "\1\43\1\0\1\63\3\0\2\43\1\0\1\43\1\0"+
    "\1\43\1\0\1\43\1\0\1\43\1\0\1\43\1\0"+
    "\1\43\1\0\1\43\1\0\1\43\3\0\1\43\1\0"+
    "\1\43\3\0\1\43\1\0\1\43\12\0\1\126\44\0"+
    "\1\43\1\0\2\43\1\0\1\43\1\0\1\127\3\0"+
    "\2\43\1\0\1\43\1\0\1\43\1\0\1\43\1\0"+
    "\1\43\1\0\1\43\1\0\1\43\1\0\1\43\1\0"+
    "\1\43\3\0\1\43\1\0\1\43\3\0\1\43\1\0"+
    "\1\43\42\0\2\130\13\0\1\43\1\0\2\43\1\0"+
    "\1\43\1\0\1\63\3\0\2\43\1\0\1\43\1\0"+
    "\1\43\1\0\1\43\1\0\1\43\1\0\1\43\1\0"+
    "\1\43\1\0\1\43\1\0\1\43\2\0\1\130\1\131"+
    "\1\0\1\43\3\0\1\43\1\0\1\43\3\0\1\132"+
    "\53\0\1\133\1\0\2\43\1\0\1\43\1\0\1\63"+
    "\3\0\2\43\1\0\1\43\1\0\1\43\1\0\1\43"+
    "\1\0\1\43\1\0\1\43\1\0\1\43\1\0\1\43"+
    "\1\0\1\43\3\0\1\43\1\0\1\43\3\0\1\43"+
    "\1\0\1\43\40\0\1\114\6\0\1\134\6\0\2\115"+
    "\1\0\2\115\1\0\1\115\1\0\1\135\3\0\2\115"+
    "\1\0\1\115\1\0\1\115\1\0\1\115\1\0\1\115"+
    "\1\0\1\115\1\0\1\115\1\0\1\115\1\0\2\115"+
    "\2\0\1\115\1\0\1\115\3\0\1\115\1\0\1\115"+
    "\2\0\2\116\1\0\2\116\1\0\1\116\1\0\1\136"+
    "\3\0\2\116\1\0\1\116\1\0\1\116\1\0\1\116"+
    "\1\0\1\116\1\0\1\116\1\0\1\116\1\0\1\116"+
    "\1\0\2\116\2\0\1\116\1\0\1\116\3\0\1\116"+
    "\1\0\1\116\26\0\2\137\27\0\1\34\1\0\2\34"+
    "\1\0\1\34\1\0\1\54\3\0\2\34\1\0\1\34"+
    "\1\0\1\34\1\0\1\34\1\137\1\140\1\0\1\34"+
    "\1\0\1\34\1\0\1\34\1\0\1\34\3\0\1\34"+
    "\1\0\1\34\3\0\1\34\1\0\1\34\10\0\1\141"+
    "\4\0\1\141\6\0\2\35\31\0\1\34\1\0\2\34"+
    "\1\0\1\142\1\0\1\54\2\0\1\141\2\34\1\0"+
    "\1\34\1\0\1\34\1\35\1\36\1\0\1\34\1\0"+
    "\1\34\1\0\1\34\1\0\1\34\1\0\1\34\3\0"+
    "\1\34\1\0\1\34\3\0\1\34\1\0\1\34\40\0"+
    "\1\123\6\0\1\143\14\0\1\144\4\0\1\144\41\0"+
    "\1\43\1\0\2\43\1\0\1\145\1\0\1\63\2\0"+
    "\1\144\2\43\1\0\1\43\1\0\1\43\1\0\1\43"+
    "\1\0\1\43\1\0\1\43\1\0\1\43\1\0\1\43"+
    "\1\0\1\43\3\0\1\43\1\0\1\43\3\0\1\43"+
    "\1\0\1\43\2\0\2\126\1\0\2\126\1\0\1\126"+
    "\1\0\1\146\3\0\2\126\1\0\1\126\1\0\1\126"+
    "\1\0\1\126\1\0\1\126\1\0\1\126\1\0\1\126"+
    "\1\0\1\126\1\0\2\126\2\0\1\126\1\0\1\126"+
    "\3\0\1\126\1\0\1\126\2\0\2\127\1\0\2\127"+
    "\1\0\1\127\1\0\1\147\3\0\2\127\1\0\1\127"+
    "\1\0\1\127\1\0\1\127\1\0\1\127\1\0\1\127"+
    "\1\0\1\127\1\0\1\127\1\0\2\127\2\0\1\127"+
    "\1\0\1\127\3\0\1\127\1\0\1\127\26\0\2\150"+
    "\27\0\1\43\1\0\2\43\1\0\1\43\1\0\1\63"+
    "\3\0\2\43\1\0\1\43\1\0\1\43\1\0\1\43"+
    "\1\150\1\151\1\0\1\43\1\0\1\43\1\0\1\43"+
    "\1\0\1\43\3\0\1\43\1\0\1\43\3\0\1\43"+
    "\1\0\1\43\10\0\1\152\4\0\1\152\6\0\2\46"+
    "\31\0\1\43\1\0\2\43\1\0\1\153\1\0\1\63"+
    "\2\0\1\152\2\43\1\0\1\43\1\0\1\43\1\46"+
    "\1\47\1\0\1\43\1\0\1\43\1\0\1\43\1\0"+
    "\1\43\1\0\1\43\3\0\1\43\1\0\1\43\3\0"+
    "\1\43\1\0\1\43\40\0\1\154\53\0\1\155\35\0"+
    "\2\156\33\0\1\34\1\0\2\34\1\0\1\34\1\0"+
    "\1\54\3\0\2\34\1\0\1\34\1\156\1\157\1\0"+
    "\1\34\1\0\1\34\1\0\1\34\1\0\1\34\1\0"+
    "\1\34\1\0\1\34\3\0\1\34\1\0\1\34\3\0"+
    "\1\34\1\0\1\34\20\0\2\160\35\0\1\34\1\0"+
    "\2\34\1\0\1\34\1\0\1\54\3\0\2\34\1\160"+
    "\1\161\1\0\1\34\1\0\1\34\1\0\1\34\1\0"+
    "\1\34\1\0\1\34\1\0\1\34\1\0\1\34\3\0"+
    "\1\34\1\0\1\34\3\0\1\34\1\0\1\34\46\162"+
    "\1\0\5\162\20\0\2\163\35\0\1\43\1\0\2\43"+
    "\1\0\1\43\1\0\1\63\3\0\2\43\1\163\1\164"+
    "\1\0\1\43\1\0\1\43\1\0\1\43\1\0\1\43"+
    "\1\0\1\43\1\0\1\43\1\0\1\43\3\0\1\43"+
    "\1\0\1\43\3\0\1\43\1\0\1\43\40\0\1\165"+
    "\53\0\1\166\35\0\2\167\33\0\1\43\1\0\2\43"+
    "\1\0\1\43\1\0\1\63\3\0\2\43\1\0\1\43"+
    "\1\167\1\170\1\0\1\43\1\0\1\43\1\0\1\43"+
    "\1\0\1\43\1\0\1\43\1\0\1\43\3\0\1\43"+
    "\1\0\1\43\3\0\1\43\1\0\1\43\20\0\2\171"+
    "\35\0\1\43\1\0\2\43\1\0\1\43\1\0\1\63"+
    "\3\0\2\43\1\171\1\172\1\0\1\43\1\0\1\43"+
    "\1\0\1\43\1\0\1\43\1\0\1\43\1\0\1\43"+
    "\1\0\1\43\3\0\1\43\1\0\1\43\3\0\1\43"+
    "\1\0\1\43\40\0\1\154\6\0\1\173\44\0\1\155"+
    "\6\0\1\174\7\0\1\175\53\0\1\176\1\0\2\34"+
    "\1\0\1\34\1\0\1\54\3\0\2\34\1\0\1\34"+
    "\1\0\1\34\1\0\1\34\1\0\1\34\1\0\1\34"+
    "\1\0\1\34\1\0\1\34\1\0\1\34\3\0\1\34"+
    "\1\0\1\34\3\0\1\34\1\0\1\34\24\0\2\177"+
    "\31\0\1\34\1\0\2\34\1\0\1\34\1\0\1\54"+
    "\3\0\2\34\1\0\1\34\1\0\1\34\1\177\1\200"+
    "\1\0\1\34\1\0\1\34\1\0\1\34\1\0\1\34"+
    "\1\0\1\34\3\0\1\34\1\0\1\34\3\0\1\34"+
    "\1\0\1\34\46\162\1\201\5\162\24\0\2\202\31\0"+
    "\1\43\1\0\2\43\1\0\1\43\1\0\1\63\3\0"+
    "\2\43\1\0\1\43\1\0\1\43\1\202\1\203\1\0"+
    "\1\43\1\0\1\43\1\0\1\43\1\0\1\43\1\0"+
    "\1\43\3\0\1\43\1\0\1\43\3\0\1\43\1\0"+
    "\1\43\40\0\1\165\6\0\1\204\44\0\1\166\6\0"+
    "\1\205\7\0\1\206\53\0\1\207\1\0\2\43\1\0"+
    "\1\43\1\0\1\63\3\0\2\43\1\0\1\43\1\0"+
    "\1\43\1\0\1\43\1\0\1\43\1\0\1\43\1\0"+
    "\1\43\1\0\1\43\1\0\1\43\3\0\1\43\1\0"+
    "\1\43\3\0\1\43\1\0\1\43\24\0\2\210\31\0"+
    "\1\43\1\0\2\43\1\0\1\43\1\0\1\63\3\0"+
    "\2\43\1\0\1\43\1\0\1\43\1\210\1\211\1\0"+
    "\1\43\1\0\1\43\1\0\1\43\1\0\1\43\1\0"+
    "\1\43\3\0\1\43\1\0\1\43\3\0\1\43\1\0"+
    "\1\43\46\212\1\0\5\212\24\0\2\213\31\0\1\34"+
    "\1\0\2\34\1\0\1\34\1\0\1\54\3\0\2\34"+
    "\1\0\1\34\1\0\1\34\1\213\1\214\1\0\1\34"+
    "\1\0\1\34\1\0\1\34\1\0\1\34\1\0\1\34"+
    "\3\0\1\34\1\0\1\34\3\0\1\34\1\0\1\34"+
    "\32\0\2\215\23\0\1\34\1\0\2\34\1\0\1\34"+
    "\1\0\1\54\3\0\2\34\1\0\1\34\1\0\1\34"+
    "\1\0\1\34\1\0\1\34\1\0\1\34\1\215\1\216"+
    "\1\0\1\34\1\0\1\34\3\0\1\34\1\0\1\34"+
    "\3\0\1\34\1\0\1\34\41\0\1\217\44\0\2\220"+
    "\23\0\1\43\1\0\2\43\1\0\1\43\1\0\1\63"+
    "\3\0\2\43\1\0\1\43\1\0\1\43\1\0\1\43"+
    "\1\0\1\43\1\0\1\43\1\220\1\221\1\0\1\43"+
    "\1\0\1\43\3\0\1\43\1\0\1\43\3\0\1\43"+
    "\1\0\1\43\46\222\1\0\5\222\46\223\1\0\5\223"+
    "\24\0\2\46\31\0\1\43\1\0\2\43\1\0\1\43"+
    "\1\0\1\63\3\0\2\43\1\0\1\43\1\0\1\43"+
    "\1\46\1\47\1\0\1\43\1\0\1\43\1\0\1\43"+
    "\1\0\1\43\1\0\1\43\3\0\1\43\1\0\1\43"+
    "\3\0\1\43\1\0\1\43\32\0\2\224\23\0\1\43"+
    "\1\0\2\43\1\0\1\43\1\0\1\63\3\0\2\43"+
    "\1\0\1\43\1\0\1\43\1\0\1\43\1\0\1\43"+
    "\1\0\1\43\1\224\1\225\1\0\1\43\1\0\1\43"+
    "\3\0\1\43\1\0\1\43\3\0\1\43\1\0\1\43"+
    "\46\212\1\226\5\212\26\0\2\227\27\0\1\34\1\0"+
    "\2\34\1\0\1\34\1\0\1\54\3\0\2\34\1\0"+
    "\1\34\1\0\1\34\1\0\1\34\1\227\1\230\1\0"+
    "\1\34\1\0\1\34\1\0\1\34\1\0\1\34\3\0"+
    "\1\34\1\0\1\34\3\0\1\34\1\0\1\34\34\0"+
    "\2\231\21\0\1\34\1\0\2\34\1\0\1\34\1\0"+
    "\1\54\3\0\2\34\1\0\1\34\1\0\1\34\1\0"+
    "\1\34\1\0\1\34\1\0\1\34\1\0\1\34\1\231"+
    "\1\232\1\0\1\34\3\0\1\34\1\0\1\34\3\0"+
    "\1\34\1\0\1\34\42\0\2\233\44\0\2\234\21\0"+
    "\1\43\1\0\2\43\1\0\1\43\1\0\1\63\3\0"+
    "\2\43\1\0\1\43\1\0\1\43\1\0\1\43\1\0"+
    "\1\43\1\0\1\43\1\0\1\43\1\234\1\235\1\0"+
    "\1\43\3\0\1\43\1\0\1\43\3\0\1\43\1\0"+
    "\1\43\46\222\1\236\5\222\46\223\1\237\5\223\34\0"+
    "\2\240\21\0\1\43\1\0\2\43\1\0\1\43\1\0"+
    "\1\63\3\0\2\43\1\0\1\43\1\0\1\43\1\0"+
    "\1\43\1\0\1\43\1\0\1\43\1\0\1\43\1\240"+
    "\1\241\1\0\1\43\3\0\1\43\1\0\1\43\3\0"+
    "\1\43\1\0\1\43\41\0\1\242\62\0\2\243\5\0"+
    "\1\34\1\0\2\34\1\0\1\34\1\0\1\54\3\0"+
    "\2\34\1\0\1\34\1\0\1\34\1\0\1\34\1\0"+
    "\1\34\1\0\1\34\1\0\1\34\1\0\1\34\1\0"+
    "\1\34\3\0\1\34\1\0\1\34\2\0\1\243\1\244"+
    "\1\0\1\34\32\0\2\245\23\0\1\34\1\0\2\34"+
    "\1\0\1\34\1\0\1\54\3\0\2\34\1\0\1\34"+
    "\1\0\1\34\1\0\1\34\1\0\1\34\1\0\1\34"+
    "\1\245\1\246\1\0\1\34\1\0\1\34\3\0\1\34"+
    "\1\0\1\34\3\0\1\34\1\0\1\34\44\0\2\247"+
    "\40\0\2\250\23\0\1\43\1\0\2\43\1\0\1\43"+
    "\1\0\1\63\3\0\2\43\1\0\1\43\1\0\1\43"+
    "\1\0\1\43\1\0\1\43\1\0\1\43\1\250\1\251"+
    "\1\0\1\43\1\0\1\43\3\0\1\43\1\0\1\43"+
    "\3\0\1\43\1\0\1\43\41\0\1\252\53\0\1\253"+
    "\44\0\2\254\23\0\1\43\1\0\2\43\1\0\1\43"+
    "\1\0\1\63\3\0\2\43\1\0\1\43\1\0\1\43"+
    "\1\0\1\43\1\0\1\43\1\0\1\43\1\254\1\255"+
    "\1\0\1\43\1\0\1\43\3\0\1\43\1\0\1\43"+
    "\3\0\1\43\1\0\1\43\42\0\2\256\22\0\1\257"+
    "\44\0\1\34\1\0\2\34\1\0\1\34\1\0\1\260"+
    "\3\0\2\34\1\0\1\34\1\0\1\34\1\0\1\34"+
    "\1\0\1\34\1\0\1\34\1\0\1\34\1\0\1\34"+
    "\1\0\1\34\3\0\1\34\1\0\1\34\3\0\1\34"+
    "\1\0\1\34\34\0\2\261\21\0\1\34\1\0\2\34"+
    "\1\0\1\34\1\0\1\54\3\0\2\34\1\0\1\34"+
    "\1\0\1\34\1\0\1\34\1\0\1\34\1\0\1\34"+
    "\1\0\1\34\1\261\1\262\1\0\1\34\3\0\1\34"+
    "\1\0\1\34\3\0\1\34\1\0\1\34\5\0\1\263"+
    "\5\0\1\263\74\0\2\264\21\0\1\43\1\0\2\43"+
    "\1\0\1\43\1\0\1\63\3\0\2\43\1\0\1\43"+
    "\1\0\1\43\1\0\1\43\1\0\1\43\1\0\1\43"+
    "\1\0\1\43\1\264\1\265\1\0\1\43\3\0\1\43"+
    "\1\0\1\43\3\0\1\43\1\0\1\43\42\0\2\266"+
    "\52\0\2\267\44\0\2\270\21\0\1\43\1\0\2\43"+
    "\1\0\1\43\1\0\1\63\3\0\2\43\1\0\1\43"+
    "\1\0\1\43\1\0\1\43\1\0\1\43\1\0\1\43"+
    "\1\0\1\43\1\270\1\271\1\0\1\43\3\0\1\43"+
    "\1\0\1\43\3\0\1\43\1\0\1\43\44\0\2\272"+
    "\10\0\2\257\1\0\2\257\1\0\1\257\1\0\1\273"+
    "\3\0\2\257\1\0\1\257\1\0\1\257\1\0\1\257"+
    "\1\0\1\257\1\0\1\257\1\0\1\257\1\0\1\257"+
    "\1\0\2\257\2\0\1\257\1\0\1\257\3\0\1\257"+
    "\1\0\1\257\2\0\2\260\1\0\2\260\1\0\1\260"+
    "\1\0\1\274\3\0\2\260\1\0\1\260\1\0\1\260"+
    "\1\0\1\260\1\0\1\260\1\0\1\260\1\0\1\260"+
    "\1\0\1\260\1\0\2\260\2\0\1\260\1\0\1\260"+
    "\3\0\1\260\1\0\1\260\36\0\2\275\17\0\1\34"+
    "\1\0\2\34\1\0\1\34\1\0\1\54\3\0\2\34"+
    "\1\0\1\34\1\0\1\34\1\0\1\34\1\0\1\34"+
    "\1\0\1\34\1\0\1\34\1\0\1\34\1\275\1\276"+
    "\3\0\1\34\1\0\1\34\3\0\1\34\1\0\1\34"+
    "\47\0\1\277\42\0\2\300\17\0\1\43\1\0\2\43"+
    "\1\0\1\43\1\0\1\63\3\0\2\43\1\0\1\43"+
    "\1\0\1\43\1\0\1\43\1\0\1\43\1\0\1\43"+
    "\1\0\1\43\1\0\1\43\1\300\1\301\3\0\1\43"+
    "\1\0\1\43\3\0\1\43\1\0\1\43\44\0\2\302"+
    "\52\0\2\303\44\0\2\304\17\0\1\43\1\0\2\43"+
    "\1\0\1\43\1\0\1\63\3\0\2\43\1\0\1\43"+
    "\1\0\1\43\1\0\1\43\1\0\1\43\1\0\1\43"+
    "\1\0\1\43\1\0\1\43\1\304\1\305\3\0\1\43"+
    "\1\0\1\43\3\0\1\43\1\0\1\43\5\0\1\306"+
    "\5\0\1\306\100\0\1\307\53\0\1\310\20\0\1\311"+
    "\5\0\1\311\43\0\1\34\1\0\1\312\1\34\1\0"+
    "\1\34\1\0\1\54\1\311\2\0\2\34\1\0\1\34"+
    "\1\0\1\34\1\0\1\34\1\0\1\34\1\0\1\34"+
    "\1\0\1\34\1\0\1\34\1\0\1\34\3\0\1\34"+
    "\1\0\1\34\3\0\1\34\1\0\1\34\5\0\1\313"+
    "\5\0\1\313\43\0\1\43\1\0\1\314\1\43\1\0"+
    "\1\43\1\0\1\63\1\313\2\0\2\43\1\0\1\43"+
    "\1\0\1\43\1\0\1\43\1\0\1\43\1\0\1\43"+
    "\1\0\1\43\1\0\1\43\1\0\1\43\3\0\1\43"+
    "\1\0\1\43\3\0\1\43\1\0\1\43\5\0\1\315"+
    "\5\0\1\315\45\0\1\316\5\0\1\316\45\0\1\317"+
    "\5\0\1\317\43\0\1\43\1\0\1\320\1\43\1\0"+
    "\1\43\1\0\1\63\1\317\2\0\2\43\1\0\1\43"+
    "\1\0\1\43\1\0\1\43\1\0\1\43\1\0\1\43"+
    "\1\0\1\43\1\0\1\43\1\0\1\43\3\0\1\43"+
    "\1\0\1\43\3\0\1\43\1\0\1\43\47\0\1\321"+
    "\44\0\1\307\6\0\1\322\44\0\1\310\6\0\1\323"+
    "\16\0\1\324\44\0\1\34\1\0\2\34\1\0\1\34"+
    "\1\0\1\325\3\0\2\34\1\0\1\34\1\0\1\34"+
    "\1\0\1\34\1\0\1\34\1\0\1\34\1\0\1\34"+
    "\1\0\1\34\1\0\1\34\3\0\1\34\1\0\1\34"+
    "\3\0\1\34\1\0\1\34\12\0\1\326\44\0\1\43"+
    "\1\0\2\43\1\0\1\43\1\0\1\326\3\0\2\43"+
    "\1\0\1\43\1\0\1\43\1\0\1\43\1\0\1\43"+
    "\1\0\1\43\1\0\1\43\1\0\1\43\1\0\1\43"+
    "\3\0\1\43\1\0\1\43\3\0\1\43\1\0\1\43"+
    "\47\0\1\327\53\0\1\330\16\0\1\331\44\0\1\43"+
    "\1\0\2\43\1\0\1\43\1\0\1\331\3\0\2\43"+
    "\1\0\1\43\1\0\1\43\1\0\1\43\1\0\1\43"+
    "\1\0\1\43\1\0\1\43\1\0\1\43\1\0\1\43"+
    "\3\0\1\43\1\0\1\43\3\0\1\43\1\0\1\43"+
    "\1\0\3\321\1\332\4\0\2\321\33\0\1\333\5\0"+
    "\46\334\1\0\5\334\2\0\2\324\1\0\2\324\1\0"+
    "\1\324\1\0\1\335\3\0\2\324\1\0\1\324\1\0"+
    "\1\324\1\0\1\324\1\0\1\324\1\0\1\324\1\0"+
    "\1\324\1\0\1\324\1\0\2\324\2\0\1\324\1\0"+
    "\1\324\3\0\1\324\1\0\1\324\2\0\2\325\1\0"+
    "\2\325\1\0\1\325\1\0\1\336\3\0\2\325\1\0"+
    "\1\325\1\0\1\325\1\0\1\325\1\0\1\325\1\0"+
    "\1\325\1\0\1\325\1\0\1\325\1\0\2\325\2\0"+
    "\1\325\1\0\1\325\3\0\1\325\1\0\1\325\2\0"+
    "\2\326\1\0\2\326\1\0\1\326\1\0\1\337\3\0"+
    "\2\326\1\0\1\326\1\0\1\326\1\0\1\326\1\0"+
    "\1\326\1\0\1\326\1\0\1\326\1\0\1\326\1\0"+
    "\2\326\2\0\1\326\1\0\1\326\3\0\1\326\1\0"+
    "\1\326\1\0\3\327\1\340\4\0\2\327\33\0\1\341"+
    "\7\0\2\331\1\0\2\331\1\0\1\331\1\0\1\342"+
    "\3\0\2\331\1\0\1\331\1\0\1\331\1\0\1\331"+
    "\1\0\1\331\1\0\1\331\1\0\1\331\1\0\1\331"+
    "\1\0\2\331\2\0\1\331\1\0\1\331\3\0\1\331"+
    "\1\0\1\331\5\0\1\343\5\0\1\343\102\0\2\344"+
    "\10\0\46\334\1\345\5\334\40\0\1\346\53\0\1\347"+
    "\53\0\1\350\20\0\1\351\5\0\1\351\102\0\2\352"+
    "\50\0\1\353\21\0\1\354\5\0\1\354\103\0\2\355"+
    "\47\0\1\356\52\0\1\346\6\0\1\357\44\0\1\347"+
    "\6\0\1\360\44\0\1\350\6\0\1\361\12\0\1\362"+
    "\5\0\1\362\103\0\2\363\46\0\1\353\6\0\1\364"+
    "\13\0\1\365\7\0\1\365\41\0\1\366\5\0\1\366"+
    "\102\0\2\367\10\0\46\370\1\0\5\370\46\371\1\0"+
    "\5\371\7\0\1\372\7\0\1\372\41\0\1\373\5\0"+
    "\1\373\40\0\46\374\1\0\5\374\10\0\1\375\4\0"+
    "\1\375\50\0\1\376\105\0\2\377\6\0\46\370\1\u0100"+
    "\5\370\46\371\1\u0101\5\371\10\0\1\u0102\4\0\1\u0102"+
    "\50\0\1\u0103\41\0\46\374\1\u0104\5\374\11\0\1\321"+
    "\51\0\1\u0105\7\0\1\u0105\22\0\2\u0106\15\0\1\u0107"+
    "\5\0\1\u0107\101\0\1\u0108\53\0\1\u0109\23\0\1\327"+
    "\51\0\1\u010a\7\0\1\u010a\22\0\2\u010b\51\0\1\u010c"+
    "\44\0\2\u010d\46\0\2\u010e\73\0\1\u010f\46\0\2\u0110"+
    "\52\0\2\u0111\42\0\2\u0112\46\0\2\u0113\66\0\2\u0114"+
    "\20\0\1\u0115\4\0\1\u0115\60\0\2\u0116\31\0\3\u010f"+
    "\1\u0117\4\0\2\u010f\33\0\1\u0118\51\0\2\u0119\52\0"+
    "\2\u011a\16\0\1\u011b\4\0\1\u011b\60\0\2\u011c\74\0"+
    "\2\u011d\60\0\2\75\3\0\1\u011e\55\0\1\u011f\5\0"+
    "\1\u011f\102\0\2\u0120\15\0\1\u0121\5\0\1\u0121\45\0"+
    "\1\u0122\5\0\1\u0122\112\0\2\106\3\0\1\u0123\55\0"+
    "\1\u0124\5\0\1\u0124\50\0\1\u0125\4\0\1\u0125\44\0"+
    "\1\u0126\5\0\1\u0126\103\0\2\u0127\55\0\1\u0128\53\0"+
    "\1\u0129\14\0\1\u012a\4\0\1\u012a\105\0\1\u012b\24\0"+
    "\2\u012c\41\0\1\u012d\7\0\1\u012d\41\0\1\u012e\5\0"+
    "\1\u012e\41\0\3\u0128\1\u012f\4\0\2\u0128\33\0\1\u0130"+
    "\6\0\3\u0131\1\u0132\4\0\2\u0131\33\0\1\u0133\25\0"+
    "\2\u0134\56\0\2\u0135\36\0\1\u0136\4\0\1\u0136\50\0"+
    "\1\u0137\46\0\1\u0138\5\0\1\u0138\102\0\2\u0139\15\0"+
    "\1\u013a\5\0\1\u013a\102\0\2\u013b\34\0\2\u013c\60\0"+
    "\2\u013d\31\0\1\u010f\51\0\1\u013e\7\0\1\u013e\22\0"+
    "\2\u013f\16\0\1\u0140\5\0\1\u0140\103\0\2\u0141\14\0"+
    "\1\u0142\5\0\1\u0142\103\0\2\u0143\40\0\2\u0144\54\0"+
    "\2\u0145\50\0\2\u0146\46\0\2\u0147\33\0\1\u0148\7\0"+
    "\1\u0148\41\0\1\u0149\5\0\1\u0149\47\0\1\u014a\7\0"+
    "\1\u014a\41\0\1\u014b\5\0\1\u014b\74\0\2\u014c\50\0"+
    "\2\u014d\30\0\1\u014e\4\0\1\u014e\60\0\2\u014f\40\0"+
    "\1\u0150\4\0\1\u0150\50\0\1\u0151\51\0\1\u0152\4\0"+
    "\1\u0152\50\0\1\u0153\73\0\2\u0154\54\0\2\u0155\70\0"+
    "\2\243\3\0\1\u0156\61\0\1\u0128\51\0\1\u0157\7\0"+
    "\1\u0157\4\0\2\u0158\2\u0159\12\0\2\u015a\21\0\1\u0131"+
    "\51\0\1\u015b\7\0\1\u015b\4\0\2\u015c\2\u015d\12\0"+
    "\2\u015e\44\0\2\u015f\54\0\2\u0160\24\0\1\u0161\4\0"+
    "\1\u0161\70\0\2\u0162\46\0\2\u0163\54\0\2\u0164\50\0"+
    "\2\u0165\56\0\2\u0166\46\0\2\u0167\54\0\2\u0168\50\0"+
    "\2\u0169\62\0\2\u016a\21\0\1\u016b\5\0\1\u016b\60\0"+
    "\2\u016c\42\0\1\u016d\4\0\1\u016d\106\0\2\u016e\5\0"+
    "\1\u016f\72\0\2\u0170\40\0\1\u0171\4\0\1\u0171\106\0"+
    "\2\u0172\5\0\1\u0173\72\0\2\u0174\35\0\1\u0175\5\0"+
    "\1\u0175\52\0\1\u0176\65\0\2\u0177\100\0\2\311\12\0"+
    "\1\u0178\103\0\2\u0179\13\0\1\u017a\122\0\2\u017b\12\0"+
    "\1\u017c\103\0\2\u015e\13\0\1\u017d\62\0\1\u017e\43\0"+
    "\2\u0176\1\0\2\u0176\1\0\1\u0176\1\0\1\u017f\3\0"+
    "\2\u0176\1\0\1\u0176\1\0\1\u0176\1\0\1\u0176\1\0"+
    "\1\u0176\1\0\1\u0176\1\0\1\u0176\1\0\1\u0176\1\0"+
    "\2\u0176\2\0\1\u0176\1\0\1\u0176\3\0\1\u0176\1\0"+
    "\1\u0176\32\0\2\u0180\22\0\2\u0178\1\0\2\u0178\1\0"+
    "\1\u0178\1\0\1\u0181\3\0\2\u0178\1\0\1\u0178\1\0"+
    "\1\u0178\1\0\1\u0178\1\0\1\u0178\1\0\1\u0178\1\0"+
    "\1\u0178\1\0\1\u0178\1\0\2\u0178\2\0\1\u0178\1\0"+
    "\1\u0178\3\0\1\u0178\1\0\1\u0178\26\0\2\u0182\34\0"+
    "\1\141\4\0\1\141\6\0\2\u0158\40\0\1\u0183\43\0"+
    "\2\u017c\1\0\2\u017c\1\0\1\u017c\1\0\1\u0184\3\0"+
    "\2\u017c\1\0\1\u017c\1\0\1\u017c\1\0\1\u017c\1\0"+
    "\1\u017c\1\0\1\u017c\1\0\1\u017c\1\0\1\u017c\1\0"+
    "\2\u017c\2\0\1\u017c\1\0\1\u017c\3\0\1\u017c\1\0"+
    "\1\u017c\24\0\2\u015c\30\0\2\u017e\1\0\2\u017e\1\0"+
    "\1\u017e\1\0\1\u0185\3\0\2\u017e\1\0\1\u017e\1\0"+
    "\1\u017e\1\0\1\u017e\1\0\1\u017e\1\0\1\u017e\1\0"+
    "\1\u017e\1\0\1\u017e\1\0\2\u017e\2\0\1\u017e\1\0"+
    "\1\u017e\3\0\1\u017e\1\0\1\u017e\40\0\1\u0186\47\0"+
    "\2\u0187\56\0\1\u0188\35\0\2\u0189\32\0\2\u0183\1\0"+
    "\2\u0183\1\0\1\u0183\1\0\1\u018a\3\0\2\u0183\1\0"+
    "\1\u0183\1\0\1\u0183\1\0\1\u0183\1\0\1\u0183\1\0"+
    "\1\u0183\1\0\1\u0183\1\0\1\u0183\1\0\2\u0183\2\0"+
    "\1\u0183\1\0\1\u0183\3\0\1\u0183\1\0\1\u0183\40\0"+
    "\1\u018b\53\0\1\u018c\53\0\1\u0186\6\0\1\u018d\36\0"+
    "\2\u018e\60\0\1\u0188\6\0\1\u018f\7\0\1\u0190\110\0"+
    "\1\u0191\53\0\1\u018b\6\0\1\u0192\44\0\1\u018c\6\0"+
    "\1\u0193\4\0\46\u0194\1\0\5\u0194\34\0\2\u0195\16\0"+
    "\46\u0196\1\0\5\u0196\24\0\2\u0197\66\0\1\u0191\6\0"+
    "\1\u0198\4\0\46\u0199\1\0\5\u0199\46\u019a\1\0\5\u019a"+
    "\46\u0194\1\u019b\5\u0194\36\0\2\u019c\14\0\46\u0196\1\u019d"+
    "\5\u0196\26\0\2\u019e\24\0\46\u019f\1\0\5\u019f\46\u0199"+
    "\1\u01a0\5\u0199\46\u019a\1\u01a1\5\u019a\41\0\1\u01a2\17\0"+
    "\1\u01a3\5\0\1\u01a3\101\0\1\u01a4\62\0\2\u01a5\2\0"+
    "\46\u019f\1\u01a6\5\u019f\41\0\1\u01a7\53\0\1\u01a8\54\0"+
    "\2\u01a9\22\0\1\u01aa\103\0\2\u01ab\22\0\1\u01ac\102\0"+
    "\1\u01ad\54\0\2\u01ae\52\0\2\u01af\54\0\2\u01b0\10\0"+
    "\2\u01aa\1\0\2\u01aa\1\0\1\u01aa\1\0\1\u01b1\3\0"+
    "\2\u01aa\1\0\1\u01aa\1\0\1\u01aa\1\0\1\u01aa\1\0"+
    "\1\u01aa\1\0\1\u01aa\1\0\1\u01aa\1\0\1\u01aa\1\0"+
    "\2\u01aa\2\0\1\u01aa\1\0\1\u01aa\3\0\1\u01aa\1\0"+
    "\1\u01aa\44\0\2\u01b2\10\0\2\u01ac\1\0\2\u01ac\1\0"+
    "\1\u01ac\1\0\1\u01b3\3\0\2\u01ac\1\0\1\u01ac\1\0"+
    "\1\u01ac\1\0\1\u01ac\1\0\1\u01ac\1\0\1\u01ac\1\0"+
    "\1\u01ac\1\0\1\u01ac\1\0\2\u01ac\2\0\1\u01ac\1\0"+
    "\1\u01ac\3\0\1\u01ac\1\0\1\u01ac\42\0\2\u01b4\54\0"+
    "\2\u01b5\52\0\2\u01b6\13\0\1\u01b7\5\0\1\u01b7\100\0"+
    "\1\u01b8\20\0\1\u01b9\5\0\1\u01b9\100\0\1\u01ba\57\0"+
    "\2\u01bb\13\0\1\u01bc\5\0\1\u01bc\45\0\1\u01bd\5\0"+
    "\1\u01bd\107\0\1\u01be\44\0\1\u01b8\6\0\1\u01bf\53\0"+
    "\1\u01c0\44\0\1\u01ba\6\0\1\u01c1\11\0\1\u01c2\5\0"+
    "\1\u01c2\107\0\1\u01c3\53\0\1\u01c4\4\0\46\u01c5\1\0"+
    "\5\u01c5\46\u01c6\1\0\5\u01c6\47\0\1\u0131\4\0\46\u01c5"+
    "\1\u01c7\5\u01c5\46\u01c6\1\u01c8\5\u01c6\41\0\1\u01c9\53\0"+
    "\1\u01ca\54\0\2\u01cb\52\0\2\u01cc\54\0\2\u01cd\52\0"+
    "\2\u01ce\13\0\1\u01cf\5\0\1\u01cf\45\0\1\u01d0\5\0"+
    "\1\u01d0\107\0\1\u01d1\53\0\1\u01d2\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19756];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\1\1\1\11\1\1\1\11\2\1\15\0"+
    "\1\11\102\0\1\11\37\0\1\1\102\0\1\11\23\0"+
    "\1\1\4\0\1\1\27\0\1\1\70\0\1\1\1\0"+
    "\1\11\222\0\1\1\1\0\1\11\2\0\2\11\14\0"+
    "\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[466];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	
	/* Custom java code */

    @Override
	public String language() { return "IT"; }

	@Override
	public String version() { return "0.4"; }


	/* An empty default constructor is required to comply with LinkolnService */
	
	public AddPartitionsToReferences() { }
	
	@Override
	public final boolean run() {
		
		try {
			
			yyreset(new StringReader(getInput()));
			yylex();
			
		} catch (IOException e) {

			e.printStackTrace();
			return false;
		}
		
		return true;
	}
	
	@Override
	protected void addValue() {
	
		//annotationEntity.setValue("value");
	} 
	
	private AnnotationEntity retrievedReference = null;
	
	boolean isEuropeanReference = false;

	private void readReference() {
	
		String name = "[LKN:LEG_REF:";
		int start = yytext().indexOf(name);
		
		if(start == -1) {
			
			name = "[LKN:EU_LEG_REF:";
			start = yytext().indexOf(name);
		}
	
		if(start == -1) {
			
			name = "[LKN:REF:";
			start = yytext().indexOf(name);
		}
	
		retrievedReference = retrieveEntity(yytext().substring(start));
	}

	private AnnotationEntity readPartition() {
	
		String name = "[LKN:LEG_PARTITION:";
		int start = yytext().indexOf(name);
		
		return retrieveEntity(yytext().substring(start));
	}
	


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AddPartitionsToReferences(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 382) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { addText(yytext());
	position++;
            } 
            // fall through
          case 14: break;
          case 2: 
            { addText(yytext());
		position++;
            } 
            // fall through
          case 15: break;
          case 3: 
            { checkEnd();
            } 
            // fall through
          case 16: break;
          case 4: 
            { addText(yytext());
		position--; //account for the following {LKN_C} character
		yybegin(YYINITIAL);
            } 
            // fall through
          case 17: break;
          case 5: 
            { addText(yytext()); 
	yybegin(lkn);
            } 
            // fall through
          case 18: break;
          case 6: 
            { addText(yytext());
		offset += yylength();
            } 
            // fall through
          case 19: break;
          case 7: 
            { AnnotationEntity retrievedPartition = retrieveEntity(yytext());
		
		LegislationReference legRef = new LegislationReference();
		if(isEuropeanReference) legRef = new EuropeanLegislationReference();
		legRef.setPosition(retrievedPartition.getPosition());
		legRef.setText(retrievedPartition.getText());
		
		for(AnnotationEntity relEnt : retrievedReference.getRelatedEntities()) {
		
			legRef.addRelatedEntity(relEnt);
			//Non aggiungere l'inversa altrimenti viene sovrascritta la reference originale?
		}
	
		legRef.addRelatedEntity(retrievedPartition);
		retrievedPartition.addRelatedEntity(legRef);
		
		addEntity(legRef);
	
		offset += yylength();
            } 
            // fall through
          case 20: break;
          case 8: 
            { //System.out.println("AddPartToRef pattern2: " + yytext());
	
	isEuropeanReference = false;
	retrievedReference = null;
	readReference();
	offset = 0;
	length = yylength();
	yypushback(length);
	yybegin(convertPartitionDescState);
            } 
            // fall through
          case 21: break;
          case 9: 
            { //System.out.println("AddPartToRef pattern1: " + yytext());

	isEuropeanReference = false;
	retrievedReference = null;
	readReference();
	offset = 0;
	length = yylength();
	yypushback(length);
	yybegin(convertPartitionAscState);
            } 
            // fall through
          case 22: break;
          case 10: 
            { AnnotationEntity retrievedPartition = retrieveEntity(yytext());
		
		//Aggiorna la precedente annotazione Reference
		retrievedReference.setPosition(retrievedPartition.getPosition());
		retrievedReference.setText(Util.removeAllAnnotations(yytext()));
		
		retrievedReference.addRelatedEntity(retrievedPartition);
		retrievedPartition.addRelatedEntity(retrievedReference);
		
		addEntity(retrievedReference);
		
		offset += yylength();
            } 
            // fall through
          case 23: break;
          case 11: 
            { AnnotationEntity retrievedPartition = readPartition();
		
		//Aggiorna la precedente annotazione Reference
		retrievedReference.setText(Util.removeAllAnnotations(yytext()));
		
		retrievedReference.addRelatedEntity(retrievedPartition);
		retrievedPartition.addRelatedEntity(retrievedReference);
		
		addEntity(retrievedReference);
		
		offset += yylength();
            } 
            // fall through
          case 24: break;
          case 12: 
            { //System.out.println("AddPartToRef pattern2: " + yytext());
	
	isEuropeanReference = true;
	retrievedReference = null;
	readReference();
	offset = 0;
	length = yylength();
	yypushback(length);
	yybegin(convertPartitionDescState);
            } 
            // fall through
          case 25: break;
          case 13: 
            { isEuropeanReference = true;
	retrievedReference = null;
	readReference();
	offset = 0;
	length = yylength();
	yypushback(length);
	yybegin(convertPartitionAscState);
            } 
            // fall through
          case 26: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java AddPartitionsToReferences [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        AddPartitionsToReferences scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new AddPartitionsToReferences(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
