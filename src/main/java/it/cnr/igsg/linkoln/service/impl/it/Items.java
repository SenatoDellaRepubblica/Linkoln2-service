/* The following code was generated by JFlex 1.7.0 */

/*******************************************************************************
 * Copyright (c) 2016-2021 Institute of Legal Information and Judicial Systems IGSG-CNR (formerly ITTIG-CNR)
 * 
 * This program and the accompanying materials  are made available under the terms of the GNU General Public
 * License as published by the Free Software Foundation; either version 3 of the License, or (at your option)
 * any later version. 
 * You may not use this work except in compliance with the Licence.
 * You may obtain a copy of the Licence at: https://www.gnu.org/licenses/gpl-3.0.txt
 * Unless required by applicable law or agreed to in writing, software distributed under the Licence is 
 * distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the Licence for the specific language governing permissions and limitations under the Licence.
 *  
 * Authors: Lorenzo Bacci (IGSG-CNR)
 ******************************************************************************/
 package it.cnr.igsg.linkoln.service.impl.it;

import java.io.IOException;
import java.io.StringReader;

import it.cnr.igsg.linkoln.entity.*;
import it.cnr.igsg.linkoln.service.*;

import it.cnr.igsg.linkoln.service.impl.Util;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>jflex/Items.jflex</tt>
 */
public class Items extends LinkolnAnnotationService {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int lkn = 2;
  public static final int readItemState = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\1\1\0\1\1\1\1\22\0\1\1\5\0\1\4"+
    "\1\0\1\0\1\0\2\0\1\1\1\2\1\0\1\43\1\42\1\42"+
    "\1\42\1\42\1\42\1\42\1\42\1\42\1\42\1\42\1\12\1\11"+
    "\5\0\1\21\1\6\1\31\1\51\1\27\1\16\1\23\1\61\1\37"+
    "\1\16\1\53\1\47\1\45\1\5\1\41\1\10\1\16\1\25\1\17"+
    "\1\35\1\33\1\16\1\63\1\16\1\57\1\16\1\54\1\0\1\55"+
    "\1\0\1\3\1\0\1\20\1\14\1\30\1\50\1\26\1\0\1\22"+
    "\1\60\1\36\1\0\1\52\1\46\1\44\1\13\1\40\1\15\1\0"+
    "\1\24\1\7\1\34\1\32\1\0\1\62\1\0\1\56\1\0\12\0"+
    "\1\0\44\0\1\0\5\0\1\0\3\0\1\0\5\0\1\0\5\0"+
    "\1\0\1\0\4\0\1\0\1\0\1\0\1\0\2\0\1\0\1\0"+
    "\2\0\1\0\1\0\1\0\1\0\3\0\2\0\1\0\1\0\2\0"+
    "\3\0\1\0\1\0\4\0\1\0\1\0\1\0\1\0\2\0\1\0"+
    "\1\0\2\0\1\0\1\0\1\0\1\0\3\0\2\0\1\0\1\0"+
    "\2\0\53\0\1\0\1\0\6\0\2\36\66\0\1\0\1\0\4\0"+
    "\1\0\1\0\17\0\1\7\u1c88\0\1\0\1\0\216\0\2\0\42\0"+
    "\1\0\1\0\u0144\0\1\1\20\0\1\2\1\2\4\0\1\0\16\0"+
    "\1\0\1\0\u0100\0\1\52\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\2\2\2\3\12\0\1\4\137\0\1\5"+
    "\101\0\1\5\25\0\1\5\3\0\1\5\10\0\1\6"+
    "\32\0\1\7\166\0\1\10\1\0\1\10\2\0\1\11";

  private static int [] zzUnpackAction() {
    int [] result = new int[368];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\234\0\u0104\0\234"+
    "\0\u0138\0\u016c\0\u01a0\0\u01d4\0\u0208\0\u023c\0\u0270\0\u02a4"+
    "\0\u02d8\0\u030c\0\u0340\0\234\0\u0374\0\u03a8\0\u03dc\0\u0410"+
    "\0\u0444\0\u0478\0\u04ac\0\u04e0\0\u0514\0\u0548\0\u057c\0\u05b0"+
    "\0\u05e4\0\u0618\0\u064c\0\u0680\0\u06b4\0\u06e8\0\u071c\0\u0750"+
    "\0\u0784\0\u07b8\0\u07ec\0\u0820\0\u0854\0\u0888\0\u08bc\0\u08f0"+
    "\0\u0924\0\u0958\0\u098c\0\u09c0\0\u09f4\0\u0a28\0\u0a5c\0\u0a90"+
    "\0\u0ac4\0\u0af8\0\u0b2c\0\u0b60\0\u0b94\0\u0bc8\0\u0bfc\0\u0c30"+
    "\0\u0c64\0\u0c98\0\u0ccc\0\u0d00\0\u0d34\0\u0d68\0\u0d9c\0\u0dd0"+
    "\0\u0e04\0\u0e38\0\u0e6c\0\u0ea0\0\u0ed4\0\u0f08\0\u0f3c\0\u0f70"+
    "\0\u0fa4\0\u0fd8\0\u100c\0\u1040\0\u1074\0\u10a8\0\u10dc\0\u1110"+
    "\0\u1144\0\u1178\0\u11ac\0\u11e0\0\u1214\0\u1248\0\u127c\0\u12b0"+
    "\0\u12e4\0\u1318\0\u134c\0\u1380\0\u13b4\0\u13e8\0\u141c\0\u1450"+
    "\0\u1484\0\u14b8\0\u14ec\0\u1520\0\u1554\0\u1588\0\u15bc\0\u15f0"+
    "\0\u1624\0\u1658\0\u168c\0\234\0\u16c0\0\u16f4\0\u1728\0\u175c"+
    "\0\u1790\0\u17c4\0\u17f8\0\u182c\0\u1860\0\u1894\0\u18c8\0\u18fc"+
    "\0\u1930\0\u1964\0\u1998\0\u19cc\0\u1a00\0\u1a34\0\u1a68\0\u1a9c"+
    "\0\u1ad0\0\u1b04\0\u1b38\0\u1b6c\0\u1ba0\0\u1bd4\0\u1c08\0\u1c3c"+
    "\0\u1c70\0\u1ca4\0\u1cd8\0\u1d0c\0\u1d40\0\u1d74\0\u1da8\0\u1ddc"+
    "\0\u1e10\0\u1e44\0\u1e78\0\u1eac\0\u1ee0\0\u1f14\0\u1f48\0\u1f7c"+
    "\0\u1fb0\0\u1fe4\0\u2018\0\u204c\0\u2080\0\u20b4\0\u20e8\0\u211c"+
    "\0\u2150\0\u2184\0\u21b8\0\u21ec\0\u2220\0\u2254\0\u2288\0\u22bc"+
    "\0\u22f0\0\u2324\0\u2358\0\u238c\0\u23c0\0\u23c0\0\u23f4\0\u2428"+
    "\0\u245c\0\u2490\0\u24c4\0\u24f8\0\u252c\0\u2560\0\u2594\0\u25c8"+
    "\0\u25fc\0\u2630\0\u2664\0\u2698\0\u26cc\0\u2700\0\u2734\0\u2768"+
    "\0\u279c\0\u27d0\0\u2804\0\u2804\0\u2838\0\u286c\0\u28a0\0\u286c"+
    "\0\u28d4\0\u2908\0\u293c\0\u2970\0\u29a4\0\u29d8\0\u2a0c\0\u2a40"+
    "\0\234\0\u2a74\0\u2aa8\0\u2adc\0\u2b10\0\u2b44\0\u2b78\0\u2bac"+
    "\0\u2be0\0\u2c14\0\u2c48\0\u2c7c\0\u2cb0\0\u2ce4\0\u2d18\0\u2d4c"+
    "\0\u2d80\0\u2db4\0\u2de8\0\u2e1c\0\u2e50\0\u2e84\0\u2eb8\0\u2eec"+
    "\0\u2f20\0\u2f54\0\u2f88\0\234\0\u2fbc\0\u2ff0\0\u3024\0\u3058"+
    "\0\u308c\0\u30c0\0\u30f4\0\u3128\0\u315c\0\u3190\0\u31c4\0\u31f8"+
    "\0\u322c\0\u3260\0\u3294\0\u32c8\0\u32fc\0\u3330\0\u3364\0\u3398"+
    "\0\u33cc\0\u3400\0\u3434\0\u3468\0\u349c\0\u34d0\0\u3504\0\u3538"+
    "\0\u356c\0\u35a0\0\u35d4\0\u3608\0\u363c\0\u3670\0\u36a4\0\u36d8"+
    "\0\u370c\0\u3740\0\u3774\0\u37a8\0\u37dc\0\u3810\0\u3844\0\u3878"+
    "\0\u38ac\0\u38e0\0\u3914\0\u3948\0\u397c\0\u39b0\0\u39e4\0\u3a18"+
    "\0\u3a4c\0\u3a80\0\u3ab4\0\u3ae8\0\u3b1c\0\u3b50\0\u3b84\0\u3bb8"+
    "\0\u3bec\0\u3c20\0\u3c54\0\u3c88\0\u3cbc\0\u3cf0\0\u3d24\0\u3d58"+
    "\0\u3d8c\0\u3dc0\0\u3df4\0\u3e28\0\u3e5c\0\u3e90\0\u3ec4\0\u3ef8"+
    "\0\u3f2c\0\u3f60\0\u3f94\0\u3fc8\0\u3ffc\0\u4030\0\u4064\0\u4098"+
    "\0\u40cc\0\u4100\0\u4134\0\u4168\0\u419c\0\u41d0\0\u4204\0\u4238"+
    "\0\u426c\0\u42a0\0\u42d4\0\u4308\0\u433c\0\u4370\0\u43a4\0\u43d8"+
    "\0\u440c\0\u4440\0\u4474\0\u44a8\0\u44dc\0\u4510\0\u4544\0\u4578"+
    "\0\u45ac\0\u45e0\0\u4614\0\u4648\0\u467c\0\u46b0\0\u46e4\0\u4718"+
    "\0\u474c\0\u4780\0\234\0\u47b4\0\u2d80\0\u47e8\0\u481c\0\u2ff0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[368];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\54\4\1\5\7\4\54\6\1\7\7\6\54\10\1\11"+
    "\7\10\132\0\2\12\57\0\1\13\66\0\2\14\66\0"+
    "\2\15\56\0\2\16\66\0\2\17\15\0\1\20\5\0"+
    "\1\20\122\0\2\21\15\0\1\22\5\0\1\22\62\0"+
    "\1\23\56\0\1\24\5\0\1\24\62\0\1\25\54\0"+
    "\1\26\1\0\1\27\1\26\1\0\1\30\2\0\1\31"+
    "\1\0\1\32\2\26\1\33\1\34\1\0\1\26\1\0"+
    "\1\26\1\35\1\36\1\37\1\40\1\0\1\26\1\0"+
    "\1\26\1\41\1\42\1\0\1\26\3\0\1\26\1\43"+
    "\1\44\1\45\1\46\1\0\1\26\3\0\1\26\1\0"+
    "\1\26\1\0\1\26\3\0\1\47\1\0\1\50\1\47"+
    "\1\0\1\47\2\0\1\51\2\0\2\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\3\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\3\0\1\47\1\0\1\47\1\0\1\47\3\0\1\26"+
    "\1\0\2\26\1\0\1\26\1\0\1\52\3\0\2\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\3\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\3\0\1\26\1\0\1\26\1\0\1\26"+
    "\3\0\1\26\1\0\2\26\1\0\1\26\1\0\1\52"+
    "\3\0\2\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\53\1\54\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\3\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\3\0\1\26\1\0\1\26"+
    "\1\0\1\26\3\0\1\26\1\0\2\26\1\0\1\26"+
    "\1\0\1\52\3\0\2\26\1\55\1\56\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\3\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\3\0\1\26"+
    "\1\0\1\26\1\0\1\26\32\0\2\53\50\0\2\55"+
    "\66\0\2\57\41\0\1\26\1\0\2\26\1\0\1\26"+
    "\1\0\1\52\3\0\2\26\1\0\1\26\1\0\1\26"+
    "\1\57\1\60\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\3\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\3\0\1\26"+
    "\1\0\1\26\1\0\1\26\32\0\2\61\33\0\1\26"+
    "\1\0\2\26\1\0\1\26\1\0\1\52\3\0\2\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\61\1\62\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\3\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\3\0\1\26\1\0\1\26\1\0\1\26"+
    "\40\0\2\63\4\0\2\64\17\0\1\26\1\0\2\26"+
    "\1\0\1\26\1\0\1\52\3\0\2\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\63\1\65"+
    "\3\0\1\26\1\64\1\66\1\0\1\26\1\0\1\26"+
    "\3\0\1\26\1\0\1\26\1\0\1\26\34\0\2\67"+
    "\31\0\1\26\1\0\2\26\1\0\1\26\1\0\1\52"+
    "\3\0\2\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\67\1\70"+
    "\1\0\1\26\1\0\1\26\3\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\3\0\1\26\1\0\1\26"+
    "\1\0\1\26\26\0\2\71\37\0\1\26\1\0\2\26"+
    "\1\0\1\26\1\0\1\52\3\0\2\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\71\1\72\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\3\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\3\0\1\26\1\0\1\26\1\0\1\26\40\0\2\73"+
    "\25\0\1\26\1\0\2\26\1\0\1\26\1\0\1\52"+
    "\3\0\2\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\73\1\74\3\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\3\0\1\26\1\0\1\26"+
    "\1\0\1\26\3\0\1\47\1\0\2\47\1\0\1\47"+
    "\1\0\1\75\3\0\2\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\3\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\3\0\1\47"+
    "\1\0\1\47\1\0\1\47\3\0\1\47\1\0\2\47"+
    "\1\0\1\47\1\0\1\75\3\0\2\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\76\1\77\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\3\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\3\0\1\47\1\0\1\47\1\0\1\47\32\0\2\76"+
    "\32\0\2\52\1\0\2\52\1\0\1\52\1\0\1\100"+
    "\3\0\2\52\1\0\1\52\1\0\1\52\1\0\1\52"+
    "\1\0\1\52\1\0\1\52\1\0\1\52\1\0\1\52"+
    "\1\0\1\52\1\0\2\52\2\0\1\52\1\0\1\52"+
    "\1\0\1\52\1\0\1\52\3\0\1\52\1\0\1\52"+
    "\1\0\1\52\44\0\2\101\21\0\1\26\1\0\2\26"+
    "\1\0\1\26\1\0\1\52\3\0\2\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\2\0\1\101\1\102\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\3\0\1\26\1\0\1\26\1\0\1\26\24\0"+
    "\2\103\41\0\1\26\1\0\2\26\1\0\1\26\1\0"+
    "\1\52\3\0\2\26\1\0\1\26\1\0\1\26\1\103"+
    "\1\104\1\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\1\26\3\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\1\26\3\0\1\26\1\0"+
    "\1\26\1\0\1\26\34\0\2\105\31\0\1\26\1\0"+
    "\2\26\1\0\1\26\1\0\1\52\3\0\2\26\1\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\105\1\106\1\0\1\26\1\0"+
    "\1\26\3\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\3\0\1\26\1\0\1\26\1\0\1\26\3\0"+
    "\1\107\63\0\1\110\1\0\2\26\1\0\1\26\1\0"+
    "\1\52\3\0\2\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\1\26\3\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\1\26\3\0\1\26\1\0"+
    "\1\26\1\0\1\26\44\0\2\111\21\0\1\112\63\0"+
    "\1\26\1\0\2\26\1\0\1\26\1\0\1\52\3\0"+
    "\2\26\1\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\2\0\1\111\1\113\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\3\0\1\26\1\0\1\26"+
    "\1\0\1\26\3\0\1\114\1\0\2\26\1\0\1\26"+
    "\1\0\1\52\3\0\2\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\3\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\3\0\1\26"+
    "\1\0\1\26\1\0\1\26\26\0\2\115\37\0\1\26"+
    "\1\0\2\26\1\0\1\26\1\0\1\52\3\0\2\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\115\1\116"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\3\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\3\0\1\26\1\0\1\26\1\0\1\26"+
    "\22\0\2\117\10\0\2\120\31\0\1\26\1\0\2\26"+
    "\1\0\1\26\1\0\1\52\3\0\2\26\1\0\1\26"+
    "\1\117\1\121\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\120\1\122\1\0\1\26\1\0\1\26"+
    "\3\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\3\0\1\26\1\0\1\26\1\0\1\26\30\0\2\123"+
    "\35\0\1\26\1\0\2\26\1\0\1\26\1\0\1\52"+
    "\3\0\2\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\123\1\124\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\3\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\3\0\1\26\1\0\1\26"+
    "\1\0\1\26\2\0\2\75\1\0\2\75\1\0\1\75"+
    "\1\0\1\125\3\0\2\75\1\0\1\75\1\0\1\75"+
    "\1\0\1\75\1\0\1\75\1\0\1\75\1\0\1\75"+
    "\1\0\1\75\1\0\1\75\1\0\2\75\2\0\1\75"+
    "\1\0\1\75\1\0\1\75\1\0\1\75\3\0\1\75"+
    "\1\0\1\75\1\0\1\75\44\0\2\126\21\0\1\47"+
    "\1\0\2\47\1\0\1\47\1\0\1\75\3\0\2\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\2\0\1\126\1\127\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\3\0\1\47\1\0\1\47\1\0"+
    "\1\47\42\0\1\130\27\0\1\131\5\0\1\131\52\0"+
    "\1\26\1\0\1\26\1\132\1\0\1\26\1\0\1\52"+
    "\1\0\1\131\1\0\2\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\3\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\3\0\1\26"+
    "\1\0\1\26\1\0\1\26\20\0\2\133\45\0\1\26"+
    "\1\0\2\26\1\0\1\26\1\0\1\52\3\0\2\26"+
    "\1\133\1\134\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\3\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\3\0\1\26\1\0\1\26\1\0\1\26"+
    "\36\0\2\135\27\0\1\26\1\0\2\26\1\0\1\26"+
    "\1\0\1\52\3\0\2\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\135\1\136\1\0\1\26\3\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\3\0\1\26"+
    "\1\0\1\26\1\0\1\26\30\0\2\137\14\0\2\140"+
    "\17\0\1\26\1\0\2\26\1\0\1\26\1\0\1\52"+
    "\3\0\2\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\137\1\141\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\3\0\1\26\1\140\1\142"+
    "\1\0\1\26\1\0\1\26\3\0\1\26\1\0\1\26"+
    "\1\0\1\26\44\0\2\143\36\0\2\144\45\0\1\26"+
    "\1\0\2\26\1\0\1\26\1\0\1\52\3\0\2\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\2\0\1\143\1\145\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\3\0\1\26\1\0\1\26\1\0"+
    "\1\26\3\0\1\26\1\0\2\26\1\0\1\26\1\0"+
    "\1\52\3\0\2\26\1\144\1\146\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\1\26\3\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\1\26\3\0\1\26\1\0"+
    "\1\26\1\0\1\26\44\0\2\147\21\0\1\26\1\0"+
    "\2\26\1\0\1\26\1\0\1\52\3\0\2\26\1\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\2\0\1\147\1\150\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\3\0\1\26\1\0\1\26\1\0\1\26"+
    "\3\0\1\151\114\0\2\152\31\0\1\153\1\0\2\26"+
    "\1\0\1\26\1\0\1\52\3\0\2\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\3\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\3\0\1\26\1\0\1\26\1\0\1\26\3\0\1\26"+
    "\1\0\2\26\1\0\1\26\1\0\1\52\3\0\2\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\152\1\154\1\0\1\26"+
    "\1\0\1\26\3\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\3\0\1\26\1\0\1\26\1\0\1\26"+
    "\3\0\1\155\30\0\2\156\31\0\1\157\1\0\2\26"+
    "\1\0\1\26\1\0\1\52\3\0\2\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\156\1\160\1\0\1\26\1\0\1\26"+
    "\3\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\3\0\1\26\1\0\1\26\1\0\1\26\42\0\1\161"+
    "\27\0\1\162\5\0\1\162\52\0\1\47\1\0\1\47"+
    "\1\163\1\0\1\47\1\0\1\75\1\0\1\162\1\0"+
    "\2\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\3\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\3\0\1\47\1\0\1\47\1\0"+
    "\1\47\42\0\1\130\12\0\1\164\34\0\2\165\37\0"+
    "\1\26\1\0\2\26\1\0\1\26\1\0\1\52\3\0"+
    "\2\26\1\0\1\26\1\0\1\26\1\0\1\26\1\165"+
    "\1\166\1\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\3\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\3\0\1\26\1\0\1\26\1\0"+
    "\1\26\22\0\2\167\43\0\1\26\1\0\2\26\1\0"+
    "\1\26\1\0\1\52\3\0\2\26\1\0\1\26\1\167"+
    "\1\170\1\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\1\26\3\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\1\26\3\0"+
    "\1\26\1\0\1\26\1\0\1\26\30\0\2\171\35\0"+
    "\1\26\1\0\2\26\1\0\1\26\1\0\1\52\3\0"+
    "\2\26\1\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\171\1\172\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\3\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\3\0\1\26\1\0\1\26\1\0"+
    "\1\26\46\0\2\117\42\0\2\173\37\0\1\26\1\0"+
    "\2\26\1\0\1\26\1\0\1\52\3\0\2\26\1\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\3\0\1\26\1\117\1\121\1\0\1\26\1\0"+
    "\1\26\3\0\1\26\1\0\1\26\1\0\1\26\3\0"+
    "\1\26\1\0\2\26\1\0\1\26\1\0\1\52\3\0"+
    "\2\26\1\0\1\26\1\0\1\26\1\0\1\26\1\173"+
    "\1\174\1\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\3\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\3\0\1\26\1\0\1\26\1\0"+
    "\1\26\20\0\2\147\74\0\2\175\33\0\1\26\1\0"+
    "\2\26\1\0\1\26\1\0\1\52\3\0\2\26\1\147"+
    "\1\150\1\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\3\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\3\0\1\26\1\0\1\26\1\0\1\26\3\0"+
    "\1\26\1\0\2\26\1\0\1\26\1\0\1\52\3\0"+
    "\2\26\1\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\175\1\176\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\3\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\3\0\1\26\1\0\1\26\1\0"+
    "\1\26\12\0\1\177\54\0\1\26\1\0\2\26\1\0"+
    "\1\26\1\0\1\200\3\0\2\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\1\26\3\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\1\26\3\0"+
    "\1\26\1\0\1\26\1\0\1\26\20\0\2\201\70\0"+
    "\2\202\37\0\1\26\1\0\2\26\1\0\1\26\1\0"+
    "\1\52\3\0\2\26\1\201\1\203\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\1\26\3\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\1\26\3\0\1\26\1\0"+
    "\1\26\1\0\1\26\3\0\1\26\1\0\2\26\1\0"+
    "\1\26\1\0\1\52\3\0\2\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\202\1\204\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\1\26\3\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\1\26\3\0"+
    "\1\26\1\0\1\26\1\0\1\26\50\0\2\205\70\0"+
    "\2\206\7\0\1\26\1\0\2\26\1\0\1\26\1\0"+
    "\1\52\3\0\2\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\1\26\3\0\1\26\1\0"+
    "\1\26\1\205\1\207\1\0\1\26\3\0\1\26\1\0"+
    "\1\26\1\0\1\26\3\0\1\26\1\0\2\26\1\0"+
    "\1\26\1\0\1\52\3\0\2\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\1\26\3\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\1\26\2\0"+
    "\1\206\1\210\1\0\1\26\1\0\1\26\42\0\1\161"+
    "\12\0\1\211\34\0\2\212\37\0\1\47\1\0\2\47"+
    "\1\0\1\47\1\0\1\75\3\0\2\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\212\1\213\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\3\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\3\0\1\47\1\0\1\47\1\0\1\47\24\0\2\214"+
    "\41\0\1\26\1\0\2\26\1\0\1\26\1\0\1\52"+
    "\3\0\2\26\1\0\1\26\1\0\1\26\1\214\1\215"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\3\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\3\0\1\26\1\0\1\26"+
    "\1\0\1\26\24\0\2\216\41\0\1\26\1\0\2\26"+
    "\1\0\1\26\1\0\1\52\3\0\2\26\1\0\1\26"+
    "\1\0\1\26\1\216\1\217\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\3\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\3\0\1\26\1\0\1\26\1\0\1\26\46\0\2\220"+
    "\17\0\1\26\1\0\2\26\1\0\1\26\1\0\1\52"+
    "\3\0\2\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\3\0\1\26\1\220\1\221"+
    "\1\0\1\26\1\0\1\26\3\0\1\26\1\0\1\26"+
    "\1\0\1\26\22\0\2\117\43\0\1\26\1\0\2\26"+
    "\1\0\1\26\1\0\1\52\3\0\2\26\1\0\1\26"+
    "\1\117\1\121\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\3\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\3\0\1\26\1\0\1\26\1\0\1\26\34\0\2\222"+
    "\31\0\1\26\1\0\2\26\1\0\1\26\1\0\1\52"+
    "\3\0\2\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\222\1\223"+
    "\1\0\1\26\1\0\1\26\3\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\3\0\1\26\1\0\1\26"+
    "\1\0\1\26\2\0\2\177\1\0\2\177\1\0\1\177"+
    "\1\0\1\224\3\0\2\177\1\0\1\177\1\0\1\177"+
    "\1\0\1\177\1\0\1\177\1\0\1\177\1\0\1\177"+
    "\1\0\1\177\1\0\1\177\1\0\2\177\2\0\1\177"+
    "\1\0\1\177\1\0\1\177\1\0\1\177\3\0\1\177"+
    "\1\0\1\177\1\0\1\177\2\0\2\200\1\0\2\200"+
    "\1\0\1\200\1\0\1\225\3\0\2\200\1\0\1\200"+
    "\1\0\1\200\1\0\1\200\1\0\1\200\1\0\1\200"+
    "\1\0\1\200\1\0\1\200\1\0\1\200\1\0\2\200"+
    "\2\0\1\200\1\0\1\200\1\0\1\200\1\0\1\200"+
    "\3\0\1\200\1\0\1\200\1\0\1\200\32\0\2\226"+
    "\54\0\2\147\41\0\1\26\1\0\2\26\1\0\1\26"+
    "\1\0\1\52\3\0\2\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\226\1\227"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\3\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\3\0\1\26"+
    "\1\0\1\26\1\0\1\26\3\0\1\26\1\0\2\26"+
    "\1\0\1\26\1\0\1\52\3\0\2\26\1\0\1\26"+
    "\1\0\1\26\1\147\1\150\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\3\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\3\0\1\26\1\0\1\26\1\0\1\26\20\0\2\230"+
    "\52\0\1\231\4\0\1\231\51\0\1\26\1\0\2\26"+
    "\1\0\1\26\1\0\1\52\3\0\2\26\1\230\1\232"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\3\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\3\0\1\26\1\0\1\26\1\0\1\26\3\0\1\26"+
    "\1\0\2\26\1\0\1\233\1\0\1\52\2\0\1\231"+
    "\2\26\1\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\3\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\3\0\1\26\1\0\1\26\1\0"+
    "\1\26\54\234\1\0\7\234\24\0\2\235\41\0\1\47"+
    "\1\0\2\47\1\0\1\47\1\0\1\75\3\0\2\47"+
    "\1\0\1\47\1\0\1\47\1\235\1\236\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\3\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\3\0\1\47\1\0\1\47\1\0\1\47"+
    "\12\0\1\237\54\0\1\26\1\0\2\26\1\0\1\26"+
    "\1\0\1\240\3\0\2\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\3\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\3\0\1\26"+
    "\1\0\1\26\1\0\1\26\20\0\2\241\45\0\1\26"+
    "\1\0\2\26\1\0\1\26\1\0\1\52\3\0\2\26"+
    "\1\241\1\242\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\3\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\3\0\1\26\1\0\1\26\1\0\1\26"+
    "\26\0\2\147\37\0\1\26\1\0\2\26\1\0\1\26"+
    "\1\0\1\52\3\0\2\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\147\1\150\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\3\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\3\0\1\26"+
    "\1\0\1\26\1\0\1\26\60\0\2\243\5\0\1\26"+
    "\1\0\2\26\1\0\1\26\1\0\1\52\3\0\2\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\3\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\3\0\1\26\1\243\1\244\1\0\1\26"+
    "\42\0\1\245\63\0\1\246\55\0\2\247\31\0\1\26"+
    "\1\0\2\26\1\0\1\26\1\0\1\52\3\0\2\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\247\1\250\1\0\1\26"+
    "\1\0\1\26\3\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\3\0\1\26\1\0\1\26\1\0\1\26"+
    "\34\0\2\231\54\0\2\251\37\0\1\26\1\0\2\26"+
    "\1\0\1\26\1\0\1\52\3\0\2\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\231\1\233\1\0\1\26\1\0\1\26"+
    "\3\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\3\0\1\26\1\0\1\26\1\0\1\26\3\0\1\26"+
    "\1\0\2\26\1\0\1\26\1\0\1\52\3\0\2\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\251\1\252"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\3\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\3\0\1\26\1\0\1\26\1\0\1\26"+
    "\54\234\1\253\7\234\12\0\1\254\54\0\1\47\1\0"+
    "\2\47\1\0\1\47\1\0\1\254\3\0\2\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\3\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\3\0\1\47\1\0\1\47\1\0\1\47\42\0"+
    "\1\255\23\0\2\52\1\0\2\52\1\0\1\52\1\0"+
    "\1\100\3\0\2\52\1\0\1\52\1\0\1\52\1\0"+
    "\1\52\1\0\1\52\1\0\1\52\1\0\1\52\1\0"+
    "\1\52\1\0\1\52\1\0\1\52\1\256\2\0\1\52"+
    "\1\0\1\52\1\0\1\52\1\0\1\52\3\0\1\52"+
    "\1\0\1\52\1\0\1\52\10\0\1\257\4\0\1\257"+
    "\51\0\1\26\1\0\2\26\1\0\1\260\1\0\1\52"+
    "\2\0\1\257\2\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\1\26\3\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\1\26\3\0\1\26\1\0"+
    "\1\26\1\0\1\26\3\0\1\261\6\0\1\262\54\0"+
    "\1\263\1\0\2\26\1\0\1\26\1\0\1\264\3\0"+
    "\2\26\1\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\3\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\3\0\1\26\1\0\1\26\1\0"+
    "\1\26\42\0\1\245\12\0\1\265\50\0\1\246\12\0"+
    "\1\266\66\0\2\251\5\0\1\26\1\0\2\26\1\0"+
    "\1\26\1\0\1\52\3\0\2\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\1\26\3\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\1\26\3\0"+
    "\1\26\1\251\1\252\1\0\1\26\12\0\1\262\54\0"+
    "\1\26\1\0\2\26\1\0\1\26\1\0\1\264\3\0"+
    "\2\26\1\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\3\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\3\0\1\26\1\0\1\26\1\0"+
    "\1\26\43\0\1\267\22\0\2\254\1\0\2\254\1\0"+
    "\1\254\1\0\1\270\3\0\2\254\1\0\1\254\1\0"+
    "\1\254\1\0\1\254\1\0\1\254\1\0\1\254\1\0"+
    "\1\254\1\0\1\254\1\0\1\254\1\0\2\254\2\0"+
    "\1\254\1\0\1\254\1\0\1\254\1\0\1\254\3\0"+
    "\1\254\1\0\1\254\1\0\1\254\12\0\1\271\27\0"+
    "\1\255\23\0\2\52\1\0\2\52\1\0\1\52\1\0"+
    "\1\272\3\0\2\52\1\0\1\52\1\0\1\52\1\0"+
    "\1\52\1\0\1\52\1\0\1\52\1\0\1\52\1\0"+
    "\1\52\1\0\1\52\1\0\1\52\1\256\2\0\1\52"+
    "\1\0\1\52\1\0\1\52\1\0\1\52\3\0\1\52"+
    "\1\0\1\52\1\0\1\52\60\0\2\147\5\0\1\26"+
    "\1\0\2\26\1\0\1\26\1\0\1\52\3\0\2\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\3\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\3\0\1\26\1\147\1\150\1\0\1\26"+
    "\7\0\1\273\7\0\1\273\46\0\2\262\1\0\2\262"+
    "\1\0\1\262\1\0\1\274\3\0\2\262\1\0\1\262"+
    "\1\0\1\262\1\0\1\262\1\0\1\262\1\0\1\262"+
    "\1\0\1\262\1\0\1\262\1\0\1\262\1\0\2\262"+
    "\2\0\1\262\1\0\1\262\1\0\1\262\1\0\1\262"+
    "\3\0\1\262\1\0\1\262\1\0\1\262\3\0\1\26"+
    "\1\0\2\26\1\273\1\26\1\0\1\52\3\0\1\26"+
    "\1\275\1\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\3\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\3\0\1\26\1\0\1\26\1\0"+
    "\1\26\2\0\2\264\1\0\2\264\1\0\1\264\1\0"+
    "\1\276\3\0\2\264\1\0\1\264\1\0\1\264\1\0"+
    "\1\264\1\0\1\264\1\0\1\264\1\0\1\264\1\0"+
    "\1\264\1\0\1\264\1\0\2\264\2\0\1\264\1\0"+
    "\1\264\1\0\1\264\1\0\1\264\3\0\1\264\1\0"+
    "\1\264\1\0\1\264\54\277\1\0\7\277\46\0\2\300"+
    "\56\0\1\301\63\0\1\302\63\0\1\303\47\0\2\304"+
    "\76\0\1\305\24\0\1\26\1\0\2\26\1\0\1\26"+
    "\1\0\1\52\3\0\2\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\304\1\306\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\3\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\3\0\1\26"+
    "\1\0\1\26\1\0\1\26\42\0\1\307\21\0\54\277"+
    "\1\310\7\277\52\0\2\311\52\0\1\301\12\0\1\312"+
    "\50\0\1\302\12\0\1\313\50\0\1\303\12\0\1\314"+
    "\36\0\2\315\74\0\1\305\12\0\1\316\11\0\1\26"+
    "\1\0\2\26\1\0\1\26\1\0\1\52\3\0\2\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\315\1\317\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\3\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\3\0\1\26\1\0\1\26\1\0\1\26"+
    "\42\0\1\307\12\0\1\320\51\0\1\321\25\0\1\322"+
    "\5\0\1\322\50\0\54\323\1\0\7\323\54\324\1\0"+
    "\7\324\34\0\2\325\26\0\54\326\1\0\7\326\3\0"+
    "\1\26\1\0\2\26\1\0\1\26\1\0\1\52\3\0"+
    "\2\26\1\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\325\1\327\1\0"+
    "\1\26\1\0\1\26\3\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\3\0\1\26\1\0\1\26\1\0"+
    "\1\26\46\0\2\330\71\0\1\331\6\0\54\323\1\332"+
    "\7\323\54\324\1\333\7\324\36\0\2\334\24\0\54\326"+
    "\1\335\7\326\3\0\1\26\1\0\2\26\1\0\1\26"+
    "\1\0\1\52\3\0\2\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\334\1\336\1\0\1\26\3\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\3\0\1\26"+
    "\1\0\1\26\1\0\1\26\52\0\2\337\53\0\1\340"+
    "\63\0\1\341\60\0\2\342\65\0\1\343\23\0\1\26"+
    "\1\0\2\26\1\0\1\26\1\0\1\52\3\0\2\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\342\1\344\3\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\3\0\1\26\1\0\1\26\1\0\1\26"+
    "\5\0\1\345\5\0\1\345\116\0\2\346\62\0\2\347"+
    "\21\0\1\251\5\0\1\251\116\0\2\350\17\0\1\26"+
    "\1\0\1\252\1\26\1\0\1\26\1\0\1\52\1\251"+
    "\2\0\2\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\3\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\3\0\1\26\1\0\1\26"+
    "\1\0\1\26\55\0\1\351\60\0\2\352\62\0\2\353"+
    "\62\0\2\354\11\0\3\351\1\355\47\0\1\356\14\0"+
    "\1\357\5\0\1\357\55\0\1\360\5\0\1\360\55\0"+
    "\1\361\5\0\1\361\55\0\1\362\5\0\1\362\116\0"+
    "\2\363\71\0\1\364\63\0\1\365\63\0\1\366\14\0"+
    "\1\367\5\0\1\367\121\0\2\370\11\0\3\365\1\371"+
    "\47\0\1\372\10\0\3\366\1\373\47\0\1\374\16\0"+
    "\1\375\7\0\1\375\51\0\1\376\5\0\1\376\55\0"+
    "\1\377\5\0\1\377\116\0\2\u0100\21\0\1\u0101\5\0"+
    "\1\u0101\116\0\2\u0102\24\0\1\u0103\4\0\1\u0103\60\0"+
    "\1\u0104\57\0\1\u0105\5\0\1\u0105\121\0\2\u0106\16\0"+
    "\1\u0107\5\0\1\u0107\121\0\2\u0108\21\0\1\351\57\0"+
    "\1\u0109\1\0\1\u010a\3\0\1\u0109\3\0\1\u010a\53\0"+
    "\1\u010b\7\0\1\u010b\51\0\1\u010c\5\0\1\u010c\57\0"+
    "\1\u010d\7\0\1\u010d\51\0\1\u010e\5\0\1\u010e\102\0"+
    "\2\u010f\64\0\2\u0110\36\0\1\u0111\4\0\1\u0111\60\0"+
    "\1\u0112\61\0\1\u0113\4\0\1\u0113\60\0\1\u0114\115\0"+
    "\2\u0115\26\0\1\u0116\4\0\1\u0116\57\0\1\365\57\0"+
    "\1\31\1\0\1\u0117\1\u0118\2\0\1\31\1\0\1\u0118"+
    "\1\0\1\u0117\2\u0119\4\0\2\u011a\2\u011b\4\0\2\u011c"+
    "\6\0\2\u011d\25\0\1\366\57\0\1\u011e\1\0\1\u011f"+
    "\3\0\1\u011e\3\0\1\u011f\52\0\1\u0120\5\0\1\u0120"+
    "\131\0\2\147\34\0\2\u0121\46\0\2\u0122\66\0\2\u0123"+
    "\70\0\2\u0124\70\0\2\u0125\4\0\2\u0126\50\0\2\u0127"+
    "\54\0\2\u0128\66\0\2\u0129\64\0\2\u012a\54\0\2\u012b"+
    "\44\0\1\u012c\4\0\1\u012c\72\0\2\u012d\72\0\2\u012e"+
    "\31\0\1\u012f\124\0\2\u0130\21\0\1\u0131\106\0\2\u0132"+
    "\56\0\2\u0126\10\0\2\u0133\72\0\2\u0134\26\0\1\u0135"+
    "\4\0\1\u0135\72\0\2\u0136\120\0\2\u0137\20\0\2\u0138"+
    "\100\0\2\u0139\72\0\2\u013a\60\0\2\u013b\36\0\2\u013c"+
    "\106\0\2\u013d\52\0\2\u013e\34\0\1\u013f\5\0\1\u013f"+
    "\131\0\2\251\12\0\1\u0140\63\0\1\u0141\73\0\2\u0142"+
    "\70\0\2\u0143\60\0\2\u0144\54\0\2\u013d\110\0\2\u0145"+
    "\26\0\1\u0146\77\0\2\u0147\62\0\2\u0148\76\0\1\u0149"+
    "\23\0\2\u0141\1\0\2\u0141\1\0\1\u0141\1\0\1\271"+
    "\3\0\2\u0141\1\0\1\u0141\1\0\1\u0141\1\0\1\u0141"+
    "\1\0\1\u0141\1\0\1\u0141\1\0\1\u0141\1\0\1\u0141"+
    "\1\0\1\u0141\1\0\2\u0141\2\0\1\u0141\1\0\1\u0141"+
    "\1\0\1\u0141\1\0\1\u0141\3\0\1\u0141\1\0\1\u0141"+
    "\1\0\1\u0141\24\0\2\u014a\104\0\2\u014b\36\0\2\u0126"+
    "\76\0\2\u014c\26\0\2\u0146\1\0\2\u0146\1\0\1\u0146"+
    "\1\0\1\u014d\3\0\2\u0146\1\0\1\u0146\1\0\1\u0146"+
    "\1\0\1\u0146\1\0\1\u0146\1\0\1\u0146\1\0\1\u0146"+
    "\1\0\1\u0146\1\0\1\u0146\1\0\2\u0146\2\0\1\u0146"+
    "\1\0\1\u0146\1\0\1\u0146\1\0\1\u0146\3\0\1\u0146"+
    "\1\0\1\u0146\1\0\1\u0146\24\0\2\u013d\62\0\2\u014e"+
    "\50\0\1\u014f\27\0\1\u0149\41\0\2\u0150\70\0\2\u013d"+
    "\54\0\2\u0151\104\0\1\u0152\33\0\1\u0153\113\0\1\u0154"+
    "\31\0\1\u0155\4\0\1\u0155\55\0\1\u013d\7\0\1\u013d"+
    "\106\0\1\u0152\12\0\1\u0156\50\0\1\u0157\63\0\1\u0154"+
    "\12\0\1\u0158\66\0\2\u013d\2\0\54\u0159\1\0\7\u0159"+
    "\12\0\1\u015a\27\0\1\u0157\21\0\54\u015b\1\0\7\u015b"+
    "\54\u0159\1\u015c\7\u0159\42\0\1\u015d\21\0\54\u015b\1\u015e"+
    "\7\u015b\43\0\1\u015f\62\0\1\u015d\12\0\1\u0160\51\0"+
    "\1\u0161\66\0\2\u0162\14\0\54\u0163\1\0\7\u0163\46\0"+
    "\2\u0164\66\0\2\u0165\10\0\54\u0163\1\u0166\7\u0163\52\0"+
    "\2\u0167\15\0\1\u0168\5\0\1\u0168\113\0\1\u0169\25\0"+
    "\1\u016a\5\0\1\u016a\125\0\1\u016b\54\0\2\u016c\71\0"+
    "\1\u016d\60\0\2\u016e\15\0\1\u016f\5\0\1\u016f\125\0"+
    "\1\u0170\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18512];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\1\1\1\11\1\1\12\0"+
    "\1\11\137\0\1\11\101\0\1\1\25\0\1\1\3\0"+
    "\1\1\10\0\1\11\32\0\1\11\166\0\1\11\1\0"+
    "\1\1\2\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[368];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	
	/* Custom java code */

    @Override
	public String language() { return "IT"; }

	@Override
	public String version() { return "0.2"; }


	/* An empty default constructor is required to comply with LinkolnService */
	
	public Items() { }
	
	@Override
	public final boolean run() {
		
		try {
			
			yyreset(new StringReader(getInput()));
			yylex();
			
		} catch (IOException e) {

			e.printStackTrace();
			return false;
		}
		
		return true;
	}
	
	@Override
	protected void addValue() {
	
		//annotationEntity.setValue("value");
	} 



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Items(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 382) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { addText(yytext());
	position++;
            } 
            // fall through
          case 10: break;
          case 2: 
            { addText(yytext());
		position++;
            } 
            // fall through
          case 11: break;
          case 3: 
            { checkEnd();
            } 
            // fall through
          case 12: break;
          case 4: 
            { addText(yytext());
		position--; //account for the following {LKN_C} character
		yybegin(YYINITIAL);
            } 
            // fall through
          case 13: break;
          case 5: 
            { addText(yytext()); 
	yybegin(lkn);
            } 
            // fall through
          case 14: break;
          case 6: 
            { AnnotationEntity retrievedEntity = retrieveEntity(yytext());
		
		addText(yytext());
		
		offset += yylength();
		position += retrievedEntity.getText().length();
            } 
            // fall through
          case 15: break;
          case 7: 
            { //Convert number into ITEM
		
		AnnotationEntity retrievedEntity = retrieveEntity(yytext());
		
		Item item = new Item();

		replaceEntity(retrievedEntity, item);

		offset += yylength();
		position += retrievedEntity.getText().length();
            } 
            // fall through
          case 16: break;
          case 8: 
            { offset = 0;
	length = yylength();		

	yypushback(length);
	
	yybegin(readItemState);
            } 
            // fall through
          case 17: break;
          case 9: 
            { addText(yytext());
            } 
            // fall through
          case 18: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Items [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Items scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Items(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
