/* The following code was generated by JFlex 1.7.0 */

/*******************************************************************************
 * Copyright (c) 2016-2021 Institute of Legal Information and Judicial Systems IGSG-CNR (formerly ITTIG-CNR)
 * 
 * This program and the accompanying materials  are made available under the terms of the GNU General Public
 * License as published by the Free Software Foundation; either version 3 of the License, or (at your option)
 * any later version. 
 * You may not use this work except in compliance with the Licence.
 * You may obtain a copy of the Licence at: https://www.gnu.org/licenses/gpl-3.0.txt
 * Unless required by applicable law or agreed to in writing, software distributed under the Licence is 
 * distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the Licence for the specific language governing permissions and limitations under the Licence.
 *  
 * Authors: Lorenzo Bacci (IGSG-CNR)
 ******************************************************************************/
 package it.cnr.igsg.linkoln.service.impl.it;

import java.io.IOException;
import java.io.StringReader;

import it.cnr.igsg.linkoln.entity.*;
import it.cnr.igsg.linkoln.service.*;

import it.cnr.igsg.linkoln.service.impl.Util;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>jflex/Stopwords.jflex</tt>
 */
public class Stopwords extends LinkolnAnnotationService {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int lkn = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\0\1\2\1\0\1\0\1\1\22\0\1\14\5\0\1\6"+
    "\1\5\1\0\1\0\2\0\1\14\1\3\1\54\1\55\1\53\1\53"+
    "\1\53\1\53\1\53\1\53\1\53\1\53\1\53\1\53\1\15\1\13"+
    "\5\0\1\26\1\10\1\40\1\63\1\36\1\74\1\30\1\72\1\50"+
    "\1\23\1\66\1\57\1\23\1\7\1\52\1\12\1\61\1\32\1\24"+
    "\1\44\1\42\1\34\1\23\1\23\1\23\1\23\1\67\1\0\1\70"+
    "\1\0\1\4\1\5\1\25\1\20\1\37\1\62\1\35\1\73\1\27"+
    "\1\71\1\47\1\16\1\65\1\56\1\16\1\17\1\51\1\22\1\60"+
    "\1\31\1\21\1\43\1\41\1\33\1\16\1\16\1\16\1\16\12\0"+
    "\1\0\44\0\1\0\5\0\1\0\3\0\1\5\5\0\1\0\5\0"+
    "\1\16\1\16\4\16\1\0\1\16\1\45\1\45\2\16\1\16\1\16"+
    "\2\16\1\0\1\16\1\16\1\16\3\16\2\0\1\16\1\16\2\16"+
    "\3\0\1\16\1\16\4\16\1\0\1\16\1\45\1\45\2\16\1\16"+
    "\1\16\2\16\1\0\1\16\1\16\1\16\3\16\2\0\1\16\1\16"+
    "\2\16\53\0\1\16\1\16\6\0\2\46\66\0\1\16\1\16\4\0"+
    "\1\16\1\16\17\0\1\11\u1c88\0\1\16\1\16\216\0\2\16\42\0"+
    "\1\16\1\16\u0144\0\1\14\20\0\1\3\1\3\4\0\1\5\16\0"+
    "\1\0\1\0\u0100\0\1\64\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\6\1\2\2\26\0\2\3\1\0\1\3\12\0"+
    "\2\4\2\0\1\5\1\0\1\6\4\0\1\7\7\0"+
    "\2\10\1\0\1\10\7\0\2\11\1\12\1\0\2\13"+
    "\2\14\3\0\2\15\2\16\1\0\1\16\15\0\2\17"+
    "\1\20\2\21\2\22\12\0\1\23\1\24\1\25\2\0"+
    "\1\26\21\0\1\27\4\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[151];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\u0131\0\u016e\0\u01ab"+
    "\0\u016e\0\u01e8\0\u0225\0\u0262\0\u029f\0\u02dc\0\u0319\0\u0356"+
    "\0\u0393\0\u03d0\0\u040d\0\u044a\0\u0487\0\u04c4\0\u0501\0\172"+
    "\0\u053e\0\u057b\0\u05b8\0\u05f5\0\u0632\0\u066f\0\u06ac\0\u06e9"+
    "\0\u016e\0\u0726\0\u0763\0\u07a0\0\u07a0\0\u07dd\0\u081a\0\u0857"+
    "\0\u0894\0\u08d1\0\u090e\0\u094b\0\u0988\0\u09c5\0\u016e\0\u0a02"+
    "\0\u0a3f\0\u0a7c\0\u09c5\0\u0ab9\0\u0af6\0\u0b33\0\u0b70\0\u0af6"+
    "\0\u0bad\0\u016e\0\u0bea\0\u0c27\0\u0c64\0\u0ca1\0\u0cde\0\u0d1b"+
    "\0\u0d58\0\u016e\0\u0d95\0\u0dd2\0\u0e0f\0\u0e0f\0\u0e4c\0\u0e89"+
    "\0\u0ec6\0\u0f03\0\u0f40\0\u0f7d\0\u016e\0\u0fba\0\u0ff7\0\u0ff7"+
    "\0\u016e\0\u1034\0\u016e\0\u1071\0\u10ae\0\u10eb\0\u1128\0\u016e"+
    "\0\u1165\0\u016e\0\u11a2\0\u11df\0\u121c\0\u121c\0\u1259\0\u1296"+
    "\0\u12d3\0\u1310\0\u134d\0\u138a\0\u13c7\0\u1404\0\u1441\0\u147e"+
    "\0\u14bb\0\u14f8\0\u016e\0\u1535\0\u07a0\0\u016e\0\u1572\0\u016e"+
    "\0\u15af\0\u15ec\0\u1629\0\u1666\0\u16a3\0\u16e0\0\u171d\0\u175a"+
    "\0\u1797\0\u17d4\0\u1811\0\u016e\0\u0988\0\u0e0f\0\u184e\0\u188b"+
    "\0\u121c\0\u18c8\0\u1905\0\u1942\0\u197f\0\u19bc\0\u19f9\0\u1a36"+
    "\0\u1a73\0\u1ab0\0\u1aed\0\u1b2a\0\u1b67\0\u1ba4\0\u1be1\0\u1c1e"+
    "\0\u1c5b\0\u1c98\0\u016e\0\u1cd5\0\u1d12\0\u1d4f\0\u1d8c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[151];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\3\3\1\6\2\7\1\3\1\7"+
    "\1\3\1\5\1\3\30\7\1\3\5\7\2\3\6\7"+
    "\1\3\2\7\1\10\1\3\4\7\67\11\1\12\5\11"+
    "\7\0\1\13\1\0\1\14\1\15\4\0\1\13\1\0"+
    "\1\14\1\15\1\0\1\14\2\16\2\17\6\0\2\20"+
    "\2\21\2\22\1\0\3\23\2\24\3\0\2\25\2\26"+
    "\2\27\7\0\2\22\2\0\1\30\4\0\1\13\1\0"+
    "\1\14\1\15\4\0\1\13\1\0\1\14\1\15\1\0"+
    "\1\14\2\16\2\17\6\0\2\20\2\21\2\22\1\0"+
    "\3\23\2\24\3\0\2\25\2\26\2\27\7\0\2\22"+
    "\7\0\1\31\1\0\1\14\1\15\4\0\1\31\1\0"+
    "\1\14\1\15\1\0\1\14\2\16\2\17\4\0\2\32"+
    "\2\20\2\21\2\22\1\0\3\23\2\24\3\0\2\25"+
    "\2\26\2\27\7\0\2\22\7\0\1\33\1\0\1\14"+
    "\1\15\4\0\1\33\1\0\1\14\1\15\1\0\1\14"+
    "\2\16\2\17\6\0\2\20\2\21\2\22\1\0\3\23"+
    "\2\24\3\0\2\25\2\26\2\27\7\0\2\22\104\0"+
    "\1\13\1\0\1\14\1\15\4\0\1\13\1\0\1\14"+
    "\1\15\1\0\1\14\2\16\2\17\6\0\2\20\2\21"+
    "\2\22\1\0\3\23\2\24\3\0\2\34\2\26\2\27"+
    "\7\0\2\22\55\0\1\35\54\0\2\36\77\0\2\37"+
    "\67\0\2\40\36\0\1\41\1\42\5\41\2\0\1\41"+
    "\1\0\3\41\11\0\2\43\15\0\1\44\2\45\4\0"+
    "\1\41\2\46\4\0\1\41\2\0\2\41\62\0\2\47"+
    "\56\0\2\50\6\0\2\51\16\0\2\52\11\0\1\53"+
    "\7\0\1\53\106\0\2\54\51\0\1\55\7\0\1\55"+
    "\36\0\2\56\15\0\1\57\1\60\5\57\2\0\1\57"+
    "\1\61\3\57\4\0\1\61\10\0\2\62\11\0\1\57"+
    "\6\0\1\57\6\0\1\57\2\0\2\57\11\0\1\63"+
    "\17\0\2\56\6\0\2\56\12\0\2\56\63\0\2\64"+
    "\37\0\1\65\17\0\2\66\6\0\2\67\7\0\3\70"+
    "\61\0\2\36\12\0\2\71\24\0\1\72\3\0\1\73"+
    "\5\0\1\72\45\0\2\74\21\0\1\75\7\0\1\75"+
    "\14\0\2\36\43\0\1\63\17\0\2\56\6\0\2\56"+
    "\12\0\2\56\11\0\3\76\64\0\2\77\44\0\2\100"+
    "\15\0\3\55\5\0\2\101\15\0\1\102\1\103\5\102"+
    "\2\0\1\102\1\0\3\102\11\0\2\104\15\0\1\105"+
    "\2\106\4\0\1\102\2\107\4\0\1\102\2\0\2\102"+
    "\35\0\2\110\44\0\1\41\150\0\2\111\15\0\1\41"+
    "\1\42\5\41\2\0\1\41\1\0\3\41\30\0\1\41"+
    "\6\0\1\41\6\0\1\41\2\0\2\41\4\0\1\41"+
    "\1\42\5\41\2\0\1\41\1\0\3\41\30\0\1\41"+
    "\6\0\1\41\2\112\4\0\1\41\2\0\2\41\52\0"+
    "\3\56\72\0\3\113\33\0\1\114\7\0\1\114\36\0"+
    "\2\114\52\0\2\113\36\0\1\115\1\116\3\115\1\117"+
    "\1\115\2\0\1\115\1\0\3\115\7\0\2\120\17\0"+
    "\1\115\2\0\2\120\2\0\1\115\6\0\1\115\2\0"+
    "\2\115\31\0\2\110\46\0\1\121\1\122\5\121\2\0"+
    "\1\121\1\0\3\121\30\0\1\121\6\0\1\121\6\0"+
    "\1\121\2\0\2\121\4\0\1\123\1\124\5\123\2\0"+
    "\1\123\1\0\3\123\30\0\1\123\6\0\1\123\6\0"+
    "\1\123\2\0\2\123\6\0\1\57\104\0\1\125\7\0"+
    "\1\125\105\0\2\126\65\0\2\127\46\0\1\130\1\131"+
    "\5\130\2\0\1\130\1\0\3\130\30\0\1\130\6\0"+
    "\1\130\6\0\1\130\2\0\2\130\4\0\1\132\1\133"+
    "\5\132\2\0\1\132\1\0\3\132\11\0\2\134\15\0"+
    "\1\135\2\136\4\0\1\132\2\137\4\0\1\132\2\0"+
    "\2\132\33\0\2\140\15\0\3\70\5\0\2\141\24\0"+
    "\1\142\7\0\1\142\64\0\1\143\7\0\1\143\57\0"+
    "\1\72\3\0\1\73\5\0\1\72\71\0\1\144\7\0"+
    "\1\144\2\0\1\144\57\0\1\145\7\0\1\145\141\0"+
    "\3\146\64\0\2\147\15\0\1\121\1\122\5\121\2\0"+
    "\1\121\1\0\3\121\30\0\1\121\6\0\1\121\2\150"+
    "\4\0\1\121\2\0\2\121\6\0\1\102\150\0\2\151"+
    "\15\0\1\102\1\103\5\102\2\0\1\102\1\0\3\102"+
    "\30\0\1\102\6\0\1\102\6\0\1\102\2\0\2\102"+
    "\4\0\1\102\1\103\5\102\2\0\1\102\1\0\3\102"+
    "\30\0\1\102\6\0\1\102\2\152\4\0\1\102\2\0"+
    "\2\102\4\0\1\153\1\154\5\153\2\0\1\153\1\0"+
    "\3\153\30\0\1\153\6\0\1\153\6\0\1\153\2\0"+
    "\2\153\52\0\3\45\31\0\1\155\17\0\2\45\6\0"+
    "\2\45\12\0\2\45\22\0\1\156\1\157\5\156\2\0"+
    "\1\156\1\0\3\156\30\0\1\156\6\0\1\156\6\0"+
    "\1\156\2\0\2\156\4\0\1\160\1\161\5\160\2\0"+
    "\1\160\1\0\3\160\30\0\1\160\6\0\1\160\6\0"+
    "\1\160\2\0\2\160\6\0\1\115\72\0\1\115\1\116"+
    "\5\115\2\0\1\115\1\0\3\115\30\0\1\115\6\0"+
    "\1\115\6\0\1\115\2\0\2\115\6\0\1\121\74\0"+
    "\1\123\133\0\2\162\67\0\2\163\114\0\2\52\17\0"+
    "\1\130\74\0\1\132\150\0\2\164\15\0\1\132\1\133"+
    "\5\132\2\0\1\132\1\0\3\132\30\0\1\132\6\0"+
    "\1\132\6\0\1\132\2\0\2\132\4\0\1\132\1\133"+
    "\5\132\2\0\1\132\1\0\3\132\30\0\1\132\6\0"+
    "\1\132\2\165\4\0\1\132\2\0\2\132\62\0\2\166"+
    "\15\0\1\130\1\131\5\130\2\0\1\130\1\0\3\130"+
    "\30\0\1\130\6\0\1\130\2\167\4\0\1\130\2\0"+
    "\2\130\43\0\2\170\44\0\1\171\7\0\1\171\66\0"+
    "\1\172\7\0\1\172\67\0\1\173\66\0\1\174\7\0"+
    "\1\174\123\0\3\55\31\0\1\175\17\0\2\55\6\0"+
    "\2\55\12\0\2\55\70\0\3\106\31\0\1\176\17\0"+
    "\2\106\6\0\2\106\12\0\2\106\24\0\1\153\74\0"+
    "\1\156\74\0\1\160\123\0\2\177\73\0\2\200\110\0"+
    "\3\136\31\0\1\201\17\0\2\136\6\0\2\136\12\0"+
    "\2\136\70\0\3\70\31\0\1\65\17\0\2\70\6\0"+
    "\2\70\12\0\2\70\113\0\2\202\13\0\1\203\7\0"+
    "\1\203\2\0\1\203\63\0\1\204\65\0\1\205\2\0"+
    "\2\205\1\0\1\205\10\0\2\205\1\0\1\205\1\0"+
    "\1\205\1\0\1\205\1\0\1\205\1\0\1\205\1\0"+
    "\1\205\1\0\1\205\1\0\1\205\3\0\1\205\1\0"+
    "\1\205\4\0\1\205\1\0\1\205\1\0\1\205\2\0"+
    "\1\205\3\0\1\205\1\0\1\205\35\0\2\206\107\0"+
    "\2\206\30\0\1\207\26\0\2\210\6\0\1\74\41\0"+
    "\1\211\7\0\1\211\61\0\1\212\7\0\1\212\15\0"+
    "\2\32\42\0\1\205\2\0\2\205\1\0\1\205\2\0"+
    "\1\213\5\0\2\205\1\0\1\205\1\0\1\205\1\0"+
    "\1\205\1\0\1\205\1\0\1\205\1\0\1\205\1\0"+
    "\1\205\1\0\1\205\3\0\1\205\1\0\1\205\4\0"+
    "\1\205\1\0\1\205\1\0\1\205\2\0\1\205\3\0"+
    "\1\205\1\0\1\205\1\57\1\60\5\57\2\0\1\57"+
    "\1\0\3\57\30\0\1\57\6\0\1\57\6\0\1\57"+
    "\2\0\2\57\41\0\2\214\40\0\1\72\2\0\1\74"+
    "\1\73\5\0\1\72\73\0\1\72\132\0\2\71\25\0"+
    "\2\213\2\0\2\213\1\0\1\213\2\0\1\215\5\0"+
    "\2\213\1\0\1\213\1\0\1\213\1\0\1\213\1\0"+
    "\1\213\1\0\1\213\1\0\1\213\1\0\1\213\1\0"+
    "\1\213\3\0\1\213\1\0\2\213\3\0\1\213\1\0"+
    "\1\213\1\0\1\213\2\0\1\213\3\0\1\213\1\0"+
    "\1\213\25\0\2\216\2\217\117\0\1\220\60\0\2\221"+
    "\65\0\2\222\115\0\1\220\14\0\1\223\45\0\2\224"+
    "\57\0\2\225\111\0\2\226\63\0\2\226\75\0\2\227"+
    "\51\0\1\74\61\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7625];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\4\1\1\11\1\1\1\11\1\1\26\0\1\11"+
    "\1\1\1\0\1\1\12\0\1\11\1\1\2\0\1\1"+
    "\1\0\1\1\4\0\1\11\7\0\1\11\1\1\1\0"+
    "\1\1\7\0\1\11\2\1\1\0\1\11\1\1\1\11"+
    "\1\1\3\0\1\11\1\1\1\11\1\1\1\0\1\1"+
    "\15\0\1\11\2\1\1\11\1\1\1\11\1\1\12\0"+
    "\1\11\2\1\2\0\1\1\21\0\1\11\4\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[151];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	
	/* Custom java code */

    @Override
	public String language() { return "IT"; }

	@Override
	public String version() { return "1.2"; }


	/* An empty default constructor is required to comply with LinkolnService */
	
	public Stopwords() { }
	
	@Override
	public final boolean run() {
		
		try {
			
			yyreset(new StringReader(getInput()));
			yylex();
			
		} catch (IOException e) {

			e.printStackTrace();
			return false;
		}
		
		return true;
	}
	
	@Override
	protected void addValue() {
	
		//annotationEntity.setValue("value");
	} 



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Stopwords(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 382) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { addText(yytext());
	position++;
            } 
            // fall through
          case 24: break;
          case 2: 
            { addText(yytext());
		position++;
            } 
            // fall through
          case 25: break;
          case 3: 
            { annotate(new Stopword(), "TO", true, true);
            } 
            // fall through
          case 26: break;
          case 4: 
            { annotate(new Stopword(), "OR", true, true);
            } 
            // fall through
          case 27: break;
          case 5: 
            { annotate(new Stopword(), "DET", true, false);
            } 
            // fall through
          case 28: break;
          case 6: 
            { annotate(new Stopword(), "OF", true, false);
            } 
            // fall through
          case 29: break;
          case 7: 
            { annotate(new Stopword(), "AND", true, true);
            } 
            // fall through
          case 30: break;
          case 8: 
            { annotate(new Stopword(), "ON", true, true);
            } 
            // fall through
          case 31: break;
          case 9: 
            { annotate(new Stopword(), "INDET", true, true);
            } 
            // fall through
          case 32: break;
          case 10: 
            { annotate(new Stopword(), "INDET", true, false);
            } 
            // fall through
          case 33: break;
          case 11: 
            { annotate(new Stopword(), "IN", true, true);
            } 
            // fall through
          case 34: break;
          case 12: 
            { annotate(new Stopword(), "DET", true, true);
            } 
            // fall through
          case 35: break;
          case 13: 
            { annotate(new Stopword(), "OF", true, true);
            } 
            // fall through
          case 36: break;
          case 14: 
            { annotate(new Stopword(), "FROM", true, true);
            } 
            // fall through
          case 37: break;
          case 15: 
            { annotate(new Stopword(), "ACROSS", true, true);
            } 
            // fall through
          case 38: break;
          case 16: 
            { annotate(new Stopword(), "TO", true, false);
            } 
            // fall through
          case 39: break;
          case 17: 
            { annotate(new Stopword(), "", true, true);
            } 
            // fall through
          case 40: break;
          case 18: 
            { annotate(new Stopword(), "WITH", true, true);
            } 
            // fall through
          case 41: break;
          case 19: 
            { addText(yytext());
		position--; //account for the following {LKN_C} character
		yybegin(YYINITIAL);
            } 
            // fall through
          case 42: break;
          case 20: 
            { annotate(new Stopword(), "IN", true, false);
            } 
            // fall through
          case 43: break;
          case 21: 
            { annotate(new Stopword(), "ON", true, false);
            } 
            // fall through
          case 44: break;
          case 22: 
            { annotate(new Stopword(), "FROM", true, false);
            } 
            // fall through
          case 45: break;
          case 23: 
            { addText(yytext()); 
	yybegin(lkn);
            } 
            // fall through
          case 46: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Stopwords [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Stopwords scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Stopwords(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
