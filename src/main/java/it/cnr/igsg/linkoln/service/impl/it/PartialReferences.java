/* The following code was generated by JFlex 1.7.0 */

/*******************************************************************************
 * Copyright (c) 2016-2021 Institute of Legal Information and Judicial Systems IGSG-CNR (formerly ITTIG-CNR)
 * 
 * This program and the accompanying materials  are made available under the terms of the GNU General Public
 * License as published by the Free Software Foundation; either version 3 of the License, or (at your option)
 * any later version. 
 * You may not use this work except in compliance with the Licence.
 * You may obtain a copy of the Licence at: https://www.gnu.org/licenses/gpl-3.0.txt
 * Unless required by applicable law or agreed to in writing, software distributed under the Licence is 
 * distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the Licence for the specific language governing permissions and limitations under the Licence.
 *  
 * Authors: Lorenzo Bacci (IGSG-CNR)
 ******************************************************************************/
 package it.cnr.igsg.linkoln.service.impl.it;

import java.io.IOException;
import java.io.StringReader;
import java.util.HashSet;
import java.util.Set;

import it.cnr.igsg.linkoln.entity.AnnotationEntity;
import it.cnr.igsg.linkoln.entity.DocumentDate;
import it.cnr.igsg.linkoln.entity.DocumentType;
import it.cnr.igsg.linkoln.entity.Number;
import it.cnr.igsg.linkoln.entity.Reference;
import it.cnr.igsg.linkoln.service.LinkolnAnnotationService;

import it.cnr.igsg.linkoln.service.impl.Util;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>jflex/PartialReferences.jflex</tt>
 */
public class PartialReferences extends LinkolnAnnotationService {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int lkn = 2;
  public static final int referenceState = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\1\1\0\1\1\1\1\22\0\1\1\5\0\1\5"+
    "\1\0\1\1\1\1\2\0\1\1\1\2\1\0\1\42\1\41\1\41"+
    "\1\41\1\41\1\41\1\41\1\41\1\41\1\41\1\41\1\13\1\12"+
    "\5\0\1\22\1\7\1\32\1\50\1\30\1\17\1\24\1\17\1\17"+
    "\1\17\1\52\1\46\1\44\1\6\1\40\1\11\1\17\1\26\1\20"+
    "\1\36\1\34\1\17\1\60\1\17\1\56\1\17\1\53\1\0\1\54"+
    "\1\0\1\4\1\0\1\21\1\15\1\31\1\47\1\27\1\0\1\23"+
    "\1\0\1\0\1\0\1\51\1\45\1\43\1\14\1\37\1\16\1\0"+
    "\1\25\1\10\1\35\1\33\1\0\1\57\1\0\1\55\1\0\12\0"+
    "\1\0\44\0\1\0\5\0\1\0\3\0\1\0\5\0\1\0\5\0"+
    "\1\0\1\0\4\0\1\0\1\0\1\0\1\0\2\0\1\0\1\0"+
    "\2\0\1\0\1\0\1\0\1\0\3\0\2\0\1\0\1\0\2\0"+
    "\3\0\1\0\1\0\4\0\1\0\1\0\1\0\1\0\2\0\1\0"+
    "\1\0\2\0\1\0\1\0\1\0\1\0\3\0\2\0\1\0\1\0"+
    "\2\0\53\0\1\0\1\0\6\0\2\0\66\0\1\0\1\0\4\0"+
    "\1\0\1\0\17\0\1\10\u1c88\0\1\0\1\0\216\0\2\0\42\0"+
    "\1\0\1\0\u0144\0\1\1\20\0\1\3\1\3\4\0\1\0\16\0"+
    "\1\0\1\0\u0100\0\1\51\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\2\2\2\3\12\0\1\4\77\0\1\5"+
    "\72\0\1\5\15\0\1\5\7\0\1\5\4\0\1\5"+
    "\17\0\1\6\11\0\1\7\15\0\1\10\67\0\1\10";

  private static int [] zzUnpackAction() {
    int [] result = new int[266];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\223\0\365\0\223"+
    "\0\u0126\0\u0157\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d"+
    "\0\u02ae\0\u02df\0\u0310\0\223\0\u0341\0\u0372\0\u03a3\0\u03d4"+
    "\0\u0405\0\u0436\0\u0467\0\u0498\0\u04c9\0\u04fa\0\u052b\0\u055c"+
    "\0\u058d\0\u05be\0\u05ef\0\u0620\0\u0651\0\u0682\0\u06b3\0\u06e4"+
    "\0\u0715\0\u0746\0\u0777\0\u07a8\0\u07d9\0\u080a\0\u083b\0\u086c"+
    "\0\u089d\0\u08ce\0\u08ff\0\u0930\0\u0961\0\u0992\0\u09c3\0\u09f4"+
    "\0\u0a25\0\u0a56\0\u0a87\0\u0ab8\0\u0ae9\0\u0b1a\0\u0b4b\0\u0b7c"+
    "\0\u0bad\0\u0bde\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2\0\u0cd3\0\u0d04"+
    "\0\u0d35\0\u0d66\0\u0d97\0\u0dc8\0\u0df9\0\u0e2a\0\u0e5b\0\u0e8c"+
    "\0\u0ebd\0\u0eee\0\u0f1f\0\223\0\u0f50\0\u0f81\0\u0fb2\0\u0fe3"+
    "\0\u1014\0\u1045\0\u1076\0\u10a7\0\u10d8\0\u1109\0\u113a\0\u116b"+
    "\0\u119c\0\u11cd\0\u11fe\0\u122f\0\u1260\0\u1291\0\u12c2\0\u12f3"+
    "\0\u1324\0\u1355\0\u1386\0\u13b7\0\u13e8\0\u1419\0\u144a\0\u147b"+
    "\0\u14ac\0\u14dd\0\u150e\0\u153f\0\u1570\0\u15a1\0\u15d2\0\u1603"+
    "\0\u1634\0\u1665\0\u1696\0\u16c7\0\u16f8\0\u1729\0\u175a\0\u178b"+
    "\0\u17bc\0\u17ed\0\u181e\0\u184f\0\u1880\0\u18b1\0\u18e2\0\u1913"+
    "\0\u1944\0\u1975\0\u19a6\0\u19d7\0\u1a08\0\u1a39\0\u1a08\0\u1a6a"+
    "\0\u1a9b\0\u1acc\0\u1afd\0\u1b2e\0\u1b5f\0\u1b90\0\u1bc1\0\u1bf2"+
    "\0\u1c23\0\u1c54\0\u1c85\0\u1cb6\0\u1c85\0\u1ce7\0\u1d18\0\u1d49"+
    "\0\u1d7a\0\u1dab\0\u1ddc\0\u1e0d\0\u1ddc\0\u1e3e\0\u1e6f\0\u1ea0"+
    "\0\u1ed1\0\u1ed1\0\u1f02\0\u1f33\0\u1f64\0\u1f95\0\u1fc6\0\u1ff7"+
    "\0\u2028\0\u2059\0\u208a\0\u20bb\0\u20ec\0\u211d\0\u214e\0\u217f"+
    "\0\u21b0\0\223\0\u21e1\0\u2212\0\u2243\0\u2274\0\u22a5\0\u22d6"+
    "\0\u2307\0\u2338\0\u2369\0\223\0\u239a\0\u23cb\0\u23fc\0\u242d"+
    "\0\u245e\0\u248f\0\u24c0\0\u24f1\0\u2522\0\u2553\0\u2584\0\u25b5"+
    "\0\u25e6\0\u22d6\0\u2617\0\u2648\0\u2679\0\u26aa\0\u26db\0\u270c"+
    "\0\u273d\0\u276e\0\u279f\0\u27d0\0\u2801\0\u2832\0\u2863\0\u2894"+
    "\0\u28c5\0\u28f6\0\u2927\0\u2958\0\u2989\0\u29ba\0\u29eb\0\u2a1c"+
    "\0\u2a4d\0\u2a7e\0\u2aaf\0\u2ae0\0\u2b11\0\u2b42\0\u2b73\0\u2ba4"+
    "\0\u2bd5\0\u2c06\0\u2c37\0\u2c68\0\u2c99\0\u2cca\0\u2cfb\0\u2d2c"+
    "\0\u2d5d\0\u2d8e\0\u2dbf\0\u2df0\0\u2e21\0\u2e52\0\u2e83\0\u2eb4"+
    "\0\u2ee5\0\u2f16\0\u2f47\0\u2f78\0\u2fa9\0\u2fda\0\u300b\0\u303c"+
    "\0\u306d\0\223";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[266];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\53\4\1\5\5\4\53\6\1\7\5\6\53\10\1\11"+
    "\5\10\126\0\2\12\54\0\1\13\63\0\2\14\63\0"+
    "\2\15\53\0\2\16\63\0\2\17\14\0\1\20\5\0"+
    "\1\20\115\0\2\21\14\0\1\22\5\0\1\22\57\0"+
    "\1\23\53\0\1\24\5\0\1\24\57\0\1\25\51\0"+
    "\1\26\1\0\1\27\1\26\1\0\1\26\2\0\1\30"+
    "\2\0\2\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\31\1\32\1\33\1\34\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\3\0\1\26\1\35\1\36\1\37\1\40"+
    "\1\0\1\26\3\0\1\26\1\0\1\26\6\0\1\41"+
    "\1\0\1\42\3\0\1\41\3\0\1\42\6\0\2\43"+
    "\2\44\12\0\2\45\2\46\14\0\1\26\1\0\2\26"+
    "\1\0\1\26\1\0\1\47\3\0\2\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\3\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\3\0\1\26"+
    "\1\0\1\26\4\0\1\26\1\0\2\26\1\0\1\26"+
    "\1\0\1\47\3\0\2\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\50\1\51"+
    "\1\0\1\26\1\0\1\26\3\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\3\0\1\26\1\0\1\26"+
    "\33\0\2\50\57\0\2\52\30\0\1\26\1\0\2\26"+
    "\1\0\1\26\1\0\1\47\3\0\2\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\52\1\53\1\0\1\26\1\0\1\26\3\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\3\0\1\26"+
    "\1\0\1\26\45\0\2\54\16\0\1\26\1\0\2\26"+
    "\1\0\1\26\1\0\1\47\3\0\2\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\3\0\1\26"+
    "\1\54\1\55\1\0\1\26\1\0\1\26\3\0\1\26"+
    "\1\0\1\26\27\0\2\56\34\0\1\26\1\0\2\26"+
    "\1\0\1\26\1\0\1\47\3\0\2\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\56\1\57\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\3\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\3\0\1\26"+
    "\1\0\1\26\37\0\2\60\24\0\1\26\1\0\2\26"+
    "\1\0\1\26\1\0\1\47\3\0\2\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\60\1\61\3\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\3\0\1\26"+
    "\1\0\1\26\33\0\2\62\61\0\2\63\55\0\2\64"+
    "\71\0\2\65\41\0\2\66\67\0\2\67\22\0\3\47"+
    "\1\0\2\47\1\0\1\47\1\0\1\70\3\0\2\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\2\47"+
    "\2\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\3\0\1\47\1\0\1\47\43\0\2\71\20\0\1\26"+
    "\1\0\2\26\1\0\1\26\1\0\1\47\3\0\2\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\2\0\1\71\1\72\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\3\0\1\26\1\0\1\26\4\0\1\73\60\0"+
    "\1\74\1\0\2\26\1\0\1\26\1\0\1\47\3\0"+
    "\2\26\1\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\3\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\3\0\1\26\1\0\1\26\4\0\1\75\60\0"+
    "\1\76\1\0\2\26\1\0\1\26\1\0\1\47\3\0"+
    "\2\26\1\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\3\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\3\0\1\26\1\0\1\26\23\0\2\54\40\0"+
    "\1\26\1\0\2\26\1\0\1\26\1\0\1\47\3\0"+
    "\2\26\1\0\1\26\1\54\1\55\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\3\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\3\0\1\26\1\0\1\26\31\0\2\77\32\0"+
    "\1\26\1\0\2\26\1\0\1\26\1\0\1\47\3\0"+
    "\2\26\1\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\77\1\100\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\3\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\3\0\1\26\1\0\1\26\43\0\2\101\25\0"+
    "\1\102\4\0\1\102\46\0\1\103\60\0\1\104\77\0"+
    "\2\65\65\0\2\105\67\0\1\106\26\0\1\107\5\0"+
    "\1\107\47\0\1\26\1\0\1\26\1\110\1\0\1\26"+
    "\1\0\1\47\1\0\1\107\1\0\2\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\3\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\3\0\1\26"+
    "\1\0\1\26\45\0\2\35\16\0\1\26\1\0\2\26"+
    "\1\0\1\26\1\0\1\47\3\0\2\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\3\0\1\26"+
    "\1\35\1\36\1\0\1\26\1\0\1\26\3\0\1\26"+
    "\1\0\1\26\47\0\2\111\14\0\1\26\1\0\2\26"+
    "\1\0\1\26\1\0\1\47\3\0\2\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\3\0\1\26"+
    "\1\0\1\26\1\111\1\112\1\0\1\26\3\0\1\26"+
    "\1\0\1\26\4\0\1\113\30\0\2\114\26\0\1\115"+
    "\1\0\2\26\1\0\1\26\1\0\1\47\3\0\2\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\114\1\116\1\0\1\26"+
    "\3\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\3\0\1\26\1\0\1\26\7\0\1\117\5\0\1\117"+
    "\122\0\2\120\45\0\2\45\61\0\2\121\14\0\1\122"+
    "\30\0\2\123\63\0\1\106\12\0\1\124\33\0\2\125"+
    "\34\0\1\26\1\0\2\26\1\0\1\26\1\0\1\47"+
    "\3\0\2\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\125\1\126\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\3\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\3\0\1\26\1\0\1\26\37\0\2\127"+
    "\24\0\1\26\1\0\2\26\1\0\1\26\1\0\1\47"+
    "\3\0\2\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\127\1\130\3\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\3\0\1\26\1\0\1\26\47\0\2\131"+
    "\65\0\2\132\6\0\1\26\1\0\2\26\1\0\1\26"+
    "\1\0\1\47\3\0\2\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\3\0\1\26\1\0\1\26"+
    "\1\131\1\133\1\0\1\26\3\0\1\26\1\0\1\26"+
    "\4\0\1\26\1\0\2\26\1\0\1\26\1\0\1\47"+
    "\3\0\2\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\3\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\2\0\1\132\1\134\1\0\1\26\27\0"+
    "\2\135\43\0\1\136\104\0\2\137\67\0\2\140\65\0"+
    "\2\141\27\0\2\142\36\0\1\26\1\0\2\26\1\0"+
    "\1\26\1\0\1\47\3\0\2\26\1\0\1\26\1\0"+
    "\1\26\1\142\1\143\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\1\26\3\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\1\26\3\0\1\26\1\0"+
    "\1\26\31\0\2\144\32\0\1\26\1\0\2\26\1\0"+
    "\1\26\1\0\1\47\3\0\2\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\144\1\145\1\0"+
    "\1\26\1\0\1\26\1\0\1\26\3\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\1\26\3\0\1\26\1\0"+
    "\1\26\21\0\2\146\47\0\1\147\4\0\1\147\46\0"+
    "\1\26\1\0\2\26\1\0\1\26\1\0\1\47\3\0"+
    "\2\26\1\146\1\150\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\3\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\3\0\1\26\1\0\1\26\4\0\1\26\1\0"+
    "\2\26\1\0\1\151\1\0\1\47\2\0\1\147\2\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\3\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\3\0\1\26\1\0\1\26\25\0\2\152\34\0\3\136"+
    "\1\0\2\136\1\0\1\136\1\0\1\153\3\0\2\136"+
    "\1\0\1\136\1\0\1\136\1\0\1\136\1\0\1\136"+
    "\1\0\1\136\1\0\1\136\1\0\1\136\1\0\2\136"+
    "\2\0\1\136\1\0\1\136\1\0\1\136\1\0\1\136"+
    "\3\0\1\136\1\0\1\136\31\0\2\154\47\0\2\155"+
    "\47\0\1\156\4\0\1\156\55\0\1\157\51\0\1\26"+
    "\1\0\2\26\1\0\1\26\1\0\1\160\3\0\2\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\3\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\3\0\1\26\1\0\1\26\35\0\2\114\26\0\1\26"+
    "\1\0\2\26\1\0\1\26\1\0\1\47\3\0\2\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\114\1\116\1\0\1\26"+
    "\3\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\3\0\1\26\1\0\1\26\35\0\2\161\51\0\2\162"+
    "\34\0\1\26\1\0\2\26\1\0\1\26\1\0\1\47"+
    "\3\0\2\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\161\1\163"+
    "\1\0\1\26\3\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\3\0\1\26\1\0\1\26\4\0\1\26"+
    "\1\0\2\26\1\0\1\26\1\0\1\47\3\0\2\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\162\1\164"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\3\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\3\0\1\26\1\0\1\26\13\0\1\165\106\0\1\166"+
    "\54\0\2\123\57\0\2\156\51\0\2\152\32\0\3\167"+
    "\1\0\2\167\1\0\1\167\1\0\1\170\3\0\2\167"+
    "\1\0\1\167\1\0\1\167\1\0\1\167\1\0\1\167"+
    "\1\0\1\167\1\0\1\167\1\0\1\167\1\0\1\167"+
    "\1\171\2\0\1\167\1\0\1\167\1\0\1\167\1\0"+
    "\1\167\3\0\1\167\1\0\1\167\2\0\3\172\1\0"+
    "\2\172\1\0\1\172\1\0\1\173\3\0\2\172\1\0"+
    "\1\172\1\0\1\172\1\0\1\172\1\0\1\172\1\0"+
    "\1\172\1\0\1\172\1\0\1\172\1\0\1\172\1\174"+
    "\2\0\1\172\1\0\1\172\1\0\1\172\1\0\1\172"+
    "\3\0\1\172\1\0\1\172\27\0\2\175\43\0\1\176"+
    "\51\0\1\26\1\0\2\26\1\0\1\26\1\0\1\47"+
    "\3\0\2\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\175\1\177\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\3\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\3\0\1\26\1\0\1\26\4\0\1\26"+
    "\1\0\2\26\1\0\1\26\1\0\1\200\3\0\2\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\3\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\3\0\1\26\1\0\1\26\2\0\3\165\1\0\2\165"+
    "\1\0\1\165\1\0\1\201\3\0\2\165\1\0\1\165"+
    "\1\0\1\165\1\0\1\165\1\0\1\165\1\0\1\165"+
    "\1\0\1\165\1\0\1\165\1\0\2\165\2\0\1\165"+
    "\1\0\1\165\1\0\1\165\1\0\1\165\3\0\1\165"+
    "\1\0\1\165\41\0\1\166\12\0\1\202\6\0\3\167"+
    "\1\0\2\167\1\0\1\167\1\0\1\170\3\0\2\167"+
    "\1\0\1\167\1\0\1\167\1\0\1\167\1\0\1\167"+
    "\1\0\1\167\1\0\1\167\1\0\1\167\1\0\2\167"+
    "\2\0\1\167\1\0\1\167\1\0\1\167\1\0\1\167"+
    "\3\0\1\167\1\0\1\167\41\0\1\203\21\0\1\204"+
    "\2\167\1\0\2\167\1\0\1\167\1\0\1\170\3\0"+
    "\2\167\1\0\1\167\1\0\1\167\1\0\1\167\1\0"+
    "\1\167\1\0\1\167\1\0\1\167\1\0\1\167\1\0"+
    "\1\167\1\171\2\0\1\167\1\0\1\167\1\0\1\167"+
    "\1\0\1\167\3\0\1\167\1\0\1\167\2\0\3\172"+
    "\1\0\2\172\1\0\1\172\1\0\1\173\3\0\2\172"+
    "\1\0\1\172\1\0\1\172\1\0\1\172\1\0\1\172"+
    "\1\0\1\172\1\0\1\172\1\0\1\172\1\0\2\172"+
    "\2\0\1\172\1\0\1\172\1\0\1\172\1\0\1\172"+
    "\3\0\1\172\1\0\1\172\41\0\1\205\21\0\1\206"+
    "\2\172\1\0\2\172\1\0\1\172\1\0\1\173\3\0"+
    "\2\172\1\0\1\172\1\0\1\172\1\0\1\172\1\0"+
    "\1\172\1\0\1\172\1\0\1\172\1\0\1\172\1\0"+
    "\1\172\1\174\2\0\1\172\1\0\1\172\1\0\1\172"+
    "\1\0\1\172\3\0\1\172\1\0\1\172\13\0\1\207"+
    "\47\0\3\176\1\0\2\176\1\0\1\176\1\0\1\210"+
    "\3\0\2\176\1\0\1\176\1\0\1\176\1\0\1\176"+
    "\1\0\1\176\1\0\1\176\1\0\1\176\1\0\1\176"+
    "\1\0\2\176\2\0\1\176\1\0\1\176\1\0\1\176"+
    "\1\0\1\176\3\0\1\176\1\0\1\176\4\0\1\26"+
    "\1\0\2\26\1\0\1\26\1\0\1\211\3\0\2\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\3\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\3\0\1\26\1\0\1\26\2\0\3\200\1\0\2\200"+
    "\1\0\1\200\1\0\1\212\3\0\2\200\1\0\1\200"+
    "\1\0\1\200\1\0\1\200\1\0\1\200\1\0\1\200"+
    "\1\0\1\200\1\0\1\200\1\0\2\200\2\0\1\200"+
    "\1\0\1\200\1\0\1\200\1\0\1\200\3\0\1\200"+
    "\1\0\1\200\41\0\1\213\17\0\53\214\1\0\5\214"+
    "\41\0\1\203\12\0\1\215\6\0\3\167\1\0\2\167"+
    "\1\0\1\167\1\0\1\170\3\0\2\167\1\0\1\167"+
    "\1\0\1\167\1\0\1\167\1\0\1\167\1\0\1\167"+
    "\1\0\1\167\1\0\1\167\1\0\1\167\1\216\2\0"+
    "\1\167\1\0\1\167\1\0\1\167\1\0\1\167\3\0"+
    "\1\167\1\0\1\167\41\0\1\205\12\0\1\217\6\0"+
    "\3\172\1\0\2\172\1\0\1\172\1\0\1\173\3\0"+
    "\2\172\1\0\1\172\1\0\1\172\1\0\1\172\1\0"+
    "\1\172\1\0\1\172\1\0\1\172\1\0\1\172\1\0"+
    "\1\172\1\220\2\0\1\172\1\0\1\172\1\0\1\172"+
    "\1\0\1\172\3\0\1\172\1\0\1\172\2\0\3\207"+
    "\1\0\2\207\1\0\1\207\1\0\1\221\3\0\2\207"+
    "\1\0\1\207\1\0\1\207\1\0\1\207\1\0\1\207"+
    "\1\0\1\207\1\0\1\207\1\0\1\207\1\0\2\207"+
    "\2\0\1\207\1\0\1\207\1\0\1\207\1\0\1\207"+
    "\3\0\1\207\1\0\1\207\41\0\1\222\21\0\3\211"+
    "\1\0\2\211\1\0\1\211\1\0\1\223\3\0\2\211"+
    "\1\0\1\211\1\0\1\211\1\0\1\211\1\0\1\211"+
    "\1\0\1\211\1\0\1\211\1\0\1\211\1\0\2\211"+
    "\2\0\1\211\1\0\1\211\1\0\1\211\1\0\1\211"+
    "\3\0\1\211\1\0\1\211\41\0\1\224\60\0\1\213"+
    "\12\0\1\225\4\0\53\214\1\226\5\214\53\227\1\0"+
    "\5\227\2\0\3\167\1\0\2\167\1\0\1\167\1\0"+
    "\1\230\3\0\2\167\1\0\1\167\1\0\1\167\1\0"+
    "\1\167\1\0\1\167\1\0\1\167\1\0\1\167\1\0"+
    "\1\167\1\0\1\167\1\216\2\0\1\167\1\0\1\167"+
    "\1\0\1\167\1\0\1\167\3\0\1\167\1\0\1\167"+
    "\2\0\3\172\1\0\2\172\1\0\1\172\1\0\1\231"+
    "\3\0\2\172\1\0\1\172\1\0\1\172\1\0\1\172"+
    "\1\0\1\172\1\0\1\172\1\0\1\172\1\0\1\172"+
    "\1\0\1\172\1\220\2\0\1\172\1\0\1\172\1\0"+
    "\1\172\1\0\1\172\3\0\1\172\1\0\1\172\41\0"+
    "\1\232\60\0\1\222\12\0\1\233\45\0\1\234\60\0"+
    "\1\224\12\0\1\235\4\0\53\236\1\0\5\236\42\0"+
    "\1\237\16\0\53\227\1\240\5\227\41\0\1\241\60\0"+
    "\1\242\60\0\1\232\12\0\1\243\4\0\53\244\1\0"+
    "\5\244\41\0\1\234\12\0\1\245\4\0\53\236\1\246"+
    "\5\236\45\0\2\247\54\0\1\250\57\0\1\241\12\0"+
    "\1\251\45\0\1\242\12\0\1\252\4\0\53\253\1\0"+
    "\5\253\53\244\1\254\5\244\42\0\1\255\67\0\2\256"+
    "\53\0\2\257\12\0\53\260\1\0\5\260\53\253\1\261"+
    "\5\253\42\0\1\262\63\0\2\263\20\0\1\264\5\0"+
    "\1\264\115\0\2\265\6\0\53\260\1\266\5\260\42\0"+
    "\1\267\63\0\2\270\63\0\2\271\62\0\1\272\12\0"+
    "\1\273\5\0\1\273\106\0\1\274\63\0\2\275\63\0"+
    "\2\276\14\0\1\277\5\0\1\277\120\0\1\300\51\0"+
    "\2\301\63\0\2\302\14\0\1\303\5\0\1\303\120\0"+
    "\1\304\5\0\4\300\1\305\4\0\2\300\37\0\1\306"+
    "\56\0\2\307\14\0\1\310\5\0\1\310\120\0\1\311"+
    "\12\0\1\312\5\0\1\312\111\0\2\313\20\0\1\314"+
    "\5\0\1\314\120\0\1\315\5\0\4\311\1\316\4\0"+
    "\2\311\37\0\1\317\14\0\1\320\5\0\1\320\114\0"+
    "\2\321\62\0\1\322\5\0\4\315\1\323\4\0\2\315"+
    "\37\0\1\324\13\0\1\325\5\0\1\325\111\0\2\326"+
    "\22\0\1\327\7\0\1\327\46\0\1\330\5\0\1\330"+
    "\52\0\1\331\5\0\1\331\111\0\2\332\21\0\1\333"+
    "\5\0\1\333\114\0\2\334\17\0\1\335\4\0\1\335"+
    "\55\0\1\336\54\0\1\337\5\0\1\337\114\0\2\340"+
    "\16\0\1\341\7\0\1\341\46\0\1\342\5\0\1\342"+
    "\56\0\1\300\56\0\1\343\7\0\1\343\26\0\2\344"+
    "\20\0\1\345\7\0\1\345\46\0\1\346\5\0\1\346"+
    "\55\0\1\347\4\0\1\347\55\0\1\350\102\0\2\351"+
    "\61\0\2\352\31\0\1\353\4\0\1\353\55\0\1\354"+
    "\57\0\1\311\54\0\1\355\1\0\1\356\3\0\1\355"+
    "\3\0\1\356\26\0\2\344\21\0\1\357\4\0\1\357"+
    "\73\0\2\360\40\0\1\315\54\0\1\355\1\0\1\361"+
    "\3\0\1\355\3\0\1\361\73\0\2\362\61\0\2\363"+
    "\101\0\2\364\4\0\1\365\111\0\2\366\65\0\2\367"+
    "\25\0\1\370\4\0\1\370\55\0\1\167\114\0\2\371"+
    "\21\0\1\372\4\0\1\372\51\0\1\373\5\0\1\373"+
    "\122\0\2\162\21\0\2\374\115\0\2\175\27\0\2\375"+
    "\65\0\2\376\47\0\2\377\61\0\2\377\43\0\1\u0100"+
    "\47\0\3\u0100\1\0\2\u0100\1\0\1\u0100\1\0\1\u0101"+
    "\3\0\2\u0100\1\0\1\u0100\1\0\1\u0100\1\0\1\u0100"+
    "\1\0\1\u0100\1\0\1\u0100\1\0\1\u0100\1\0\1\u0100"+
    "\1\0\2\u0100\2\0\1\u0100\1\0\1\u0100\1\0\1\u0100"+
    "\1\0\1\u0100\3\0\1\u0100\1\0\1\u0100\41\0\1\u0102"+
    "\60\0\1\u0102\12\0\1\u0103\4\0\53\u0104\1\0\60\u0104"+
    "\1\u0105\5\u0104\42\0\1\u0106\63\0\2\u0107\63\0\2\u0108"+
    "\14\0\1\u0109\5\0\1\u0109\120\0\1\u010a\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12446];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\1\1\1\11\1\1\12\0"+
    "\1\11\77\0\1\11\72\0\1\1\15\0\1\1\7\0"+
    "\1\1\4\0\1\1\17\0\1\11\11\0\1\11\15\0"+
    "\1\1\67\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[266];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	
	/* Custom java code */

    @Override
	public String language() { return "IT"; }

	@Override
	public String version() { return "0.2"; }


	/* An empty default constructor is required to comply with LinkolnService */
	
	public PartialReferences() { }
	
	@Override
	public final boolean run() {
		
		try {
			
			yyreset(new StringReader(getInput()));
			yylex();
			
		} catch (IOException e) {

			e.printStackTrace();
			return false;
		}
		
		return true;
	}
	
	@Override
	protected void addValue() {
	
		//annotationEntity.setValue("value");
	} 
	
	private void startReference() {
	
		annotationEntity = new Reference();
	
		annotationEntity.setPosition(position);
		((Reference) annotationEntity).setText(Util.removeAllAnnotations(yytext()));
		((Reference) annotationEntity).setContext(Util.removeAllAnnotations(yytext()));
		
		length = yylength();		
	
		yypushback(length);
		offset = 0;
	
		yybegin(referenceState);	 
	}

	private void readFeature() {
	
		AnnotationEntity retrievedEntity = retrieveEntity(yytext());
		
		offset += yylength();

		if(offset > length) {
		
			yypushback(yylength());
			addEntity(annotationEntity);
			yybegin(0);
		}

		annotationEntity.addRelatedEntity(retrievedEntity);
		retrievedEntity.addRelatedEntity(annotationEntity);
		
		position += retrievedEntity.getText().length();
	}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PartialReferences(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 382) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { addText(yytext());
	position++;
            } 
            // fall through
          case 9: break;
          case 2: 
            { addText(yytext());
		position++;
            } 
            // fall through
          case 10: break;
          case 3: 
            { offset++;
		position++;
		
		if(offset >= length) {
			
			if(offset > length) {
				yypushback(1);
				position--;
			}
			
			addEntity(annotationEntity);
			
			yybegin(0);
		}
            } 
            // fall through
          case 11: break;
          case 4: 
            { addText(yytext());
		position--; //account for the following {LKN_C} character
		yybegin(YYINITIAL);
            } 
            // fall through
          case 12: break;
          case 5: 
            { addText(yytext()); 
	yybegin(lkn);
            } 
            // fall through
          case 13: break;
          case 6: 
            { AnnotationEntity retrievedEntity = retrieveEntity(yytext());
		offset += yylength();
		position += retrievedEntity.getText().length();
            } 
            // fall through
          case 14: break;
          case 7: 
            { readFeature();
            } 
            // fall through
          case 15: break;
          case 8: 
            { startReference();
            } 
            // fall through
          case 16: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java PartialReferences [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        PartialReferences scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new PartialReferences(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
