/* The following code was generated by JFlex 1.7.0 */

/*******************************************************************************
 * Copyright (c) 2016-2021 Institute of Legal Information and Judicial Systems IGSG-CNR (formerly ITTIG-CNR)
 * 
 * This program and the accompanying materials  are made available under the terms of the GNU General Public
 * License as published by the Free Software Foundation; either version 3 of the License, or (at your option)
 * any later version. 
 * You may not use this work except in compliance with the Licence.
 * You may obtain a copy of the Licence at: https://www.gnu.org/licenses/gpl-3.0.txt
 * Unless required by applicable law or agreed to in writing, software distributed under the Licence is 
 * distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the Licence for the specific language governing permissions and limitations under the Licence.
 *  
 * Authors: Lorenzo Bacci (IGSG-CNR)
 ******************************************************************************/
 package it.cnr.igsg.linkoln.service.impl.it;

import java.io.IOException;
import java.io.StringReader;

import it.cnr.igsg.linkoln.entity.*;
import it.cnr.igsg.linkoln.service.*;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>jflex/DetachedSections.jflex</tt>
 */
public class DetachedSections extends LinkolnAnnotationService {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int lkn = 2;
  public static final int detachedState = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\13\1\2\1\0\1\13\1\1\22\0\1\13\5\0\1\5"+
    "\1\0\1\0\1\0\2\0\1\0\1\3\1\52\1\53\1\51\1\51"+
    "\1\51\1\51\1\51\1\51\1\51\1\51\1\51\1\51\1\14\1\12"+
    "\5\0\1\26\1\7\1\37\1\61\1\35\1\72\1\30\1\33\1\46"+
    "\1\33\1\64\1\57\1\55\1\6\1\50\1\11\1\33\1\32\1\23"+
    "\1\43\1\41\1\33\1\74\1\33\1\70\1\22\1\65\1\0\1\66"+
    "\1\0\1\4\1\0\1\25\1\17\1\36\1\60\1\34\1\71\1\27"+
    "\1\24\1\45\1\24\1\63\1\56\1\54\1\16\1\47\1\21\1\24"+
    "\1\31\1\20\1\42\1\40\1\24\1\73\1\24\1\67\1\15\12\0"+
    "\1\0\44\0\1\0\5\0\1\0\3\0\1\0\5\0\1\0\5\0"+
    "\1\24\1\24\4\24\1\0\1\24\1\24\1\24\2\24\1\24\1\24"+
    "\2\24\1\0\1\24\1\24\1\24\3\24\2\0\1\24\1\24\2\24"+
    "\3\0\1\24\1\24\4\24\1\0\1\24\1\24\1\24\2\24\1\24"+
    "\1\24\2\24\1\0\1\24\1\24\1\24\3\24\2\0\1\24\1\24"+
    "\2\24\53\0\1\24\1\24\6\0\2\44\66\0\1\24\1\24\4\0"+
    "\1\24\1\24\17\0\1\10\u1c88\0\1\24\1\24\216\0\2\24\42\0"+
    "\1\24\1\24\u0144\0\1\13\20\0\1\3\1\3\4\0\1\0\16\0"+
    "\1\0\1\0\u0100\0\1\62\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\4\1\2\2\2\3\24\0\1\4\111\0\1\5"+
    "\111\0\1\6\12\0\1\7\7\0\1\10\14\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[211];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\u0131\0\u016e\0\u0131"+
    "\0\u01ab\0\u0131\0\u01e8\0\u0225\0\267\0\u0262\0\u029f\0\u02dc"+
    "\0\u0319\0\u0356\0\u0393\0\u03d0\0\u040d\0\u044a\0\u0487\0\u04c4"+
    "\0\u0501\0\u053e\0\u057b\0\u05b8\0\u05f5\0\u0632\0\u066f\0\u0131"+
    "\0\u06ac\0\u06e9\0\u0726\0\u0763\0\u07a0\0\u07dd\0\u081a\0\u0857"+
    "\0\u0894\0\u08d1\0\u090e\0\u094b\0\u0988\0\u09c5\0\u0a02\0\u0a3f"+
    "\0\u0a7c\0\u0ab9\0\u0af6\0\u0b33\0\u0b70\0\u0bad\0\u0bea\0\u0c27"+
    "\0\u0c64\0\u0ca1\0\u0cde\0\u0d1b\0\u0d58\0\u0d95\0\u0dd2\0\u0e0f"+
    "\0\u0e4c\0\u0e89\0\u0ec6\0\u0f03\0\u0f40\0\u0f7d\0\u0fba\0\u0ff7"+
    "\0\u1034\0\u1071\0\u10ae\0\u10eb\0\u1128\0\u1165\0\u11a2\0\u11df"+
    "\0\u121c\0\u1259\0\u1296\0\u12d3\0\u1310\0\u134d\0\u138a\0\u13c7"+
    "\0\u1404\0\u1441\0\u147e\0\u14bb\0\u14f8\0\u1535\0\u1572\0\u15af"+
    "\0\u15ec\0\u1629\0\u1666\0\u16a3\0\u16e0\0\u171d\0\u175a\0\u1797"+
    "\0\u17d4\0\u0131\0\u1811\0\u184e\0\u188b\0\u18c8\0\u1905\0\u1942"+
    "\0\u197f\0\u19bc\0\u19f9\0\u1a36\0\u1a73\0\u1ab0\0\u1aed\0\u1b2a"+
    "\0\u1b67\0\u1ba4\0\u1be1\0\u1c1e\0\u1c5b\0\u1c98\0\u1cd5\0\u1d12"+
    "\0\u1d4f\0\u1d8c\0\u1dc9\0\u1e06\0\u1e43\0\u1e80\0\u1ebd\0\u1efa"+
    "\0\u1f37\0\u1f74\0\u1fb1\0\u1fee\0\u202b\0\u2068\0\u20a5\0\u20e2"+
    "\0\u211f\0\u215c\0\u2199\0\u21d6\0\u2213\0\u2250\0\u228d\0\u22ca"+
    "\0\u2307\0\u2344\0\u2381\0\u23be\0\u23fb\0\u2438\0\u2475\0\u24b2"+
    "\0\u24ef\0\u252c\0\u2569\0\u25a6\0\u25e3\0\u2620\0\u265d\0\u269a"+
    "\0\u26d7\0\u2714\0\u2751\0\u278e\0\u27cb\0\u2808\0\u2845\0\u2882"+
    "\0\u28bf\0\u28fc\0\u2939\0\u0131\0\u2976\0\u29b3\0\u29f0\0\u2a2d"+
    "\0\u2a6a\0\u2aa7\0\u2ae4\0\u2b21\0\u2b5e\0\u2b9b\0\u0131\0\u2bd8"+
    "\0\u2c15\0\u2c52\0\u2c8f\0\u2ccc\0\u2d09\0\u2d46\0\u0131\0\u2d83"+
    "\0\u2dc0\0\u2dfd\0\u2e3a\0\u2e77\0\u2eb4\0\u2ef1\0\u2f2e\0\u2f6b"+
    "\0\u2fa8\0\u2fe5\0\u3022";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[211];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\4\4\2\6\1\4\1\6\3\4\27\6"+
    "\1\4\5\6\2\4\6\6\1\4\2\6\1\7\1\4"+
    "\6\6\65\10\1\11\7\10\65\12\1\13\7\12\10\0"+
    "\1\14\7\0\1\14\2\0\1\14\53\0\1\15\5\0"+
    "\1\14\7\0\1\14\2\0\1\14\156\0\1\14\7\0"+
    "\1\14\2\0\1\14\32\0\2\16\70\0\1\17\77\0"+
    "\2\20\51\0\2\21\121\0\3\22\66\0\2\23\77\0"+
    "\3\24\25\0\1\25\4\0\1\25\60\0\1\26\7\0"+
    "\1\26\140\0\3\27\16\0\1\30\7\0\1\30\57\0"+
    "\2\31\2\0\1\32\2\0\1\33\2\0\1\31\4\0"+
    "\1\33\2\0\1\33\20\0\3\34\3\0\1\31\5\0"+
    "\2\35\3\0\1\36\23\0\1\37\66\0\1\40\7\0"+
    "\1\40\72\0\1\41\61\0\2\31\2\0\1\32\2\0"+
    "\1\33\2\0\1\31\4\0\1\33\2\0\1\33\34\0"+
    "\2\35\3\0\1\36\15\0\1\42\7\0\1\42\120\0"+
    "\2\43\100\0\2\44\70\0\3\45\104\0\2\46\21\0"+
    "\1\47\1\0\2\47\1\0\1\47\10\0\2\47\2\0"+
    "\1\47\1\0\1\47\1\0\2\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\2\0\1\47\1\0"+
    "\1\47\4\0\1\47\1\0\1\47\1\0\1\47\2\0"+
    "\1\47\3\0\1\47\1\0\1\47\1\0\1\47\4\0"+
    "\1\50\1\0\2\50\1\0\1\50\10\0\2\50\2\0"+
    "\1\50\1\0\1\50\1\51\1\52\1\50\1\0\1\50"+
    "\1\53\1\54\1\0\1\50\1\0\1\50\2\0\1\50"+
    "\1\0\1\50\3\0\1\55\1\56\1\0\1\50\1\57"+
    "\1\60\2\0\1\50\3\0\1\50\1\0\1\50\1\0"+
    "\1\50\7\0\1\61\7\0\1\61\102\0\2\62\54\0"+
    "\1\63\7\0\1\63\66\0\1\64\7\0\1\64\2\0"+
    "\1\64\133\0\3\65\14\0\1\47\1\0\2\47\1\0"+
    "\1\47\2\0\1\66\5\0\2\47\2\0\1\47\1\0"+
    "\1\47\1\0\2\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\2\0\1\47\1\0\1\47\4\0"+
    "\1\47\1\0\1\47\1\0\1\47\2\0\1\47\3\0"+
    "\1\47\1\0\1\47\1\0\1\47\4\0\1\50\1\0"+
    "\2\50\1\0\1\50\2\0\1\67\5\0\2\50\2\0"+
    "\1\50\1\0\1\50\1\0\2\50\1\0\1\50\1\0"+
    "\1\50\1\0\1\50\1\0\1\50\2\0\1\50\1\0"+
    "\1\50\4\0\1\50\1\0\1\50\1\0\1\50\2\0"+
    "\1\50\3\0\1\50\1\0\1\50\1\0\1\50\34\0"+
    "\2\70\43\0\1\50\1\0\2\50\1\0\1\50\2\0"+
    "\1\67\5\0\2\50\2\0\1\50\1\0\1\50\1\0"+
    "\2\50\1\70\1\71\1\0\1\50\1\0\1\50\1\0"+
    "\1\50\2\0\1\50\1\0\1\50\4\0\1\50\1\0"+
    "\1\50\1\0\1\50\2\0\1\50\3\0\1\50\1\0"+
    "\1\50\1\0\1\50\44\0\3\72\2\73\30\0\1\50"+
    "\1\0\2\50\1\0\1\50\2\0\1\67\5\0\2\50"+
    "\2\0\1\50\1\0\1\50\1\0\2\50\1\0\1\50"+
    "\1\0\1\50\1\0\1\50\1\0\1\50\2\72\1\74"+
    "\1\73\1\75\4\0\1\50\1\0\1\50\1\0\1\50"+
    "\2\0\1\50\3\0\1\50\1\0\1\50\1\0\1\50"+
    "\40\0\2\76\37\0\1\50\1\0\2\50\1\0\1\50"+
    "\2\0\1\67\5\0\2\50\2\0\1\50\1\0\1\50"+
    "\1\0\2\50\1\0\1\50\1\0\1\50\1\76\1\77"+
    "\1\0\1\50\2\0\1\50\1\0\1\50\4\0\1\50"+
    "\1\0\1\50\1\0\1\50\2\0\1\50\3\0\1\50"+
    "\1\0\1\50\1\0\1\50\44\0\3\100\32\0\1\50"+
    "\1\0\2\50\1\0\1\50\2\0\1\67\5\0\2\50"+
    "\2\0\1\50\1\0\1\50\1\0\2\50\1\0\1\50"+
    "\1\0\1\50\1\0\1\50\1\0\1\50\2\100\1\101"+
    "\1\0\1\50\4\0\1\50\1\0\1\50\1\0\1\50"+
    "\2\0\1\50\3\0\1\50\1\0\1\50\1\0\1\50"+
    "\10\0\1\102\7\0\1\102\2\0\1\102\107\0\2\103"+
    "\71\0\1\31\10\0\1\31\71\0\2\104\37\0\1\105"+
    "\7\0\1\105\61\0\2\66\1\0\2\66\1\0\1\66"+
    "\2\0\1\106\5\0\2\66\2\0\1\66\1\0\1\66"+
    "\1\0\2\66\1\0\1\66\1\0\1\66\1\0\1\66"+
    "\1\0\1\66\2\0\1\66\1\0\2\66\3\0\1\66"+
    "\1\0\1\66\1\0\1\66\2\0\1\66\3\0\1\66"+
    "\1\0\1\66\1\0\1\66\3\0\2\67\1\0\2\67"+
    "\1\0\1\67\2\0\1\107\5\0\2\67\2\0\1\67"+
    "\1\0\1\67\1\0\2\67\1\0\1\67\1\0\1\67"+
    "\1\0\1\67\1\0\1\67\2\0\1\67\1\0\2\67"+
    "\3\0\1\67\1\0\1\67\1\0\1\67\2\0\1\67"+
    "\3\0\1\67\1\0\1\67\1\0\1\67\27\0\2\110"+
    "\50\0\1\50\1\0\2\50\1\0\1\50\2\0\1\67"+
    "\5\0\2\50\2\0\1\50\1\110\1\111\1\0\2\50"+
    "\1\0\1\50\1\0\1\50\1\0\1\50\1\0\1\50"+
    "\2\0\1\50\1\0\1\50\4\0\1\50\1\0\1\50"+
    "\1\0\1\50\2\0\1\50\3\0\1\50\1\0\1\50"+
    "\1\0\1\50\42\0\2\112\71\0\2\113\37\0\1\50"+
    "\1\0\2\50\1\0\1\50\2\0\1\67\5\0\2\50"+
    "\2\0\1\50\1\0\1\50\1\0\2\50\1\0\1\50"+
    "\1\0\1\50\1\0\1\50\1\112\1\114\2\0\1\50"+
    "\1\0\1\50\4\0\1\50\1\0\1\50\1\0\1\50"+
    "\2\0\1\50\3\0\1\50\1\0\1\50\1\0\1\50"+
    "\4\0\1\50\1\0\2\50\1\0\1\50\2\0\1\67"+
    "\5\0\2\50\2\0\1\50\1\0\1\50\1\0\2\50"+
    "\1\0\1\50\1\0\1\50\1\113\1\115\1\0\1\50"+
    "\2\0\1\50\1\0\1\50\4\0\1\50\1\0\1\50"+
    "\1\0\1\50\2\0\1\50\3\0\1\50\1\0\1\50"+
    "\1\0\1\50\6\0\1\116\7\0\1\116\62\0\1\50"+
    "\1\0\1\117\1\50\1\0\1\50\2\0\1\67\1\0"+
    "\1\116\3\0\2\50\2\0\1\50\1\0\1\50\1\0"+
    "\2\50\1\0\1\50\1\0\1\50\1\0\1\50\1\0"+
    "\1\50\2\0\1\50\1\0\1\50\4\0\1\50\1\0"+
    "\1\50\1\0\1\50\2\0\1\50\3\0\1\50\1\0"+
    "\1\50\1\0\1\50\10\0\1\120\7\0\1\120\2\0"+
    "\1\120\55\0\1\50\1\0\2\50\1\120\1\50\2\0"+
    "\1\67\3\0\1\120\1\0\1\50\1\121\2\0\1\50"+
    "\1\0\1\50\1\0\2\50\1\0\1\50\1\0\1\50"+
    "\1\0\1\50\1\0\1\50\2\0\1\50\1\0\1\50"+
    "\4\0\1\50\1\0\1\50\1\0\1\50\2\0\1\50"+
    "\3\0\1\50\1\0\1\50\1\0\1\50\11\0\1\122"+
    "\7\0\1\122\111\0\2\123\36\0\2\124\2\0\1\125"+
    "\5\0\1\124\11\0\2\62\23\0\1\124\12\0\1\36"+
    "\23\0\1\126\131\0\1\127\74\0\1\130\67\0\3\131"+
    "\32\0\1\50\1\0\2\50\1\0\1\50\2\0\1\67"+
    "\5\0\2\50\2\0\1\50\1\0\1\50\1\0\2\50"+
    "\1\0\1\50\1\0\1\50\1\0\1\50\1\0\1\50"+
    "\2\131\1\132\1\0\1\50\4\0\1\50\1\0\1\50"+
    "\1\0\1\50\2\0\1\50\3\0\1\50\1\0\1\50"+
    "\1\0\1\50\67\0\2\133\12\0\1\134\7\0\1\134"+
    "\62\0\1\50\1\0\2\50\1\0\1\50\2\0\1\67"+
    "\5\0\2\50\2\0\1\50\1\0\1\50\1\0\2\50"+
    "\1\0\1\50\1\0\1\50\1\0\1\50\1\0\1\50"+
    "\2\0\1\50\1\0\1\50\4\0\1\50\1\0\1\50"+
    "\1\0\1\50\2\0\1\50\2\0\1\133\1\135\1\0"+
    "\1\50\1\0\1\50\4\0\1\50\1\0\1\136\1\50"+
    "\1\0\1\50\2\0\1\67\1\0\1\134\3\0\2\50"+
    "\2\0\1\50\1\0\1\50\1\0\2\50\1\0\1\50"+
    "\1\0\1\50\1\0\1\50\1\0\1\50\2\0\1\50"+
    "\1\0\1\50\4\0\1\50\1\0\1\50\1\0\1\50"+
    "\2\0\1\50\3\0\1\50\1\0\1\50\1\0\1\50"+
    "\44\0\3\137\32\0\1\50\1\0\2\50\1\0\1\50"+
    "\2\0\1\67\5\0\2\50\2\0\1\50\1\0\1\50"+
    "\1\0\2\50\1\0\1\50\1\0\1\50\1\0\1\50"+
    "\1\0\1\50\2\137\1\140\1\0\1\50\4\0\1\50"+
    "\1\0\1\50\1\0\1\50\2\0\1\50\3\0\1\50"+
    "\1\0\1\50\1\0\1\50\42\0\2\141\35\0\1\50"+
    "\1\0\2\50\1\0\1\50\2\0\1\67\5\0\2\50"+
    "\2\0\1\50\1\0\1\50\1\0\2\50\1\0\1\50"+
    "\1\0\1\50\1\0\1\50\1\141\1\142\2\0\1\50"+
    "\1\0\1\50\4\0\1\50\1\0\1\50\1\0\1\50"+
    "\2\0\1\50\3\0\1\50\1\0\1\50\1\0\1\50"+
    "\12\0\1\31\107\0\2\143\47\0\2\124\2\0\1\125"+
    "\5\0\1\124\51\0\1\36\15\0\1\144\7\0\1\144"+
    "\66\0\1\145\7\0\1\145\2\0\1\145\5\0\2\146"+
    "\3\0\2\147\14\0\2\150\2\0\2\151\64\0\1\127"+
    "\14\0\1\152\57\0\1\130\14\0\1\153\55\0\2\154"+
    "\30\0\1\50\1\0\2\50\1\0\1\50\2\0\1\67"+
    "\5\0\2\50\2\0\1\50\1\0\1\50\1\0\2\50"+
    "\1\0\1\50\1\0\1\50\1\0\1\50\1\0\1\50"+
    "\2\0\1\50\1\154\1\155\4\0\1\50\1\0\1\50"+
    "\1\0\1\50\2\0\1\50\3\0\1\50\1\0\1\50"+
    "\1\0\1\50\14\0\1\156\122\0\2\157\35\0\1\50"+
    "\1\0\2\50\1\0\1\50\2\0\1\156\5\0\2\50"+
    "\2\0\1\50\1\0\1\50\1\0\2\50\1\0\1\50"+
    "\1\0\1\50\1\0\1\50\1\0\1\50\2\0\1\50"+
    "\1\0\1\50\4\0\1\50\1\0\1\50\1\0\1\50"+
    "\2\0\1\50\3\0\1\50\1\0\1\50\1\0\1\50"+
    "\4\0\1\50\1\0\2\50\1\0\1\50\2\0\1\67"+
    "\5\0\2\50\2\0\1\50\1\0\1\50\1\0\2\50"+
    "\1\0\1\50\1\0\1\50\1\0\1\50\1\157\1\160"+
    "\2\0\1\50\1\0\1\50\4\0\1\50\1\0\1\50"+
    "\1\0\1\50\2\0\1\50\3\0\1\50\1\0\1\50"+
    "\1\0\1\50\36\0\2\161\41\0\1\50\1\0\2\50"+
    "\1\0\1\50\2\0\1\67\5\0\2\50\2\0\1\50"+
    "\1\0\1\50\1\0\2\50\1\0\1\50\1\161\1\162"+
    "\1\0\1\50\1\0\1\50\2\0\1\50\1\0\1\50"+
    "\4\0\1\50\1\0\1\50\1\0\1\50\2\0\1\50"+
    "\3\0\1\50\1\0\1\50\1\0\1\50\31\0\2\163"+
    "\46\0\1\50\1\0\2\50\1\0\1\50\2\0\1\67"+
    "\5\0\2\50\2\0\1\50\1\0\1\50\1\163\1\164"+
    "\1\50\1\0\1\50\1\0\1\50\1\0\1\50\1\0"+
    "\1\50\2\0\1\50\1\0\1\50\4\0\1\50\1\0"+
    "\1\50\1\0\1\50\2\0\1\50\3\0\1\50\1\0"+
    "\1\50\1\0\1\50\42\0\2\165\40\0\1\166\7\0"+
    "\1\166\117\0\2\167\65\0\2\170\103\0\3\171\2\172"+
    "\64\0\2\173\77\0\3\174\26\0\65\175\1\0\7\175"+
    "\6\0\1\133\7\0\1\133\62\0\1\50\1\0\1\135"+
    "\1\50\1\0\1\50\2\0\1\67\1\0\1\133\3\0"+
    "\2\50\2\0\1\50\1\0\1\50\1\0\2\50\1\0"+
    "\1\50\1\0\1\50\1\0\1\50\1\0\1\50\2\0"+
    "\1\50\1\0\1\50\4\0\1\50\1\0\1\50\1\0"+
    "\1\50\2\0\1\50\3\0\1\50\1\0\1\50\1\0"+
    "\1\50\3\0\2\156\1\0\2\156\1\0\1\156\2\0"+
    "\1\176\5\0\2\156\2\0\1\156\1\0\1\156\1\0"+
    "\2\156\1\0\1\156\1\0\1\156\1\0\1\156\1\0"+
    "\1\156\2\0\1\156\1\0\2\156\3\0\1\156\1\0"+
    "\1\156\1\0\1\156\2\0\1\156\3\0\1\156\1\0"+
    "\1\156\1\0\1\156\31\0\2\112\46\0\1\50\1\0"+
    "\2\50\1\0\1\50\2\0\1\67\5\0\2\50\2\0"+
    "\1\50\1\0\1\50\1\112\1\114\1\50\1\0\1\50"+
    "\1\0\1\50\1\0\1\50\1\0\1\50\2\0\1\50"+
    "\1\0\1\50\4\0\1\50\1\0\1\50\1\0\1\50"+
    "\2\0\1\50\3\0\1\50\1\0\1\50\1\0\1\50"+
    "\44\0\3\177\32\0\1\50\1\0\2\50\1\0\1\50"+
    "\2\0\1\67\5\0\2\50\2\0\1\50\1\0\1\50"+
    "\1\0\2\50\1\0\1\50\1\0\1\50\1\0\1\50"+
    "\1\0\1\50\2\177\1\200\1\0\1\50\4\0\1\50"+
    "\1\0\1\50\1\0\1\50\2\0\1\50\3\0\1\50"+
    "\1\0\1\50\1\0\1\50\44\0\3\201\32\0\1\50"+
    "\1\0\2\50\1\0\1\50\2\0\1\67\5\0\2\50"+
    "\2\0\1\50\1\0\1\50\1\0\2\50\1\0\1\50"+
    "\1\0\1\50\1\0\1\50\1\0\1\50\2\201\1\202"+
    "\1\0\1\50\4\0\1\50\1\0\1\50\1\0\1\50"+
    "\2\0\1\50\3\0\1\50\1\0\1\50\1\0\1\50"+
    "\25\0\1\124\6\0\1\124\10\0\1\124\1\0\1\124"+
    "\35\0\1\203\7\0\1\203\2\0\1\203\62\0\1\204"+
    "\7\0\1\204\102\0\2\205\106\0\2\206\71\0\2\207"+
    "\41\0\1\210\7\0\1\210\66\0\1\211\7\0\1\211"+
    "\2\0\1\211\51\0\65\175\1\212\7\175\51\0\1\213"+
    "\34\0\1\214\7\0\1\214\57\0\1\50\1\0\2\50"+
    "\1\0\1\215\2\0\1\67\4\0\1\214\2\50\2\0"+
    "\1\50\1\0\1\50\1\0\2\50\1\0\1\50\1\0"+
    "\1\50\1\0\1\50\1\0\1\50\2\0\1\50\1\0"+
    "\1\50\4\0\1\50\1\0\1\50\1\0\1\50\2\0"+
    "\1\50\3\0\1\50\1\0\1\50\1\0\1\50\36\0"+
    "\2\216\41\0\1\50\1\0\2\50\1\0\1\50\2\0"+
    "\1\67\5\0\2\50\2\0\1\50\1\0\1\50\1\0"+
    "\2\50\1\0\1\50\1\216\1\217\1\0\1\50\1\0"+
    "\1\50\2\0\1\50\1\0\1\50\4\0\1\50\1\0"+
    "\1\50\1\0\1\50\2\0\1\50\3\0\1\50\1\0"+
    "\1\50\1\0\1\50\11\0\1\220\7\0\1\220\146\0"+
    "\2\221\44\0\3\222\115\0\2\223\12\0\1\224\7\0"+
    "\1\224\122\0\3\225\70\0\2\226\104\0\1\227\72\0"+
    "\1\213\14\0\1\230\33\0\2\231\52\0\1\50\1\0"+
    "\2\50\1\0\1\50\2\0\1\67\5\0\2\50\1\0"+
    "\1\231\1\232\1\0\1\50\1\0\2\50\1\0\1\50"+
    "\1\0\1\50\1\0\1\50\1\0\1\50\2\0\1\50"+
    "\1\0\1\50\4\0\1\50\1\0\1\50\1\0\1\50"+
    "\2\0\1\50\3\0\1\50\1\0\1\50\1\0\1\50"+
    "\42\0\2\133\35\0\1\50\1\0\2\50\1\0\1\50"+
    "\2\0\1\67\5\0\2\50\2\0\1\50\1\0\1\50"+
    "\1\0\2\50\1\0\1\50\1\0\1\50\1\0\1\50"+
    "\1\133\1\135\2\0\1\50\1\0\1\50\4\0\1\50"+
    "\1\0\1\50\1\0\1\50\2\0\1\50\3\0\1\50"+
    "\1\0\1\50\1\0\1\50\12\0\1\124\76\0\1\233"+
    "\127\0\2\234\40\0\1\235\122\0\2\236\67\0\2\237"+
    "\66\0\2\240\120\0\2\241\15\0\65\242\1\0\7\242"+
    "\56\0\2\243\21\0\1\50\1\0\2\50\1\0\1\50"+
    "\2\0\1\67\5\0\2\50\2\0\1\50\1\0\1\50"+
    "\1\0\2\50\1\0\1\50\1\0\1\50\1\0\1\50"+
    "\1\0\1\50\2\0\1\50\1\0\1\50\4\0\1\50"+
    "\1\243\1\244\1\0\1\50\2\0\1\50\3\0\1\50"+
    "\1\0\1\50\1\0\1\50\47\0\2\245\32\0\1\223"+
    "\7\0\1\223\61\0\2\235\1\0\2\235\1\0\1\235"+
    "\2\0\1\246\5\0\2\235\2\0\1\235\1\0\1\235"+
    "\1\0\2\235\1\0\1\235\1\0\1\235\1\0\1\235"+
    "\1\0\1\235\2\0\1\235\1\0\2\235\3\0\1\235"+
    "\1\0\1\235\1\0\1\235\2\0\1\235\3\0\1\235"+
    "\1\0\1\235\1\0\1\235\31\0\2\206\106\0\3\247"+
    "\72\0\3\250\110\0\3\251\10\0\65\242\1\252\7\242"+
    "\44\0\3\72\32\0\1\50\1\0\2\50\1\0\1\50"+
    "\2\0\1\67\5\0\2\50\2\0\1\50\1\0\1\50"+
    "\1\0\2\50\1\0\1\50\1\0\1\50\1\0\1\50"+
    "\1\0\1\50\2\72\1\74\1\0\1\50\4\0\1\50"+
    "\1\0\1\50\1\0\1\50\2\0\1\50\3\0\1\50"+
    "\1\0\1\50\1\0\1\50\71\0\2\253\53\0\1\254"+
    "\34\0\1\255\7\0\1\255\111\0\2\256\43\0\1\257"+
    "\7\0\1\257\131\0\1\260\35\0\1\261\131\0\1\254"+
    "\14\0\1\262\33\0\2\263\110\0\2\223\117\0\1\264"+
    "\64\0\2\265\66\0\1\266\23\0\65\267\1\0\7\267"+
    "\56\0\2\270\77\0\3\271\61\0\1\266\14\0\1\272"+
    "\6\0\65\267\1\273\7\267\44\0\3\171\34\0\1\274"+
    "\7\0\1\274\56\0\65\275\1\0\7\275\53\0\1\276"+
    "\107\0\1\277\6\0\65\275\1\300\7\275\56\0\2\301"+
    "\70\0\1\302\103\0\3\303\66\0\2\304\23\0\1\305"+
    "\7\0\1\305\140\0\3\306\76\0\1\307\14\0\1\310"+
    "\7\0\1\310\144\0\1\311\7\0\2\311\2\0\1\312"+
    "\5\0\1\311\51\0\1\313\15\0\1\314\7\0\1\314"+
    "\134\0\2\315\24\0\1\316\7\0\1\316\137\0\3\317"+
    "\20\0\1\320\7\0\1\320\2\0\1\320\57\0\1\321"+
    "\7\0\1\321\67\0\1\322\7\0\1\322\67\0\1\323"+
    "\72\0\1\311\113\0\2\146\3\0\2\147\14\0\2\150"+
    "\2\0\2\151\13\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12383];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\1\1\11\1\1\1\11\1\1\1\11\1\1"+
    "\24\0\1\11\111\0\1\11\111\0\1\11\12\0\1\11"+
    "\7\0\1\11\14\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[211];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	
	/* Custom java code */

    @Override
	public String language() { return "IT"; }

	@Override
	public String version() { return "0.5"; }


	/* An empty default constructor is required to comply with LinkolnService */
	
	public DetachedSections() { }

	@Override
	public final boolean run() {
		
		try {
			
			yyreset(new StringReader(getInput()));
			yylex();
			
		} catch (IOException e) {

			e.printStackTrace();
			return false;
		}
		
		return true;
	}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public DetachedSections(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 382) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { addText(yytext());
	position++;
            } 
            // fall through
          case 9: break;
          case 2: 
            { addText(yytext());
		position++;
            } 
            // fall through
          case 10: break;
          case 3: 
            { checkEnd();
            } 
            // fall through
          case 11: break;
          case 4: 
            { addText(yytext());
		position--; //account for the following {LKN_C} character
		yybegin(YYINITIAL);
            } 
            // fall through
          case 12: break;
          case 5: 
            { addText(yytext()); 
	yybegin(lkn);
            } 
            // fall through
          case 13: break;
          case 6: 
            { AnnotationEntity retrievedEntity = retrieveEntity(yytext());
		
		offset += yylength();
		position += retrievedEntity.getText().length();
            } 
            // fall through
          case 14: break;
          case 7: 
            { offset += yylength();
		
		AnnotationEntity retrievedEntity = retrieveEntity(yytext());
		
		annotationEntity.setValue(retrievedEntity.getValue());
		
		annotationEntity.addRelatedEntity(retrievedEntity);
		retrievedEntity.addRelatedEntity(annotationEntity);
		
		position += retrievedEntity.getText().length();
            } 
            // fall through
          case 15: break;
          case 8: 
            { start(new CaseLawDetachedSection(), detachedState, true, false);
            } 
            // fall through
          case 16: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java DetachedSections [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        DetachedSections scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new DetachedSections(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
