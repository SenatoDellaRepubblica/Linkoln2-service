/* The following code was generated by JFlex 1.7.0 */

/*******************************************************************************
 * Copyright (c) 2016-2021 Institute of Legal Information and Judicial Systems IGSG-CNR (formerly ITTIG-CNR)
 * 
 * This program and the accompanying materials  are made available under the terms of the GNU General Public
 * License as published by the Free Software Foundation; either version 3 of the License, or (at your option)
 * any later version. 
 * You may not use this work except in compliance with the Licence.
 * You may obtain a copy of the Licence at: https://www.gnu.org/licenses/gpl-3.0.txt
 * Unless required by applicable law or agreed to in writing, software distributed under the Licence is 
 * distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the Licence for the specific language governing permissions and limitations under the Licence.
 *  
 * Authors: Lorenzo Bacci (IGSG-CNR)
 ******************************************************************************/
 package it.cnr.igsg.linkoln.service.impl.it;

import java.io.IOException;
import java.io.StringReader;

import it.cnr.igsg.linkoln.entity.*;
import it.cnr.igsg.linkoln.service.*;

import it.cnr.igsg.linkoln.service.impl.Util;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>jflex/LegislationAuthorities.jflex</tt>
 */
public class LegislationAuthorities extends LinkolnAnnotationService {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int lkn = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\13\1\2\1\0\1\13\1\1\22\0\1\13\5\0\1\5"+
    "\1\0\1\0\1\0\2\0\1\0\1\3\1\52\1\53\1\51\1\51"+
    "\1\51\1\51\1\51\1\51\1\51\1\51\1\51\1\51\1\14\1\12"+
    "\5\0\1\25\1\7\1\37\1\61\1\35\1\70\1\27\1\22\1\46"+
    "\1\22\1\64\1\57\1\55\1\6\1\50\1\11\1\22\1\31\1\23"+
    "\1\43\1\41\1\33\1\72\1\22\1\22\1\22\1\65\1\0\1\66"+
    "\1\0\1\4\1\0\1\24\1\17\1\36\1\60\1\34\1\67\1\26"+
    "\1\15\1\45\1\15\1\63\1\56\1\54\1\16\1\47\1\21\1\15"+
    "\1\30\1\20\1\42\1\40\1\32\1\71\1\15\1\15\1\15\12\0"+
    "\1\0\44\0\1\0\5\0\1\0\3\0\1\0\5\0\1\0\5\0"+
    "\1\15\1\15\4\15\1\0\1\15\1\15\1\15\2\15\1\15\1\15"+
    "\2\15\1\0\1\15\1\15\1\15\3\15\2\0\1\15\1\15\2\15"+
    "\3\0\1\15\1\15\4\15\1\0\1\15\1\15\1\15\2\15\1\15"+
    "\1\15\2\15\1\0\1\15\1\15\1\15\3\15\2\0\1\15\1\15"+
    "\2\15\53\0\1\15\1\15\6\0\2\44\66\0\1\15\1\15\4\0"+
    "\1\15\1\15\17\0\1\10\u1c88\0\1\15\1\15\216\0\2\15\42\0"+
    "\1\15\1\15\u0144\0\1\13\20\0\1\3\1\3\4\0\1\0\16\0"+
    "\1\0\1\0\u0100\0\1\62\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\4\1\2\2\24\0\2\3\1\0\1\3\22\0"+
    "\2\4\1\0\1\4\10\0\1\5\122\0\4\6\1\0"+
    "\2\6\17\0\2\7\1\0\1\7\6\0\2\10\1\0"+
    "\1\10\25\0\2\11\1\0\1\11\72\0\1\12\70\0"+
    "\3\13\1\0\1\13\u0105\0\3\14\1\0\1\14\212\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[730];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\354\0\u0162"+
    "\0\u019d\0\u01d8\0\166\0\u0213\0\u024e\0\u0289\0\u02c4\0\u02ff"+
    "\0\u033a\0\u0375\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7"+
    "\0\u0512\0\u054d\0\u0588\0\u05c3\0\354\0\u05fe\0\u0639\0\u0674"+
    "\0\u06af\0\u06ea\0\u0725\0\u0760\0\u079b\0\u07d6\0\u0811\0\u084c"+
    "\0\u0887\0\u08c2\0\u08fd\0\u0938\0\u0973\0\u09ae\0\u09e9\0\u0a24"+
    "\0\u0a5f\0\u0a9a\0\354\0\u0ad5\0\u0b10\0\u0b4b\0\u0b86\0\u0bc1"+
    "\0\u0bfc\0\u0c37\0\u0c72\0\u0cad\0\u0ce8\0\u0d23\0\354\0\u0d5e"+
    "\0\u0d99\0\u0dd4\0\u0e0f\0\u0e4a\0\u0e85\0\u0ec0\0\u0efb\0\u0f36"+
    "\0\u0f71\0\u0fac\0\u0fe7\0\u1022\0\u105d\0\u1098\0\u10d3\0\u110e"+
    "\0\u1149\0\u1184\0\u11bf\0\u11fa\0\u1235\0\u1270\0\u12ab\0\u12e6"+
    "\0\u1321\0\u135c\0\u1397\0\u13d2\0\u140d\0\u1448\0\u1483\0\u14be"+
    "\0\u14f9\0\u1534\0\u156f\0\u15aa\0\u15e5\0\u1620\0\u165b\0\u1696"+
    "\0\u16d1\0\u170c\0\u1747\0\u1782\0\u17bd\0\u17f8\0\u1833\0\u186e"+
    "\0\u18a9\0\u0674\0\u18e4\0\u191f\0\u195a\0\u1995\0\u19d0\0\u1a0b"+
    "\0\u1a46\0\u1a81\0\u1abc\0\u1af7\0\u1b32\0\u1b6d\0\u1ba8\0\u1be3"+
    "\0\u1c1e\0\u1c59\0\u1c94\0\u1ccf\0\u1d0a\0\u1d45\0\u1d80\0\u1dbb"+
    "\0\u1df6\0\u1e31\0\u1e6c\0\u1ea7\0\u1ee2\0\u1f1d\0\u1f58\0\u1f93"+
    "\0\u1fce\0\354\0\u2009\0\u2044\0\u207f\0\u20ba\0\u20f5\0\u2130"+
    "\0\u216b\0\u21a6\0\u21e1\0\u221c\0\u2257\0\u2292\0\u22cd\0\u2308"+
    "\0\u0b4b\0\u2343\0\u237e\0\u23b9\0\u23f4\0\u242f\0\u246a\0\354"+
    "\0\u24a5\0\u24e0\0\u251b\0\u2556\0\u2591\0\u25cc\0\u2607\0\u2642"+
    "\0\u267d\0\354\0\u26b8\0\u26f3\0\u272e\0\u2769\0\u27a4\0\u27df"+
    "\0\u281a\0\u2855\0\u2890\0\u28cb\0\u2906\0\u2941\0\u297c\0\u29b7"+
    "\0\u29f2\0\u2044\0\u207f\0\u2130\0\u2a2d\0\u2a68\0\u2aa3\0\u2ade"+
    "\0\u2b19\0\u2b54\0\354\0\u2b8f\0\u2bca\0\u2c05\0\u2c40\0\u2c7b"+
    "\0\u2cb6\0\u2cf1\0\u2d2c\0\u2d67\0\u2da2\0\u2ddd\0\u2e18\0\u2e53"+
    "\0\u2e8e\0\u2ec9\0\u2f04\0\u2f3f\0\u2f7a\0\u2fb5\0\u2ff0\0\u302b"+
    "\0\u3066\0\u30a1\0\u30dc\0\u3117\0\u3152\0\u318d\0\u31c8\0\u3203"+
    "\0\u323e\0\u3279\0\u32b4\0\u32ef\0\u332a\0\u3365\0\u33a0\0\u33db"+
    "\0\u3416\0\u3451\0\u348c\0\u34c7\0\u3502\0\u353d\0\u3578\0\u35b3"+
    "\0\u35ee\0\u3629\0\u3664\0\u369f\0\u36da\0\u3715\0\u3750\0\u378b"+
    "\0\u37c6\0\u3801\0\u383c\0\u3877\0\u38b2\0\u38ed\0\u3928\0\u3963"+
    "\0\354\0\u399e\0\u39d9\0\u3a14\0\u3a4f\0\u3a8a\0\u3ac5\0\u3b00"+
    "\0\u3b3b\0\u3b76\0\u3bb1\0\u3bec\0\u3c27\0\u3c62\0\u3c9d\0\u3cd8"+
    "\0\u3d13\0\u3d4e\0\u3d89\0\u3dc4\0\u3dff\0\u3e3a\0\u3e75\0\u3eb0"+
    "\0\u3eeb\0\u3f26\0\u3f61\0\u3f9c\0\u3fd7\0\u4012\0\u404d\0\u4088"+
    "\0\u40c3\0\u40fe\0\u4139\0\u4174\0\u41af\0\u41ea\0\u4225\0\u4260"+
    "\0\u429b\0\u42d6\0\u4311\0\u434c\0\u4387\0\u43c2\0\u43fd\0\u4438"+
    "\0\u4473\0\u44ae\0\u20f5\0\u44e9\0\u4524\0\u455f\0\u459a\0\u45d5"+
    "\0\u4610\0\354\0\u464b\0\u4686\0\u4686\0\u46c1\0\u46fc\0\u4737"+
    "\0\u4772\0\u251b\0\u47ad\0\u47e8\0\u272e\0\u4823\0\u485e\0\u4899"+
    "\0\u48d4\0\u490f\0\u494a\0\u4985\0\u49c0\0\u49fb\0\u4a36\0\u4a71"+
    "\0\u4aac\0\u4ae7\0\u4b22\0\u4b5d\0\u4b98\0\u4bd3\0\u4c0e\0\u4c49"+
    "\0\u4c84\0\u4cbf\0\u4cfa\0\u2c05\0\u4d35\0\u4d70\0\u4dab\0\u4de6"+
    "\0\u4e21\0\u4e5c\0\u4e97\0\u4ed2\0\u4f0d\0\u4f48\0\u4f83\0\u4fbe"+
    "\0\u4ff9\0\u5034\0\u506f\0\u50aa\0\u50e5\0\u5120\0\u515b\0\u5196"+
    "\0\u51d1\0\u520c\0\u5247\0\u5282\0\u52bd\0\u52f8\0\u46c1\0\u5333"+
    "\0\u536e\0\u53a9\0\u53e4\0\u541f\0\u545a\0\u5495\0\u54d0\0\u550b"+
    "\0\u5546\0\u5581\0\u55bc\0\u55f7\0\u5632\0\u566d\0\u56a8\0\u56e3"+
    "\0\u571e\0\u5759\0\u5794\0\u57cf\0\u580a\0\u5845\0\u5880\0\u58bb"+
    "\0\u58f6\0\u5931\0\u596c\0\u59a7\0\u59e2\0\u5a1d\0\u5a58\0\u5a93"+
    "\0\u5ace\0\u5b09\0\u5b44\0\u5b7f\0\u5bba\0\u5bf5\0\u5c30\0\u5c6b"+
    "\0\u5ca6\0\u5ce1\0\u5d1c\0\u5d57\0\u5d92\0\u5dcd\0\u5e08\0\u5e43"+
    "\0\u5e7e\0\u5eb9\0\u5ef4\0\u5f2f\0\u5f6a\0\u5fa5\0\u5fe0\0\u601b"+
    "\0\u6056\0\u6091\0\u60cc\0\u6107\0\u6142\0\u617d\0\u61b8\0\u61f3"+
    "\0\u622e\0\u6269\0\u62a4\0\u62df\0\u631a\0\u6355\0\u6390\0\u63cb"+
    "\0\u6406\0\u6441\0\u647c\0\u64b7\0\u64f2\0\u652d\0\u6568\0\u65a3"+
    "\0\u65de\0\u6619\0\u6654\0\u668f\0\u66ca\0\u6705\0\u6740\0\u677b"+
    "\0\u67b6\0\u67f1\0\u682c\0\u6867\0\u68a2\0\u68dd\0\u6918\0\u6953"+
    "\0\u698e\0\u69c9\0\u6a04\0\u6a3f\0\u6a7a\0\u6ab5\0\u6af0\0\u6b2b"+
    "\0\u6b66\0\u6ba1\0\u6bdc\0\u6c17\0\u6c52\0\u6c8d\0\u6cc8\0\u6d03"+
    "\0\u6d3e\0\u6d79\0\u6db4\0\u6def\0\u6e2a\0\u6e65\0\u6ea0\0\u6edb"+
    "\0\u6f16\0\u6f51\0\u6f8c\0\u6fc7\0\u7002\0\u703d\0\u7078\0\u70b3"+
    "\0\u70ee\0\u7129\0\u7164\0\u719f\0\u71da\0\u7215\0\u7250\0\u728b"+
    "\0\u72c6\0\u7301\0\u733c\0\u7377\0\u73b2\0\u73ed\0\u7428\0\u7463"+
    "\0\u749e\0\u74d9\0\u7514\0\u754f\0\u758a\0\u75c5\0\u7600\0\u763b"+
    "\0\u7676\0\u76b1\0\u76ec\0\u7727\0\u7762\0\u779d\0\u77d8\0\u7813"+
    "\0\u784e\0\u7889\0\u78c4\0\u78ff\0\u793a\0\u7975\0\u79b0\0\u79eb"+
    "\0\u7a26\0\u7a61\0\u7a9c\0\u7ad7\0\u7b12\0\u7b4d\0\u7b88\0\u7bc3"+
    "\0\u7bfe\0\u7c39\0\u7c74\0\u7caf\0\u7cea\0\u7d25\0\u7d60\0\u7d9b"+
    "\0\u7dd6\0\u7e11\0\u7e4c\0\u7e87\0\u7ec2\0\u7efd\0\u7f38\0\u7f73"+
    "\0\u7fae\0\u7fe9\0\u8024\0\u805f\0\u809a\0\u80d5\0\u8110\0\u814b"+
    "\0\u8186\0\u81c1\0\u81fc\0\354\0\u8237\0\u8272\0\u8272\0\u82ad"+
    "\0\u82e8\0\u8323\0\u835e\0\u8399\0\u83d4\0\u840f\0\u844a\0\u8485"+
    "\0\u84c0\0\u84fb\0\u8536\0\u8571\0\u85ac\0\u85e7\0\u8622\0\u865d"+
    "\0\u8698\0\u86d3\0\u870e\0\u8749\0\u8784\0\u87bf\0\u87fa\0\u8835"+
    "\0\u8870\0\u88ab\0\u88e6\0\u8921\0\u895c\0\u8997\0\u89d2\0\u8a0d"+
    "\0\u8a48\0\u8a83\0\u8abe\0\u8af9\0\u8b34\0\u82ad\0\u8b6f\0\u8baa"+
    "\0\u8be5\0\u8c20\0\u8c5b\0\u8c96\0\u8cd1\0\u8d0c\0\u8d47\0\u8d82"+
    "\0\u8dbd\0\u8df8\0\u8e33\0\u8e6e\0\u8ea9\0\u8ee4\0\u8f1f\0\u8f5a"+
    "\0\u8f95\0\u8fd0\0\u900b\0\u9046\0\u9081\0\u90bc\0\u90f7\0\u9132"+
    "\0\u916d\0\u91a8\0\u91e3\0\u921e\0\u9259\0\u9294\0\u92cf\0\u930a"+
    "\0\u9345\0\u9380\0\u93bb\0\u93f6\0\u9431\0\u946c\0\u94a7\0\u94e2"+
    "\0\u951d\0\u9558\0\u9593\0\u95ce\0\u9609\0\u9644\0\u967f\0\u96ba"+
    "\0\u96f5\0\u9730\0\u976b\0\u97a6\0\u97e1\0\u981c\0\u9857\0\u9892"+
    "\0\u98cd\0\u9908\0\u9943\0\u997e\0\u99b9\0\u99f4\0\u9a2f\0\u9a6a"+
    "\0\u9aa5\0\u9ae0\0\u9b1b\0\u9b56\0\u9b91\0\u9bcc\0\u9c07\0\u9c42"+
    "\0\u9c7d\0\u9cb8\0\u9cf3\0\u9d2e\0\u9d69\0\u9da4\0\u9ddf\0\u9e1a"+
    "\0\u9e55\0\u9e90\0\u9ecb\0\u9f06\0\u9f41\0\u9f7c\0\u9fb7\0\u9ff2"+
    "\0\ua02d\0\ua068\0\ua0a3\0\ua0de\0\ua119\0\ua154\0\ua18f\0\ua1ca"+
    "\0\ua205\0\ua240";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[730];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\4\3\2\5\1\3\1\5\3\3\27\5"+
    "\1\3\5\5\2\3\6\5\1\3\2\5\1\6\1\3"+
    "\4\5\65\7\1\10\5\7\11\0\1\11\7\0\1\11"+
    "\14\0\2\12\35\0\1\13\6\0\1\11\7\0\1\11"+
    "\14\0\2\12\137\0\1\11\7\0\1\11\14\0\2\12"+
    "\16\0\2\14\66\0\1\15\43\0\2\16\2\0\2\17"+
    "\42\0\2\20\2\0\1\21\2\0\1\22\1\23\1\0"+
    "\1\20\4\0\1\22\1\23\1\0\1\22\2\24\2\25"+
    "\17\0\2\26\1\0\1\20\12\0\1\27\67\0\3\30"+
    "\64\0\2\31\43\0\2\32\75\0\2\33\36\0\2\20"+
    "\2\0\1\21\2\0\1\22\1\23\1\0\1\20\4\0"+
    "\1\22\1\23\1\0\1\22\2\0\2\25\35\0\1\27"+
    "\13\0\1\34\7\0\1\34\54\0\1\35\1\36\4\35"+
    "\2\0\1\35\1\0\3\35\25\0\2\37\1\35\5\0"+
    "\1\40\1\35\6\0\1\35\2\0\2\35\5\0\2\41"+
    "\2\0\1\42\2\0\1\43\2\0\1\41\4\0\1\43"+
    "\2\0\1\43\2\0\2\44\2\45\20\0\1\41\12\0"+
    "\1\46\16\0\1\47\7\0\1\47\120\0\2\50\30\0"+
    "\1\51\7\0\1\51\35\0\2\52\73\0\2\53\21\0"+
    "\1\54\7\0\1\54\136\0\3\55\64\0\2\56\23\0"+
    "\1\57\7\0\1\57\2\0\1\57\56\0\1\60\7\0"+
    "\1\60\55\0\1\35\114\0\2\61\45\0\1\35\1\36"+
    "\4\35\2\0\1\35\1\0\3\35\27\0\1\35\5\0"+
    "\2\35\6\0\1\35\2\0\2\35\5\0\2\41\2\0"+
    "\1\42\2\0\1\43\2\0\1\41\4\0\1\43\2\0"+
    "\1\43\2\0\2\44\35\0\1\46\13\0\1\62\7\0"+
    "\1\62\54\0\1\63\1\64\4\63\2\0\1\63\1\0"+
    "\3\63\25\0\2\65\1\63\5\0\1\66\1\63\6\0"+
    "\1\63\2\0\2\63\53\0\2\67\71\0\2\70\100\0"+
    "\2\71\62\0\2\20\54\0\2\72\47\0\1\73\7\0"+
    "\1\73\2\0\1\73\123\0\2\74\77\0\3\75\22\0"+
    "\1\76\64\0\1\77\7\0\1\77\55\0\2\100\2\0"+
    "\1\101\5\0\1\100\10\0\2\102\6\0\2\103\2\0"+
    "\2\104\10\0\1\100\12\0\1\105\6\0\2\106\2\0"+
    "\1\107\5\0\1\106\14\0\2\110\4\0\2\111\4\0"+
    "\3\112\3\0\1\106\12\0\1\113\15\0\1\114\7\0"+
    "\1\114\2\0\1\114\111\0\2\115\36\0\1\116\7\0"+
    "\1\116\55\0\1\63\114\0\2\117\45\0\1\63\1\64"+
    "\4\63\2\0\1\63\1\0\3\63\27\0\1\63\5\0"+
    "\2\63\6\0\1\63\2\0\2\63\36\0\2\120\71\0"+
    "\2\121\121\0\3\122\6\0\1\35\1\36\4\35\2\0"+
    "\1\35\1\0\3\35\17\0\2\123\6\0\1\35\5\0"+
    "\1\40\1\35\6\0\1\35\2\0\2\35\5\0\2\124"+
    "\2\0\1\125\5\0\1\124\24\0\2\126\2\0\3\127"+
    "\3\0\1\124\12\0\1\130\6\0\2\131\2\0\1\132"+
    "\5\0\1\131\24\0\2\133\2\0\3\134\3\0\1\131"+
    "\12\0\1\135\13\0\1\136\7\0\1\136\60\0\1\137"+
    "\1\0\2\137\1\0\1\137\10\0\2\137\1\0\1\137"+
    "\1\0\1\137\1\0\1\137\1\0\1\137\1\0\1\137"+
    "\1\0\1\137\1\0\1\137\1\0\1\137\2\0\1\137"+
    "\1\0\1\137\4\0\1\137\1\0\1\137\1\0\1\137"+
    "\2\0\1\137\3\0\1\137\1\0\1\137\1\0\2\100"+
    "\2\0\1\101\5\0\1\100\20\0\2\103\2\0\2\104"+
    "\23\0\1\105\13\0\1\140\7\0\1\140\130\0\2\141"+
    "\16\0\2\142\2\0\1\143\5\0\1\142\24\0\2\144"+
    "\10\0\1\142\12\0\1\145\6\0\2\146\2\0\1\147"+
    "\1\150\4\0\1\146\2\0\1\150\15\0\2\151\14\0"+
    "\1\146\12\0\1\152\63\0\2\153\14\0\2\106\2\0"+
    "\1\107\5\0\1\106\14\0\2\110\4\0\2\111\25\0"+
    "\1\113\13\0\1\154\7\0\1\154\110\0\2\155\104\0"+
    "\2\156\102\0\2\157\67\0\2\160\24\0\1\161\7\0"+
    "\1\161\120\0\2\162\32\0\1\163\7\0\1\163\2\0"+
    "\1\163\111\0\2\164\27\0\1\63\1\64\4\63\2\0"+
    "\1\63\1\0\3\63\17\0\2\165\6\0\1\63\5\0"+
    "\1\66\1\63\6\0\1\63\2\0\2\63\5\0\2\41"+
    "\2\0\1\42\2\0\1\43\2\0\1\41\4\0\1\43"+
    "\2\0\1\43\2\0\2\44\2\0\2\166\16\0\1\41"+
    "\12\0\1\46\13\0\1\167\7\0\1\167\104\0\2\170"+
    "\42\0\2\124\2\0\1\125\5\0\1\124\24\0\2\126"+
    "\23\0\1\130\13\0\1\171\7\0\1\171\55\0\2\172"+
    "\2\0\1\173\1\174\4\0\1\172\2\0\1\174\15\0"+
    "\2\175\14\0\1\172\12\0\1\176\33\0\2\177\121\0"+
    "\2\200\14\0\2\131\2\0\1\132\5\0\1\131\24\0"+
    "\2\133\23\0\1\135\13\0\1\201\7\0\1\201\55\0"+
    "\2\202\2\0\1\203\1\204\4\0\1\202\2\0\1\204"+
    "\15\0\2\205\14\0\1\202\12\0\1\206\15\0\1\207"+
    "\7\0\1\207\2\0\1\207\125\0\2\210\27\0\1\211"+
    "\62\0\1\137\1\0\2\137\1\0\1\137\2\0\1\212"+
    "\5\0\2\137\1\0\1\137\1\0\1\137\1\0\1\137"+
    "\1\0\1\137\1\0\1\137\1\0\1\137\1\0\1\137"+
    "\1\0\1\137\2\0\1\137\1\0\1\137\4\0\1\137"+
    "\1\0\1\137\1\0\1\137\2\0\1\137\3\0\1\137"+
    "\1\0\1\137\7\0\1\213\7\0\1\213\107\0\2\214"+
    "\36\0\2\142\2\0\1\143\5\0\1\142\51\0\1\145"+
    "\13\0\1\215\7\0\1\215\55\0\2\142\2\0\1\143"+
    "\5\0\1\142\14\0\2\216\20\0\1\142\12\0\1\145"+
    "\63\0\2\217\14\0\2\146\2\0\1\147\5\0\1\146"+
    "\20\0\2\151\27\0\1\152\13\0\1\220\7\0\1\220"+
    "\55\0\2\146\2\0\1\147\5\0\1\146\20\0\2\151"+
    "\6\0\3\221\3\0\1\146\12\0\1\152\5\0\1\222"+
    "\1\223\1\224\2\222\1\225\2\0\1\222\1\0\1\222"+
    "\1\224\1\222\23\0\2\226\2\0\1\222\5\0\1\227"+
    "\1\222\6\0\1\222\2\0\1\230\1\222\62\0\2\231"+
    "\75\0\3\232\15\0\1\233\7\0\1\233\64\0\1\234"+
    "\7\0\1\234\57\0\1\235\7\0\1\235\110\0\2\236"+
    "\117\0\3\237\20\0\1\20\71\0\1\240\7\0\1\240"+
    "\120\0\2\241\52\0\2\242\42\0\2\41\2\0\1\42"+
    "\2\0\1\43\2\0\1\41\4\0\1\43\2\0\1\43"+
    "\2\0\2\44\14\0\3\243\3\0\1\41\12\0\1\46"+
    "\21\0\1\244\64\0\1\115\7\0\1\115\63\0\1\245"+
    "\7\0\1\245\54\0\2\172\2\0\1\173\5\0\1\172"+
    "\20\0\2\175\27\0\1\176\13\0\1\246\7\0\1\246"+
    "\55\0\2\172\2\0\1\173\5\0\1\172\20\0\2\175"+
    "\6\0\3\247\3\0\1\172\12\0\1\176\5\0\1\250"+
    "\1\251\4\250\2\0\1\250\1\0\3\250\23\0\2\252"+
    "\2\0\1\250\5\0\1\253\1\250\6\0\1\250\2\0"+
    "\2\250\62\0\2\254\71\0\2\255\75\0\3\256\15\0"+
    "\1\257\7\0\1\257\54\0\2\202\2\0\1\203\5\0"+
    "\1\202\20\0\2\205\27\0\1\206\13\0\1\260\7\0"+
    "\1\260\55\0\2\202\2\0\1\203\5\0\1\202\20\0"+
    "\2\205\6\0\3\261\3\0\1\202\12\0\1\206\5\0"+
    "\1\262\1\263\4\262\2\0\1\262\1\0\3\262\23\0"+
    "\2\264\2\0\1\262\5\0\1\265\1\262\6\0\1\262"+
    "\2\0\2\262\62\0\2\266\23\0\1\267\7\0\1\267"+
    "\2\0\1\267\131\0\3\270\16\0\1\271\7\0\1\271"+
    "\2\0\1\271\52\0\2\212\1\0\2\212\1\0\1\212"+
    "\2\0\1\272\5\0\2\212\1\0\1\212\1\0\1\212"+
    "\1\0\1\212\1\0\1\212\1\0\1\212\1\0\1\212"+
    "\1\0\1\212\1\0\1\212\2\0\1\212\1\0\2\212"+
    "\3\0\1\212\1\0\1\212\1\0\1\212\2\0\1\212"+
    "\3\0\1\212\1\0\1\212\10\0\1\273\7\0\1\273"+
    "\2\0\1\273\55\0\1\274\7\0\1\274\63\0\1\275"+
    "\7\0\1\275\54\0\2\142\2\0\1\143\5\0\1\142"+
    "\33\0\2\276\1\0\1\142\12\0\1\145\67\0\3\277"+
    "\15\0\1\300\7\0\1\300\122\0\2\301\23\0\1\302"+
    "\1\224\2\0\1\303\5\0\1\302\51\0\1\304\6\0"+
    "\2\302\2\0\1\303\5\0\1\302\51\0\1\304\13\0"+
    "\1\305\7\0\1\305\54\0\1\222\1\223\1\224\2\222"+
    "\1\225\2\0\1\222\1\0\1\222\1\224\1\222\13\0"+
    "\2\306\12\0\1\222\5\0\1\227\1\222\6\0\1\222"+
    "\2\0\1\230\1\222\4\0\1\222\1\223\1\224\2\222"+
    "\1\225\2\0\1\222\1\0\1\222\1\224\1\222\27\0"+
    "\1\222\5\0\2\222\6\0\1\222\2\0\1\230\1\222"+
    "\62\0\2\307\75\0\3\310\14\0\1\311\7\0\1\311"+
    "\64\0\1\312\7\0\1\312\2\0\1\312\47\0\1\313"+
    "\1\314\4\313\2\0\1\313\1\0\3\313\23\0\2\315"+
    "\2\0\1\313\5\0\1\316\1\313\6\0\1\313\2\0"+
    "\2\313\14\0\1\317\7\0\1\317\2\0\1\317\55\0"+
    "\1\320\7\0\1\320\62\0\1\321\7\0\1\321\66\0"+
    "\1\41\66\0\1\164\7\0\1\164\64\0\1\322\7\0"+
    "\1\322\2\0\1\322\57\0\1\323\7\0\1\323\2\0"+
    "\1\323\57\0\1\324\7\0\1\324\2\0\1\324\56\0"+
    "\1\325\7\0\1\325\122\0\2\326\24\0\1\250\70\0"+
    "\1\250\1\251\4\250\2\0\1\250\1\0\3\250\13\0"+
    "\2\327\12\0\1\250\5\0\1\253\1\250\6\0\1\250"+
    "\2\0\2\250\4\0\1\250\1\251\4\250\2\0\1\250"+
    "\1\0\3\250\27\0\1\250\5\0\2\250\6\0\1\250"+
    "\2\0\2\250\66\0\3\330\52\0\3\331\32\0\1\332"+
    "\7\0\1\332\64\0\1\333\7\0\1\333\2\0\1\333"+
    "\56\0\1\334\7\0\1\334\122\0\2\335\24\0\1\262"+
    "\70\0\1\262\1\263\4\262\2\0\1\262\1\0\3\262"+
    "\13\0\2\336\12\0\1\262\5\0\1\265\1\262\6\0"+
    "\1\262\2\0\2\262\4\0\1\262\1\263\4\262\2\0"+
    "\1\262\1\0\3\262\27\0\1\262\5\0\2\262\6\0"+
    "\1\262\2\0\2\262\66\0\3\337\52\0\3\340\32\0"+
    "\1\341\7\0\1\341\116\0\2\342\100\0\1\343\32\0"+
    "\1\344\7\0\1\344\113\0\2\345\37\0\1\346\7\0"+
    "\1\346\2\0\1\346\60\0\1\347\7\0\1\347\57\0"+
    "\1\350\7\0\1\350\64\0\1\351\7\0\1\351\2\0"+
    "\1\351\55\0\1\352\7\0\1\352\63\0\1\353\7\0"+
    "\1\353\53\0\1\222\1\223\1\224\2\222\1\225\2\0"+
    "\1\222\1\0\1\222\1\224\1\222\27\0\1\222\2\0"+
    "\2\354\1\0\1\227\1\222\6\0\1\222\2\0\1\230"+
    "\1\222\66\0\3\355\14\0\1\356\7\0\1\356\70\0"+
    "\1\357\67\0\1\360\7\0\1\360\53\0\1\313\77\0"+
    "\1\361\7\0\1\361\53\0\1\313\1\314\4\313\2\0"+
    "\1\313\1\0\3\313\27\0\1\313\5\0\2\313\6\0"+
    "\1\313\2\0\2\313\5\0\2\362\2\0\1\363\5\0"+
    "\1\362\30\0\3\364\3\0\1\362\1\0\2\365\7\0"+
    "\1\366\47\0\2\367\43\0\1\370\125\0\2\371\64\0"+
    "\2\372\40\0\1\373\7\0\1\373\61\0\1\374\7\0"+
    "\1\374\2\0\1\374\55\0\1\375\7\0\1\375\54\0"+
    "\1\250\1\251\4\250\2\0\1\250\1\0\3\250\27\0"+
    "\1\250\2\0\2\376\1\0\1\253\1\250\6\0\1\250"+
    "\2\0\2\250\12\0\1\377\7\0\1\377\123\0\2\124"+
    "\36\0\1\u0100\67\0\1\u0101\7\0\1\u0101\61\0\1\u0102"+
    "\7\0\1\u0102\2\0\1\u0102\55\0\1\u0103\7\0\1\u0103"+
    "\54\0\1\262\1\263\4\262\2\0\1\262\1\0\3\262"+
    "\27\0\1\262\2\0\2\u0104\1\0\1\265\1\262\6\0"+
    "\1\262\2\0\2\262\12\0\1\u0105\7\0\1\u0105\123\0"+
    "\2\u0106\36\0\1\u0107\67\0\1\u0108\7\0\1\u0108\122\0"+
    "\1\343\14\0\1\u0109\16\0\1\100\127\0\2\100\33\0"+
    "\1\u010a\7\0\1\u010a\105\0\2\u010b\51\0\1\u010c\67\0"+
    "\1\u010d\7\0\1\u010d\105\0\2\146\45\0\1\u010e\7\0"+
    "\1\u010e\2\0\1\u010e\60\0\1\u010f\7\0\1\u010f\57\0"+
    "\1\u0110\7\0\1\u0110\70\0\1\u0111\66\0\1\u0112\7\0"+
    "\1\u0112\2\0\1\u0112\61\0\1\106\67\0\1\u0113\7\0"+
    "\1\u0113\54\0\2\362\2\0\1\363\5\0\1\362\40\0"+
    "\2\365\7\0\1\366\13\0\1\u0114\7\0\1\u0114\102\0"+
    "\2\u0115\107\0\3\u0116\102\0\2\u0117\47\0\2\106\45\0"+
    "\1\u0118\7\0\1\u0118\2\0\1\u0118\77\0\2\u0119\52\0"+
    "\1\u011a\7\0\1\u011a\63\0\1\124\71\0\1\u011b\7\0"+
    "\1\u011b\105\0\2\172\46\0\1\u011c\7\0\1\u011c\65\0"+
    "\1\u011d\66\0\1\u011e\7\0\1\u011e\2\0\1\u011e\61\0"+
    "\1\131\71\0\1\u011f\7\0\1\u011f\105\0\2\202\46\0"+
    "\1\u0120\7\0\1\u0120\65\0\1\u0121\64\0\1\u0122\7\0"+
    "\1\u0122\64\0\1\u0123\7\0\1\u0123\2\0\1\u0123\140\0"+
    "\2\u0124\12\0\1\142\104\0\1\142\7\0\1\142\10\0"+
    "\1\142\1\0\1\142\33\0\1\u0125\7\0\1\u0125\2\0"+
    "\1\u0125\61\0\1\146\71\0\1\u0126\7\0\1\u0126\105\0"+
    "\2\u0127\51\0\1\u0128\66\0\1\u0129\7\0\1\u0129\2\0"+
    "\1\u0129\111\0\2\u012a\105\0\2\u012b\22\0\1\u012c\7\0"+
    "\1\u012c\131\0\2\u012d\21\0\1\u012e\7\0\1\u012e\136\0"+
    "\3\u012f\50\0\2\u0130\73\0\3\u0131\115\0\2\u0132\12\0"+
    "\1\172\114\0\2\u0133\45\0\1\u0134\7\0\1\u0134\2\0"+
    "\1\u0134\111\0\2\u0135\41\0\1\202\114\0\2\u0136\45\0"+
    "\1\u0137\7\0\1\u0137\2\0\1\u0137\103\0\2\131\77\0"+
    "\2\u0138\43\0\1\u0139\120\0\2\u013a\41\0\1\302\104\0"+
    "\1\u013b\7\0\1\u013b\10\0\1\u013b\1\0\1\u013b\33\0"+
    "\1\u013c\7\0\1\u013c\2\0\1\u013c\111\0\2\u013d\40\0"+
    "\1\u013e\7\0\1\u013e\115\0\3\u013f\34\0\1\u0140\7\0"+
    "\1\u0140\2\0\1\u0140\113\0\3\u0141\24\0\1\u0142\1\u0143"+
    "\4\u0142\2\0\1\u0142\1\0\3\u0142\27\0\1\u0144\2\u0145"+
    "\3\0\1\u0146\1\u0142\6\0\1\u0142\2\0\2\u0142\12\0"+
    "\1\u0147\7\0\1\u0147\65\0\1\u0148\7\0\1\u0148\120\0"+
    "\2\41\36\0\1\u0149\102\0\1\u014a\7\0\1\u014a\10\0"+
    "\1\u014a\1\0\1\u014a\65\0\2\u014b\40\0\1\u014c\7\0"+
    "\1\u014c\75\0\1\u014d\7\0\1\u014d\10\0\1\u014d\1\0"+
    "\1\u014d\65\0\2\u014e\40\0\1\u014f\7\0\1\u014f\120\0"+
    "\2\u0150\33\0\1\u0151\7\0\1\u0151\113\0\2\u0152\40\0"+
    "\1\u0153\7\0\1\u0153\142\0\2\u0154\36\0\2\u0155\44\0"+
    "\1\u0156\7\0\1\u0156\120\0\2\362\24\0\1\u0142\100\0"+
    "\1\u0157\7\0\1\u0157\2\0\1\u0157\47\0\1\u0142\1\u0143"+
    "\4\u0142\2\0\1\u0142\1\0\3\u0142\27\0\1\u0142\5\0"+
    "\2\u0142\6\0\1\u0142\2\0\2\u0142\20\0\1\u0158\147\0"+
    "\2\u0159\47\0\2\u015a\33\0\1\u015b\7\0\1\u015b\142\0"+
    "\2\u015c\11\0\1\u015d\7\0\1\u015d\142\0\2\u015e\67\0"+
    "\2\u015f\73\0\2\u0160\11\0\1\u0161\7\0\1\u0161\142\0"+
    "\2\u0162\14\0\1\u0163\102\0\2\u0164\57\0\1\362\122\0"+
    "\2\u0165\37\0\1\u0166\7\0\1\u0166\2\0\1\u0166\63\0"+
    "\1\u0167\145\0\2\u0168\73\0\2\u0169\14\0\1\u016a\147\0"+
    "\2\u016b\14\0\1\u016c\72\0\1\u016d\72\0\1\u016e\147\0"+
    "\2\u016f\14\0\1\u0170\125\0\2\u0171\52\0\2\u0172\103\0"+
    "\2\u0173\76\0\2\u0174\36\0\1\u0175\72\0\1\u0176\125\0"+
    "\2\u0177\36\0\1\u0178\125\0\2\u0179\73\0\1\u017a\45\0"+
    "\2\u017b\61\0\1\u017c\125\0\2\u017d\111\0\2\u017e\46\0"+
    "\3\u017f\35\0\1\u0180\7\0\1\u0180\140\0\2\u0181\53\0"+
    "\1\u0182\70\0\2\u0183\111\0\2\u0184\51\0\2\u0185\111\0"+
    "\2\u0186\53\0\1\u017a\14\0\1\u0187\12\0\1\u0188\7\0"+
    "\1\u0188\100\0\2\u0189\134\0\2\u018a\16\0\1\u018b\147\0"+
    "\2\u018c\14\0\1\u018d\127\0\1\u0182\14\0\1\u018e\73\0"+
    "\2\u018f\16\0\1\u0190\145\0\2\u0191\16\0\1\u0192\56\0"+
    "\65\u0193\1\0\5\u0193\60\0\2\u0194\17\0\1\u0195\7\0"+
    "\1\u0195\70\0\1\u0196\127\0\1\u0197\35\0\1\u0198\127\0"+
    "\1\u0199\21\0\65\u019a\1\0\5\u019a\14\0\1\u019b\127\0"+
    "\1\u019c\35\0\1\u019d\127\0\1\u019e\21\0\65\u0193\1\u019f"+
    "\5\u0193\14\0\1\u01a0\136\0\2\u01a1\62\0\1\u01a2\72\0"+
    "\1\u0197\14\0\1\u01a3\53\0\2\u01a4\73\0\1\u0199\14\0"+
    "\1\u01a5\4\0\65\u019a\1\u01a6\5\u019a\51\0\1\u01a7\72\0"+
    "\1\u019c\14\0\1\u01a8\55\0\1\u01a9\72\0\1\u019e\14\0"+
    "\1\u01aa\57\0\1\u01ab\70\0\1\u01ac\35\0\1\u01ad\127\0"+
    "\1\u01a2\14\0\1\u01ae\4\0\65\u01af\1\0\5\u01af\67\0"+
    "\2\u01b0\2\0\65\u01b1\1\0\5\u01b1\53\0\1\u01b2\70\0"+
    "\1\u01a7\14\0\1\u01b3\4\0\65\u01b4\1\0\5\u01b4\51\0"+
    "\1\u01a9\14\0\1\u01b5\4\0\65\u01b6\1\0\5\u01b6\56\0"+
    "\2\u01b7\64\0\1\u01ac\14\0\1\u01b8\55\0\1\u01b9\21\0"+
    "\65\u01ba\1\0\5\u01ba\65\u01af\1\u01bb\5\u01af\14\0\1\u01bc"+
    "\56\0\65\u01b1\1\u01bd\5\u01b1\56\0\2\u01be\13\0\65\u01bf"+
    "\1\0\5\u01bf\65\u01b4\1\u01c0\5\u01b4\65\u01c1\1\0\5\u01c1"+
    "\65\u01b6\1\u01c2\5\u01b6\62\0\3\u01c3\6\0\65\u01c4\1\0"+
    "\5\u01c4\51\0\1\u01b9\14\0\1\u01c5\4\0\65\u01ba\1\u01c6"+
    "\5\u01ba\53\0\1\u01c7\70\0\1\u01c8\74\0\1\u01c9\101\0"+
    "\3\u01ca\6\0\65\u01bf\1\u01cb\5\u01bf\53\0\1\u01cc\17\0"+
    "\65\u01c1\1\u01cd\5\u01c1\53\0\1\u01ce\25\0\1\u01cf\7\0"+
    "\1\u01cf\54\0\65\u01c4\1\u01d0\5\u01c4\65\u01d1\1\0\5\u01d1"+
    "\53\0\1\u01d2\75\0\2\u01d3\64\0\1\u01c8\14\0\1\u01d4"+
    "\62\0\2\u01d5\21\0\1\u01d6\7\0\1\u01d6\127\0\1\u01d7"+
    "\75\0\2\u01d8\66\0\1\u01d9\75\0\2\u01da\101\0\1\u01db"+
    "\57\0\1\u01dc\17\0\65\u01d1\1\u01dd\5\u01d1\56\0\2\u01de"+
    "\75\0\3\u01df\6\0\65\u01e0\1\0\5\u01e0\62\0\3\u01e1"+
    "\74\0\1\u01e2\62\0\2\u01e3\75\0\3\u01e4\64\0\2\u01e5"+
    "\75\0\3\u01e6\7\0\2\u01db\2\0\1\u01e7\2\0\1\22"+
    "\2\0\1\u01db\4\0\1\22\2\0\1\22\2\0\2\25"+
    "\121\0\2\u01e8\66\0\1\u01e9\101\0\3\u01ea\14\0\1\u01eb"+
    "\7\0\1\u01eb\54\0\65\u01e0\1\u01ec\5\u01e0\6\0\1\u01ed"+
    "\7\0\1\u01ed\55\0\2\u01e2\2\0\1\u01ee\2\0\1\43"+
    "\2\0\1\u01e2\4\0\1\43\2\0\1\43\2\0\2\44"+
    "\125\0\3\u01ef\14\0\1\u01f0\7\0\1\u01f0\136\0\3\u01f1"+
    "\14\0\1\u01f2\7\0\1\u01f2\62\0\1\u01f3\7\0\1\u01f3"+
    "\136\0\3\u01f4\64\0\2\u01f5\21\0\1\u01f6\7\0\1\u01f6"+
    "\142\0\1\u01f7\57\0\1\u01f8\105\0\1\u01f9\12\0\1\u01fa"+
    "\7\0\1\u01fa\62\0\1\u01fb\7\0\1\u01fb\142\0\1\u01fc"+
    "\12\0\1\u01fd\7\0\1\u01fd\142\0\1\u01fe\13\0\1\u01ff"+
    "\7\0\1\u01ff\61\0\1\u0200\7\0\1\u0200\136\0\3\u0201"+
    "\74\0\1\u0202\5\0\2\u01f7\2\0\1\u0203\5\0\1\u01f7"+
    "\24\0\2\104\107\0\2\u0204\14\0\2\u01f9\2\0\1\u0205"+
    "\5\0\1\u01f9\14\0\2\110\4\0\2\111\42\0\1\u0206"+
    "\7\0\1\u0206\141\0\1\u0207\5\0\2\u01fc\2\0\1\u0208"+
    "\5\0\1\u01fc\24\0\2\126\117\0\1\u0209\5\0\2\u01fe"+
    "\2\0\1\u020a\5\0\1\u01fe\24\0\2\133\41\0\1\u020b"+
    "\7\0\1\u020b\2\0\1\u020b\135\0\1\u020c\12\0\1\u020d"+
    "\7\0\1\u020d\55\0\2\u0202\2\0\1\u020e\5\0\1\u0202"+
    "\20\0\2\151\43\0\1\u020f\7\0\1\u020f\136\0\3\u0210"+
    "\14\0\1\u0211\7\0\1\u0211\64\0\1\u0212\7\0\1\u0212"+
    "\2\0\1\u0212\50\0\2\u0207\2\0\1\u0213\5\0\1\u0207"+
    "\20\0\2\175\43\0\1\u0214\7\0\1\u0214\55\0\2\u0209"+
    "\2\0\1\u0215\5\0\1\u0209\20\0\2\205\43\0\1\u0216"+
    "\7\0\1\u0216\65\0\1\u0217\7\0\1\u0217\52\0\2\u020c"+
    "\2\0\1\u0218\5\0\1\u020c\22\0\2\u0219\25\0\1\u021a"+
    "\73\0\1\u021b\12\0\1\u021c\7\0\1\u021c\63\0\1\u021d"+
    "\7\0\1\u021d\61\0\1\u021e\7\0\1\u021e\63\0\1\u021f"+
    "\7\0\1\u021f\64\0\1\u0220\7\0\1\u0220\57\0\1\u0221"+
    "\7\0\1\u0221\63\0\1\u0222\7\0\1\u0222\61\0\1\u0223"+
    "\7\0\1\u0223\63\0\1\u0224\7\0\1\u0224\65\0\1\u01db"+
    "\66\0\1\u0225\7\0\1\u0225\123\0\2\u0226\100\0\2\u0227"+
    "\14\0\2\u021b\2\0\1\u0228\5\0\1\u021b\22\0\2\u0229"+
    "\25\0\1\u022a\14\0\1\u022b\7\0\1\u022b\63\0\1\u022c"+
    "\7\0\1\u022c\2\0\1\u022c\135\0\1\u022d\14\0\1\u022e"+
    "\7\0\1\u022e\2\0\1\u022e\61\0\1\u01e2\67\0\1\u022f"+
    "\7\0\1\u022f\63\0\1\u0230\7\0\1\u0230\2\0\1\u0230"+
    "\56\0\1\u0231\7\0\1\u0231\63\0\1\u0232\7\0\1\u0232"+
    "\2\0\1\u0232\56\0\1\u0233\7\0\1\u0233\61\0\1\u0234"+
    "\7\0\1\u0234\136\0\3\u0235\14\0\1\u0236\7\0\1\u0236"+
    "\123\0\2\u0237\100\0\2\u0238\23\0\1\u0239\7\0\1\u0239"+
    "\2\0\1\u0239\60\0\1\u023a\7\0\1\u023a\52\0\2\u022d"+
    "\2\0\1\u023b\5\0\1\u022d\40\0\2\365\26\0\1\u023c"+
    "\7\0\1\u023c\61\0\1\u023d\7\0\1\u023d\2\0\1\u023d"+
    "\60\0\1\u023e\7\0\1\u023e\61\0\1\u023f\7\0\1\u023f"+
    "\2\0\1\u023f\60\0\1\u0240\7\0\1\u0240\61\0\1\u0241"+
    "\7\0\1\u0241\2\0\1\u0241\57\0\1\u0242\7\0\1\u0242"+
    "\2\0\1\u0242\55\0\1\u0243\7\0\1\u0243\63\0\1\u0244"+
    "\7\0\1\u0244\61\0\1\u0245\7\0\1\u0245\136\0\3\u0246"+
    "\17\0\1\u0247\7\0\1\u0247\63\0\1\u01f7\66\0\1\u0248"+
    "\7\0\1\u0248\66\0\1\u01f9\71\0\1\u0249\7\0\1\u0249"+
    "\63\0\1\u01fc\71\0\1\u024a\7\0\1\u024a\63\0\1\u01fe"+
    "\71\0\1\u024b\7\0\1\u024b\51\0\1\u024c\1\u024d\4\u024c"+
    "\2\0\1\u024c\1\0\3\u024c\27\0\1\u024e\2\u024f\3\0"+
    "\1\u0250\1\u024c\6\0\1\u024c\2\0\2\u024c\20\0\1\u0251"+
    "\66\0\1\u0252\7\0\1\u0252\2\0\1\u0252\57\0\1\u0253"+
    "\7\0\1\u0253\2\0\1\u0253\55\0\1\u0254\7\0\1\u0254"+
    "\66\0\1\u0202\67\0\1\u0255\7\0\1\u0255\65\0\1\u0207"+
    "\72\0\1\u0209\72\0\1\u020c\62\0\1\u024c\116\0\2\u0256"+
    "\43\0\1\u024c\1\u024d\4\u024c\2\0\1\u024c\1\0\3\u024c"+
    "\27\0\1\u024c\5\0\2\u024c\6\0\1\u024c\2\0\2\u024c"+
    "\14\0\1\u0257\7\0\1\u0257\2\0\1\u0257\60\0\1\u0258"+
    "\7\0\1\u0258\52\0\2\u0259\2\0\1\u025a\5\0\1\u0259"+
    "\24\0\2\u025b\2\0\3\u025c\3\0\1\u0259\12\0\1\u025d"+
    "\21\0\1\u025e\66\0\1\u025f\7\0\1\u025f\2\0\1\u025f"+
    "\125\0\2\u0260\55\0\2\u0261\41\0\1\u021b\61\0\2\u0259"+
    "\2\0\1\u025a\5\0\1\u0259\24\0\2\u025b\23\0\1\u025d"+
    "\13\0\1\u0262\7\0\1\u0262\55\0\2\u0263\2\0\1\u0264"+
    "\1\u0265\4\0\1\u0263\2\0\1\u0265\15\0\2\u0266\14\0"+
    "\1\u0263\12\0\1\u0267\33\0\2\u0268\121\0\2\u0269\23\0"+
    "\1\u026a\7\0\1\u026a\2\0\1\u026a\60\0\1\u026b\7\0"+
    "\1\u026b\115\0\3\u026c\35\0\1\u026d\7\0\1\u026d\60\0"+
    "\1\u026e\7\0\1\u026e\54\0\2\u0263\2\0\1\u0264\5\0"+
    "\1\u0263\20\0\2\u0266\27\0\1\u0267\13\0\1\u026f\7\0"+
    "\1\u026f\55\0\2\u0263\2\0\1\u0264\5\0\1\u0263\20\0"+
    "\2\u0266\6\0\3\u0270\3\0\1\u0263\12\0\1\u0267\5\0"+
    "\1\u024c\1\u024d\4\u024c\2\0\1\u024c\1\0\3\u024c\23\0"+
    "\2\u0271\2\0\1\u024c\5\0\1\u0250\1\u024c\6\0\1\u024c"+
    "\2\0\2\u024c\62\0\2\u0272\71\0\2\u0273\75\0\3\u0274"+
    "\50\0\2\u0275\41\0\1\u022d\127\0\2\u0276\113\0\2\u0277"+
    "\10\0\1\u0278\7\0\1\u0278\2\0\1\u0278\56\0\1\u0279"+
    "\7\0\1\u0279\122\0\2\u027a\22\0\1\u024c\1\u024d\4\u024c"+
    "\2\0\1\u024c\1\0\3\u024c\13\0\2\u027b\12\0\1\u024c"+
    "\5\0\1\u0250\1\u024c\6\0\1\u024c\2\0\2\u024c\66\0"+
    "\3\u027c\52\0\3\u027d\32\0\1\u027e\7\0\1\u027e\65\0"+
    "\1\u027f\7\0\1\u027f\65\0\1\u0280\67\0\1\u0281\7\0"+
    "\1\u0281\61\0\1\u0282\7\0\1\u0282\2\0\1\u0282\55\0"+
    "\1\u0283\7\0\1\u0283\54\0\1\u024c\1\u024d\4\u024c\2\0"+
    "\1\u024c\1\0\3\u024c\27\0\1\u024c\2\0\2\u0284\1\0"+
    "\1\u0250\1\u024c\6\0\1\u024c\2\0\2\u024c\12\0\1\u0285"+
    "\7\0\1\u0285\123\0\2\u0259\36\0\1\u0286\147\0\2\u0287"+
    "\47\0\2\u0288\34\0\1\u0259\71\0\1\u0289\7\0\1\u0289"+
    "\105\0\2\u0263\46\0\1\u028a\7\0\1\u028a\65\0\1\u028b"+
    "\66\0\1\u028c\7\0\1\u028c\2\0\1\u028c\63\0\1\u028d"+
    "\145\0\2\u028e\14\0\1\u0263\114\0\2\u028f\45\0\1\u0290"+
    "\7\0\1\u0290\2\0\1\u0290\111\0\2\u0291\76\0\2\u0292"+
    "\36\0\1\u0293\102\0\1\u0276\7\0\1\u0276\10\0\1\u0276"+
    "\1\0\1\u0276\65\0\2\u0294\40\0\1\u0295\7\0\1\u0295"+
    "\140\0\2\u0296\53\0\1\u0297\32\0\1\u0298\7\0\1\u0298"+
    "\142\0\2\u0299\14\0\1\u029a\127\0\1\u0297\14\0\1\u029b"+
    "\75\0\2\u029c\14\0\1\u029d\127\0\1\u029e\21\0\65\u029f"+
    "\1\0\5\u029f\14\0\1\u02a0\125\0\2\u02a1\73\0\1\u029e"+
    "\14\0\1\u02a2\4\0\65\u029f\1\u02a3\5\u029f\47\0\2\u02a4"+
    "\111\0\2\u02a5\2\0\65\u02a6\1\0\5\u02a6\53\0\1\u02a7"+
    "\106\0\2\u02a8\16\0\1\u02a9\56\0\65\u02a6\1\u02aa\5\u02a6"+
    "\56\0\2\u02ab\27\0\1\u02ac\127\0\1\u02ad\74\0\1\u02ae"+
    "\101\0\3\u02af\57\0\1\u02b0\72\0\1\u02ad\14\0\1\u02b1"+
    "\62\0\2\u02b2\21\0\1\u02b3\7\0\1\u02b3\125\0\1\u02b0"+
    "\14\0\1\u02b4\4\0\65\u02b5\1\0\5\u02b5\62\0\3\u02b6"+
    "\74\0\1\u02b7\4\0\65\u02b8\1\0\5\u02b8\65\u02b5\1\u02b9"+
    "\5\u02b5\6\0\1\u02ba\7\0\1\u02ba\55\0\2\u02b7\2\0"+
    "\1\u02bb\5\0\1\u02b7\22\0\2\u0219\33\0\65\u02b8\1\u02bc"+
    "\5\u02b8\53\0\1\u02bd\105\0\1\u02be\12\0\1\u02bf\7\0"+
    "\1\u02bf\127\0\1\u02c0\75\0\2\u02c1\14\0\2\u02be\2\0"+
    "\1\u02c2\5\0\1\u02be\22\0\2\u0229\42\0\1\u02c3\7\0"+
    "\1\u02c3\131\0\2\u02c4\75\0\3\u02c5\14\0\1\u02c6\7\0"+
    "\1\u02c6\64\0\1\u02c7\7\0\1\u02c7\2\0\1\u02c7\131\0"+
    "\3\u02c8\14\0\1\u02c9\7\0\1\u02c9\63\0\1\u02ca\7\0"+
    "\1\u02ca\64\0\1\u02cb\7\0\1\u02cb\57\0\1\u02cc\7\0"+
    "\1\u02cc\142\0\1\u02cd\14\0\1\u02ce\7\0\1\u02ce\2\0"+
    "\1\u02ce\61\0\1\u02b7\146\0\1\u02cf\5\0\2\u02cd\2\0"+
    "\1\u02d0\5\0\1\u02cd\24\0\2\u025b\42\0\1\u02d1\7\0"+
    "\1\u02d1\52\0\2\u02cf\2\0\1\u02d2\5\0\1\u02cf\20\0"+
    "\2\u0266\43\0\1\u02d3\7\0\1\u02d3\66\0\1\u02be\66\0"+
    "\1\u02d4\7\0\1\u02d4\63\0\1\u02d5\7\0\1\u02d5\62\0"+
    "\1\u02d6\7\0\1\u02d6\63\0\1\u02d7\7\0\1\u02d7\2\0"+
    "\1\u02d7\57\0\1\u02d8\7\0\1\u02d8\2\0\1\u02d8\60\0"+
    "\1\u02d9\7\0\1\u02d9\62\0\1\u02da\7\0\1\u02da\63\0"+
    "\1\u02cd\72\0\1\u02cf\60\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[41595];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\1\1\11\1\1\1\11\1\1\24\0\1\11"+
    "\1\1\1\0\1\1\22\0\1\11\1\1\1\0\1\1"+
    "\10\0\1\11\122\0\1\11\3\1\1\0\2\1\17\0"+
    "\1\11\1\1\1\0\1\1\6\0\1\11\1\1\1\0"+
    "\1\1\25\0\1\11\1\1\1\0\1\1\72\0\1\11"+
    "\70\0\1\11\2\1\1\0\1\1\u0105\0\1\11\2\1"+
    "\1\0\1\1\212\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[730];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	
	/* Custom java code */

    @Override
	public String language() { return "IT"; }

	@Override
	public String version() { return "0.5"; }


	/* An empty default constructor is required to comply with LinkolnService */
	
	public LegislationAuthorities() { }
	
	@Override
	public final boolean run() {
		
		try {
			
			yyreset(new StringReader(getInput()));
			yylex();
			
		} catch (IOException e) {

			e.printStackTrace();
			return false;
		}
		
		return true;
	}
	
	@Override
	protected void addValue() {
	
		//annotationEntity.setValue("value");
	} 



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LegislationAuthorities(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 382) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { addText(yytext());
	position++;
            } 
            // fall through
          case 13: break;
          case 2: 
            { addText(yytext());
		position++;
            } 
            // fall through
          case 14: break;
          case 3: 
            { annotate(new LegislationAuthority(), "IT_CAPO_GOV", true, true);
            } 
            // fall through
          case 15: break;
          case 4: 
            { annotate(new LegislationAuthority(), "IT_CAPO_PROVV_STATO", true, true);
            } 
            // fall through
          case 16: break;
          case 5: 
            { addText(yytext());
		position--; //account for the following {LKN_C} character
		yybegin(YYINITIAL);
            } 
            // fall through
          case 17: break;
          case 6: 
            { annotate(new EuropeanLegislationAuthority(), "EU_PARLIAMENT", true, true);
            } 
            // fall through
          case 18: break;
          case 7: 
            { annotate(new EuropeanLegislationAuthority(), "EU_COUNCIL", true, true);
            } 
            // fall through
          case 19: break;
          case 8: 
            { annotate(new EuropeanLegislationAuthority(), "EU_COMMISSION", true, true);
            } 
            // fall through
          case 20: break;
          case 9: 
            { annotate(new LegislationAuthority(), "IT_PRESIDENT_REPUBLIC", true, true);
            } 
            // fall through
          case 21: break;
          case 10: 
            { addText(yytext()); 
	yybegin(lkn);
            } 
            // fall through
          case 22: break;
          case 11: 
            { annotate(new LegislationAuthority(), "IT_PRESIDENT_COUNCIL", true, true);
            } 
            // fall through
          case 23: break;
          case 12: 
            { annotate(new EuropeanLegislationAuthority(), "EU_PARLIAMENT_COUNCIL", true, true);
            } 
            // fall through
          case 24: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java LegislationAuthorities [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        LegislationAuthorities scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new LegislationAuthorities(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
