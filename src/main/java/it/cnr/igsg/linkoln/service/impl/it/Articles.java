/* The following code was generated by JFlex 1.7.0 */

/*******************************************************************************
 * Copyright (c) 2016-2021 Institute of Legal Information and Judicial Systems IGSG-CNR (formerly ITTIG-CNR)
 * 
 * This program and the accompanying materials  are made available under the terms of the GNU General Public
 * License as published by the Free Software Foundation; either version 3 of the License, or (at your option)
 * any later version. 
 * You may not use this work except in compliance with the Licence.
 * You may obtain a copy of the Licence at: https://www.gnu.org/licenses/gpl-3.0.txt
 * Unless required by applicable law or agreed to in writing, software distributed under the Licence is 
 * distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the Licence for the specific language governing permissions and limitations under the Licence.
 *  
 * Authors: Lorenzo Bacci (IGSG-CNR)
 ******************************************************************************/
 package it.cnr.igsg.linkoln.service.impl.it;

import java.io.IOException;
import java.io.StringReader;

import it.cnr.igsg.linkoln.entity.*;
import it.cnr.igsg.linkoln.service.*;

import it.cnr.igsg.linkoln.service.impl.Util;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>jflex/Articles.jflex</tt>
 */
public class Articles extends LinkolnAnnotationService {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int lkn = 2;
  public static final int readPartitionElementState = 4;
  public static final int readValueState = 6;
  public static final int readPattern1State = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\14\1\2\1\104\1\105\1\1\22\0\1\73\5\0\1\6"+
    "\1\5\1\0\1\16\2\0\1\15\1\3\1\56\1\57\1\55\1\55"+
    "\1\55\1\55\1\55\1\55\1\55\1\55\1\55\1\55\1\17\1\13"+
    "\5\0\1\30\1\10\1\42\1\72\1\40\1\25\1\32\1\102\1\52"+
    "\1\25\1\76\1\64\1\62\1\7\1\54\1\12\1\66\1\34\1\26"+
    "\1\46\1\44\1\36\1\25\1\70\1\25\1\25\1\77\1\60\1\100"+
    "\1\103\1\4\1\5\1\27\1\22\1\41\1\71\1\37\1\20\1\31"+
    "\1\101\1\51\1\20\1\75\1\63\1\61\1\21\1\53\1\24\1\65"+
    "\1\33\1\23\1\45\1\43\1\35\1\20\1\67\1\20\1\20\12\0"+
    "\1\104\44\0\1\103\5\0\1\103\3\0\1\5\5\0\1\103\5\0"+
    "\1\20\1\20\4\20\1\0\1\20\1\47\1\47\2\20\1\20\1\20"+
    "\2\20\1\0\1\20\1\20\1\20\3\20\2\0\1\20\1\20\2\20"+
    "\3\0\1\20\1\20\4\20\1\0\1\20\1\47\1\47\2\20\1\20"+
    "\1\20\2\20\1\0\1\20\1\20\1\20\3\20\2\0\1\20\1\20"+
    "\2\20\53\0\1\20\1\20\6\0\2\50\66\0\1\20\1\20\4\0"+
    "\1\20\1\20\17\0\1\11\u1c88\0\1\20\1\20\216\0\2\20\42\0"+
    "\1\20\1\20\u0144\0\1\14\20\0\1\3\1\3\4\0\1\5\16\0"+
    "\1\104\1\104\u0100\0\1\74\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\4\1\2\2\3\3\1\4\1\3\12\5\1\6"+
    "\2\5\3\3\71\0\1\4\15\0\1\7\3\0\1\10"+
    "\5\0\1\11\33\0\2\4\1\0\1\4\7\0\1\4"+
    "\12\0\1\10\1\0\1\10\22\0\1\4\13\0\1\12"+
    "\15\0\1\4\13\0\1\13\26\0\1\14\3\0\5\15"+
    "\2\0\2\15\6\0\1\15\25\0\2\16\3\0\1\17"+
    "\2\0\1\20\5\0\1\21\1\0\1\22\3\0\1\23"+
    "\63\0\1\4\4\0\1\4\3\0\1\24\35\0\5\15"+
    "\2\0\1\15\3\0\10\25\4\0\2\15\11\0\4\15"+
    "\2\0\1\15\14\0\1\25\46\0\1\26\1\27\34\0"+
    "\3\15\1\0\2\15\35\0\1\15\34\0\1\30\1\31"+
    "\1\0\1\32\2\0\1\33\4\0\1\34\1\0\1\35"+
    "\16\0\3\15\72\0\1\36\5\0\1\37\1\40\3\0"+
    "\1\41\2\0\1\42\1\0\1\43\4\0\1\44\24\0"+
    "\3\15\1\0\1\15\3\0\1\15\60\0\1\15\3\0"+
    "\1\15\11\0\3\15\37\0\1\45\1\46\63\0\1\15"+
    "\3\0\1\15\105\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[946];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\u0118\0\u015e\0\u01a4\0\u01ea"+
    "\0\u0230\0\u01ea\0\u0276\0\u01ea\0\u02bc\0\u0302\0\u0348\0\u038e"+
    "\0\u01ea\0\u03d4\0\u041a\0\u0460\0\u04a6\0\u04ec\0\u0532\0\u0578"+
    "\0\u05be\0\u0604\0\u064a\0\u0690\0\u06d6\0\u071c\0\u0762\0\u07a8"+
    "\0\u07ee\0\u0834\0\u015e\0\u087a\0\u08c0\0\u0906\0\u094c\0\u0992"+
    "\0\u09d8\0\u0a1e\0\u0a64\0\u0aaa\0\u0af0\0\u0b36\0\u0b7c\0\u0bc2"+
    "\0\u0c08\0\u0c4e\0\u0c94\0\u0cda\0\u0d20\0\u0d66\0\u0dac\0\u0df2"+
    "\0\u0e38\0\u0e7e\0\u0ec4\0\u0f0a\0\u0f50\0\u0f96\0\u0fdc\0\u1022"+
    "\0\u1068\0\u10ae\0\u10f4\0\u113a\0\u1180\0\u11c6\0\u120c\0\u1252"+
    "\0\u07a8\0\u1298\0\u12de\0\u1324\0\u136a\0\u13b0\0\u13f6\0\u143c"+
    "\0\u1482\0\u14c8\0\u150e\0\u1554\0\u159a\0\u15e0\0\u1626\0\u166c"+
    "\0\u16b2\0\u16f8\0\u173e\0\u1784\0\u17ca\0\u1810\0\u1856\0\u189c"+
    "\0\u18e2\0\u1928\0\u196e\0\u19b4\0\u19fa\0\u1a40\0\u1a86\0\u01ea"+
    "\0\u1acc\0\u1b12\0\u1b58\0\u1b9e\0\u1be4\0\u1c2a\0\u04a6\0\u1c70"+
    "\0\u1cb6\0\u1cfc\0\u1d42\0\u1d88\0\u1dce\0\u1e14\0\u1e5a\0\u1ea0"+
    "\0\u1ee6\0\u071c\0\u1f2c\0\u1f72\0\u1fb8\0\u1ffe\0\u2044\0\u208a"+
    "\0\u20d0\0\u2116\0\u215c\0\u21a2\0\u21e8\0\u038e\0\u222e\0\u2274"+
    "\0\u22ba\0\u2300\0\u2346\0\u238c\0\u23d2\0\u2418\0\u01ea\0\u245e"+
    "\0\u24a4\0\u24ea\0\u2530\0\u2576\0\u25bc\0\u2602\0\u2648\0\u268e"+
    "\0\u26d4\0\u271a\0\u2760\0\u27a6\0\u27ec\0\u2832\0\u2878\0\u28be"+
    "\0\u2904\0\u294a\0\u2990\0\u29d6\0\u2a1c\0\u01ea\0\u2a62\0\u2aa8"+
    "\0\u2aee\0\u2b34\0\u2b7a\0\u2bc0\0\u2c06\0\u2c4c\0\u2c92\0\u2cd8"+
    "\0\u2d1e\0\u2d64\0\u2daa\0\u2df0\0\u2e36\0\u2e7c\0\u2ec2\0\u2f08"+
    "\0\u2f4e\0\u2f94\0\u2fda\0\u3020\0\u3066\0\u30ac\0\u30f2\0\u3138"+
    "\0\u317e\0\u31c4\0\u320a\0\u3250\0\u01ea\0\u3296\0\u32dc\0\u3322"+
    "\0\u3368\0\u33ae\0\u33f4\0\u343a\0\u3480\0\u34c6\0\u350c\0\u2418"+
    "\0\u3552\0\u3598\0\u35de\0\u3624\0\u366a\0\u36b0\0\u36f6\0\u373c"+
    "\0\u3782\0\u37c8\0\u380e\0\u3854\0\u389a\0\u38e0\0\u01ea\0\u3926"+
    "\0\u396c\0\u39b2\0\u39f8\0\u3a3e\0\u3a84\0\u3aca\0\u3b10\0\u3b56"+
    "\0\u3b9c\0\u3be2\0\u3c28\0\u3c6e\0\u3cb4\0\u3cfa\0\u3d40\0\u3d86"+
    "\0\u3dcc\0\u3e12\0\u3e58\0\u3e9e\0\u3ee4\0\u01ea\0\u3f2a\0\u3f70"+
    "\0\u3fb6\0\u01ea\0\u3ffc\0\u4042\0\u4088\0\u40ce\0\u4114\0\u415a"+
    "\0\u41a0\0\u41e6\0\u41a0\0\u422c\0\u4272\0\u42b8\0\u42fe\0\u4344"+
    "\0\u438a\0\u43d0\0\u4416\0\u445c\0\u44a2\0\u44e8\0\u452e\0\u4574"+
    "\0\u45ba\0\u4600\0\u4646\0\u468c\0\u46d2\0\u4718\0\u475e\0\u47a4"+
    "\0\u35de\0\u47ea\0\u4830\0\u4876\0\u48bc\0\u4902\0\u01ea\0\u4948"+
    "\0\u498e\0\u49d4\0\u4a1a\0\u4a60\0\u4aa6\0\u4aec\0\u4b32\0\u4b78"+
    "\0\u4bbe\0\u4c04\0\u4c4a\0\u4c90\0\u4cd6\0\u4d1c\0\u4d62\0\u4da8"+
    "\0\u4dee\0\u4e34\0\u01ea\0\u4e7a\0\u4ec0\0\u4f06\0\u4f4c\0\u4f92"+
    "\0\u4fd8\0\u501e\0\u5064\0\u50aa\0\u4042\0\u50f0\0\u40ce\0\u41e6"+
    "\0\u5136\0\u517c\0\u51c2\0\u5208\0\u524e\0\u5294\0\u52da\0\u5320"+
    "\0\u5366\0\u53ac\0\u53f2\0\u5438\0\u547e\0\u54c4\0\u550a\0\u5550"+
    "\0\u5596\0\u55dc\0\u5622\0\u5668\0\u56ae\0\u56f4\0\u573a\0\u5780"+
    "\0\u57c6\0\u580c\0\u5852\0\u5898\0\u58de\0\u5924\0\u596a\0\u59b0"+
    "\0\u59f6\0\u5a3c\0\u5a82\0\u5ac8\0\u5b0e\0\u5b54\0\u5b9a\0\u5be0"+
    "\0\u5c26\0\u5c6c\0\u5cb2\0\u5cf8\0\u5d3e\0\u5d84\0\u5dca\0\u5e10"+
    "\0\u5e56\0\u5e9c\0\u5ee2\0\u5f28\0\u5f6e\0\u5fb4\0\u5ffa\0\u6040"+
    "\0\u6086\0\u60cc\0\u6112\0\u6158\0\u619e\0\u61e4\0\u622a\0\u6270"+
    "\0\u62b6\0\u62fc\0\u6342\0\u6388\0\u63ce\0\u6414\0\u645a\0\u64a0"+
    "\0\u64e6\0\u652c\0\u6572\0\u65b8\0\u65fe\0\u6644\0\u668a\0\u66d0"+
    "\0\u6716\0\u675c\0\u67a2\0\u67e8\0\u67a2\0\u682e\0\u6874\0\u68ba"+
    "\0\u01ea\0\u6900\0\u668a\0\u66d0\0\u6716\0\u41a0\0\u675c\0\u67a2"+
    "\0\u6946\0\u698c\0\u69d2\0\u6a18\0\u6a5e\0\u6aa4\0\u6aea\0\u6b30"+
    "\0\u6b76\0\u6bbc\0\u6c02\0\u6c48\0\u6c8e\0\u6cd4\0\u6d1a\0\u6d60"+
    "\0\u6da6\0\u6dec\0\u6e32\0\u6e78\0\u6ebe\0\u6f04\0\u6f04\0\u6f4a"+
    "\0\u6f90\0\u6fd6\0\u701c\0\u7062\0\u70a8\0\u70ee\0\u7134\0\u717a"+
    "\0\u71c0\0\u7206\0\u724c\0\u7292\0\u72d8\0\u731e\0\u7364\0\u73aa"+
    "\0\u73f0\0\u7436\0\u747c\0\u74c2\0\u7508\0\u754e\0\u7594\0\u75da"+
    "\0\u7620\0\u7666\0\u76ac\0\u76f2\0\u7738\0\u777e\0\u77c4\0\u780a"+
    "\0\u7850\0\u7896\0\u78dc\0\u7922\0\u7968\0\u79ae\0\u79f4\0\u7a3a"+
    "\0\u7a80\0\u7ac6\0\u7b0c\0\u7b52\0\u7b98\0\u7bde\0\u7c24\0\u7c6a"+
    "\0\u7cb0\0\u01ea\0\u01ea\0\u7cf6\0\u7d3c\0\u7d82\0\u7dc8\0\u7e0e"+
    "\0\u7e54\0\u7e9a\0\u7ee0\0\u7f26\0\u7f6c\0\u7fb2\0\u668a\0\u66d0"+
    "\0\u6716\0\u675c\0\u7ff8\0\u803e\0\u8084\0\u80ca\0\u8110\0\u8156"+
    "\0\u819c\0\u81e2\0\u8228\0\u826e\0\u82b4\0\u82fa\0\u8340\0\u8386"+
    "\0\u83cc\0\u8412\0\u8458\0\u5550\0\u849e\0\u84e4\0\u852a\0\u8570"+
    "\0\u85b6\0\u85fc\0\u6da6\0\u6dec\0\u6e32\0\u8642\0\u8688\0\u86ce"+
    "\0\u8714\0\u875a\0\u87a0\0\u87e6\0\u882c\0\u8872\0\u88b8\0\u88fe"+
    "\0\u8944\0\u898a\0\u89d0\0\u8a16\0\u8a5c\0\u8aa2\0\u8ae8\0\u8b2e"+
    "\0\u8b74\0\u8bba\0\u8c00\0\u8c46\0\u8c8c\0\u8cd2\0\u8d18\0\u8d5e"+
    "\0\u8da4\0\u8dea\0\u8e30\0\u8e76\0\u8ebc\0\u8f02\0\u8f48\0\u8f8e"+
    "\0\u8fd4\0\u901a\0\u9060\0\u90a6\0\u90ec\0\u9132\0\u9178\0\u91be"+
    "\0\u9204\0\u924a\0\u9290\0\u92d6\0\u931c\0\u9362\0\u93a8\0\u01ea"+
    "\0\u01ea\0\u93ee\0\u01ea\0\u9434\0\u947a\0\u01ea\0\u94c0\0\u9506"+
    "\0\u954c\0\u9592\0\u95d8\0\u961e\0\u01ea\0\u9664\0\u96aa\0\u96f0"+
    "\0\u9736\0\u977c\0\u97c2\0\u9808\0\u984e\0\u9894\0\u83cc\0\u8412"+
    "\0\u849e\0\u98da\0\u9920\0\u9966\0\u99ac\0\u99f2\0\u9a38\0\u9a7e"+
    "\0\u9ac4\0\u9b0a\0\u9b50\0\u9b96\0\u9bdc\0\u9c22\0\u9c68\0\u9cae"+
    "\0\u9cf4\0\u9d3a\0\u9d80\0\u9dc6\0\u9e0c\0\u9e52\0\u9e98\0\u9ede"+
    "\0\u9f24\0\u9f6a\0\u9fb0\0\u9ff6\0\ua03c\0\ua082\0\ua0c8\0\ua10e"+
    "\0\ua154\0\ua19a\0\ua1e0\0\ua226\0\ua26c\0\ua2b2\0\ua2f8\0\ua33e"+
    "\0\ua384\0\ua3ca\0\ua410\0\ua456\0\ua49c\0\ua4e2\0\ua528\0\ua56e"+
    "\0\ua5b4\0\ua5fa\0\ua640\0\ua686\0\ua6cc\0\ua712\0\ua758\0\ua79e"+
    "\0\ua7e4\0\ua82a\0\ua870\0\ua8b6\0\ua8fc\0\ua942\0\ua988\0\ua9ce"+
    "\0\u01ea\0\uaa14\0\uaa5a\0\uaaa0\0\uaae6\0\uab2c\0\u01ea\0\u01ea"+
    "\0\uab72\0\uabb8\0\uabfe\0\u01ea\0\uac44\0\uac8a\0\u01ea\0\uacd0"+
    "\0\u01ea\0\uad16\0\uad5c\0\uada2\0\uade8\0\u01ea\0\uae2e\0\uae74"+
    "\0\uaeba\0\uaf00\0\uaf46\0\uaf8c\0\uafd2\0\u99ac\0\u99f2\0\ub018"+
    "\0\ub05e\0\ub0a4\0\ub0ea\0\ub130\0\ub176\0\ub1bc\0\ub202\0\ub248"+
    "\0\ub28e\0\ub2d4\0\ub31a\0\ub360\0\ub3a6\0\ub3ec\0\ub432\0\ub478"+
    "\0\ub4be\0\ub504\0\ub54a\0\ub590\0\ub5d6\0\ub61c\0\ub662\0\ub6a8"+
    "\0\ub6ee\0\ub734\0\ub77a\0\ub7c0\0\ub806\0\ub84c\0\ub892\0\ub8d8"+
    "\0\ub91e\0\ub964\0\ub9aa\0\ub9f0\0\uba36\0\uba7c\0\ubac2\0\ubb08"+
    "\0\ubb4e\0\ubb94\0\ubbda\0\ubc20\0\ubc66\0\ubcac\0\ubcf2\0\ubd38"+
    "\0\ubd7e\0\ubdc4\0\ube0a\0\ube50\0\ube96\0\ubedc\0\ubf22\0\ubf68"+
    "\0\ubfae\0\ubff4\0\uc03a\0\uc080\0\uc0c6\0\uc10c\0\uc152\0\uc198"+
    "\0\uc1de\0\uc224\0\uc26a\0\uc2b0\0\uc2b0\0\uc2f6\0\uc33c\0\uc382"+
    "\0\uc3c8\0\uc40e\0\uc454\0\uc49a\0\ub360\0\ub3a6\0\ub432\0\uc4e0"+
    "\0\uc526\0\uc56c\0\uc5b2\0\uc5f8\0\uc63e\0\uc684\0\uc6ca\0\uc710"+
    "\0\uc756\0\uc79c\0\uc7e2\0\uc828\0\uc86e\0\uc8b4\0\uc8fa\0\uc940"+
    "\0\uc986\0\uc9cc\0\uca12\0\uca58\0\uca9e\0\ucae4\0\ucb2a\0\ucb70"+
    "\0\ucbb6\0\ucbfc\0\ucc42\0\ucc88\0\uccce\0\ucd14\0\ucd5a\0\ucda0"+
    "\0\ucde6\0\uce2c\0\uce72\0\u01ea\0\u01ea\0\uceb8\0\ucefe\0\ucf44"+
    "\0\ucf8a\0\ucfd0\0\ud016\0\ud05c\0\u6aa4\0\ud0a2\0\ud0e8\0\ud12e"+
    "\0\ud174\0\ud1ba\0\ud200\0\ud246\0\ud28c\0\ud2d2\0\uc5b2\0\uc5f8"+
    "\0\ud318\0\ud35e\0\ud3a4\0\ud3ea\0\ud430\0\ud476\0\ud4bc\0\ud502"+
    "\0\ud548\0\ud58e\0\ud5d4\0\ud61a\0\ud660\0\ud6a6\0\ud6ec\0\ud732"+
    "\0\ud778\0\ud7be\0\ud804\0\ud84a\0\ud890\0\ud8d6\0\ud91c\0\ud962"+
    "\0\ud9a8\0\ud9ee\0\uda34\0\uda7a\0\udac0\0\udb06\0\udb4c\0\udb92"+
    "\0\udbd8\0\udbd8\0\udc1e\0\udc64\0\udcaa\0\udcf0\0\udd36\0\udd7c"+
    "\0\uddc2\0\ude08\0\ude4e\0\ude94\0\udeda\0\udf20\0\udf66\0\udfac"+
    "\0\udff2\0\ue038\0\ue07e\0\ue0c4\0\ue10a\0\ue150\0\ue196\0\ue1dc"+
    "\0\ue222\0\ue268\0\ue2ae\0\ue2f4\0\ue33a\0\ue380\0\ue3c6\0\ue40c"+
    "\0\ue452\0\ue498\0\ue4de\0\ue524\0\ue56a\0\ue5b0\0\ue5f6\0\ue63c"+
    "\0\ue682\0\ue6c8\0\ue70e\0\ue754\0\ue79a\0\ue7e0\0\ue826\0\ue86c"+
    "\0\ue8b2\0\ue8f8\0\ue93e\0\ue984\0\ue9ca\0\uea10\0\uea56\0\uea9c"+
    "\0\ueae2\0\ueb28\0\ueb6e\0\uebb4\0\uebfa\0\uec40\0\uec86\0\ueccc"+
    "\0\ued12\0\ued58\0\ued9e\0\uede4\0\uee2a\0\uee70\0\ueeb6\0\ueefc"+
    "\0\uef42\0\uef88";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[946];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\5\6\2\10\1\6\1\10\5\6\30\10"+
    "\1\6\5\10\3\6\12\10\2\6\2\10\1\11\1\6"+
    "\2\10\3\6\77\12\1\13\6\12\27\14\2\15\6\14"+
    "\2\16\14\14\1\17\13\14\2\20\13\14\7\21\1\22"+
    "\1\23\1\24\7\21\1\22\1\23\1\24\2\21\1\24"+
    "\2\25\4\21\2\26\2\27\2\21\2\30\2\31\4\21"+
    "\2\32\1\33\7\21\2\34\2\21\2\35\13\21\27\14"+
    "\2\36\6\14\2\37\14\14\1\40\30\14\27\0\2\41"+
    "\6\0\2\42\47\0\1\43\24\0\2\41\6\0\2\42"+
    "\202\0\2\41\6\0\2\42\22\0\2\44\100\0\1\45"+
    "\27\0\2\46\3\0\1\47\5\0\1\46\14\0\2\50"+
    "\2\51\13\0\3\46\2\0\1\17\5\0\2\52\6\0"+
    "\1\46\11\0\1\46\67\0\2\53\16\0\2\54\2\55"+
    "\1\0\1\56\1\57\1\60\1\61\2\0\1\54\4\0"+
    "\1\57\1\60\1\61\2\0\1\61\6\0\2\62\2\63"+
    "\2\0\2\64\2\65\4\0\2\66\1\17\7\0\2\67"+
    "\2\0\2\70\1\54\11\0\1\54\27\0\2\71\130\0"+
    "\2\72\101\0\3\73\72\0\2\74\100\0\2\75\121\0"+
    "\3\76\122\0\2\77\24\0\1\100\11\0\1\100\123\0"+
    "\2\101\106\0\2\102\120\0\1\33\73\0\2\103\100\0"+
    "\2\104\2\0\2\105\74\0\2\106\140\0\2\107\44\0"+
    "\1\110\23\0\1\110\1\0\1\111\25\0\1\110\35\0"+
    "\2\112\140\0\2\113\111\0\3\114\72\0\2\115\22\0"+
    "\2\46\3\0\1\47\5\0\1\46\40\0\1\17\15\0"+
    "\1\46\11\0\1\46\7\0\1\116\11\0\1\116\147\0"+
    "\2\117\66\0\2\120\40\0\2\46\3\0\1\47\5\0"+
    "\1\46\40\0\1\17\5\0\2\121\6\0\1\46\11\0"+
    "\1\46\1\0\2\53\3\0\1\122\5\0\1\53\12\0"+
    "\2\123\42\0\1\53\11\0\1\53\1\0\2\54\2\55"+
    "\1\0\1\56\1\57\1\60\1\61\2\0\1\54\4\0"+
    "\1\57\1\60\1\61\2\0\1\61\6\0\2\62\2\63"+
    "\2\0\2\64\2\65\4\0\2\66\10\0\2\67\2\0"+
    "\2\70\1\54\11\0\1\54\1\0\2\55\3\0\1\124"+
    "\1\125\1\60\1\126\2\0\1\55\4\0\1\125\1\60"+
    "\1\126\2\0\1\126\6\0\2\62\4\0\2\64\2\65"+
    "\4\0\2\66\10\0\2\67\2\0\2\70\1\55\11\0"+
    "\1\55\7\0\1\127\11\0\1\127\137\0\2\130\101\0"+
    "\3\131\44\0\1\132\11\0\1\132\2\0\1\132\10\0"+
    "\2\133\115\0\3\134\34\0\2\135\3\0\1\136\2\0"+
    "\1\137\2\0\1\135\6\0\1\137\2\0\1\137\42\0"+
    "\3\135\11\0\1\135\7\0\1\140\11\0\1\140\123\0"+
    "\2\141\106\0\2\142\106\0\2\143\100\0\2\144\2\0"+
    "\2\145\42\0\2\46\3\0\1\47\5\0\1\46\14\0"+
    "\2\50\15\0\3\46\2\0\1\17\5\0\2\52\6\0"+
    "\1\46\11\0\1\46\7\0\1\146\11\0\1\146\13\0"+
    "\2\147\60\0\1\150\11\0\1\150\2\0\1\150\71\0"+
    "\1\151\11\0\1\151\34\0\2\152\4\0\2\153\62\0"+
    "\2\154\100\0\2\155\44\0\2\77\3\0\1\156\5\0"+
    "\1\77\12\0\2\157\42\0\1\77\11\0\1\77\35\0"+
    "\2\160\32\0\2\161\46\0\2\162\116\0\2\163\66\0"+
    "\2\164\17\0\3\165\74\0\2\166\116\0\2\167\76\0"+
    "\2\170\40\0\2\107\3\0\1\171\5\0\1\107\12\0"+
    "\2\172\42\0\1\107\11\0\1\107\1\0\2\110\3\0"+
    "\1\173\5\0\1\110\24\0\2\174\30\0\1\110\11\0"+
    "\1\110\45\0\2\175\40\0\2\113\3\0\1\176\5\0"+
    "\1\113\12\0\2\41\42\0\1\113\11\0\1\113\7\0"+
    "\1\177\11\0\1\177\160\0\3\200\17\0\1\201\11\0"+
    "\1\201\133\0\3\46\34\0\2\202\3\0\1\203\5\0"+
    "\1\202\12\0\2\71\14\0\2\204\1\0\3\205\2\0"+
    "\1\17\1\202\12\0\2\206\1\202\11\0\1\202\5\0"+
    "\1\46\21\0\2\46\6\0\2\46\12\0\2\46\40\0"+
    "\1\207\11\0\1\207\117\0\2\51\60\0\1\210\11\0"+
    "\1\210\137\0\2\211\70\0\2\212\55\0\1\213\11\0"+
    "\1\213\72\0\1\214\11\0\1\214\13\0\2\215\60\0"+
    "\1\216\11\0\1\216\2\0\1\216\135\0\1\217\41\0"+
    "\1\220\11\0\1\220\4\0\2\221\26\0\2\222\4\0"+
    "\2\223\56\0\2\224\44\0\2\135\3\0\1\136\2\0"+
    "\1\137\2\0\1\135\6\0\1\137\2\0\1\137\44\0"+
    "\1\135\11\0\1\135\7\0\1\225\11\0\1\225\75\0"+
    "\1\132\11\0\1\132\2\0\1\132\10\0\2\226\102\0"+
    "\2\227\32\0\2\230\46\0\2\231\116\0\2\215\66\0"+
    "\2\232\17\0\3\233\74\0\2\234\116\0\2\140\101\0"+
    "\3\235\103\0\3\236\2\237\76\0\2\240\76\0\2\241"+
    "\115\0\3\242\16\0\2\243\60\0\2\244\1\0\3\245"+
    "\3\0\1\246\77\0\3\247\42\0\1\250\11\0\1\250"+
    "\134\0\3\251\72\0\2\252\102\0\2\253\32\0\2\254"+
    "\1\255\62\0\3\256\2\257\76\0\2\260\46\0\1\261"+
    "\11\0\1\261\134\0\3\262\70\0\2\263\32\0\2\264"+
    "\14\0\2\265\3\0\1\266\5\0\1\265\30\0\2\267"+
    "\1\0\3\270\2\0\1\271\1\265\14\0\1\265\11\0"+
    "\1\265\7\0\1\272\11\0\1\272\73\0\1\273\11\0"+
    "\1\273\137\0\2\274\32\0\2\275\3\0\1\276\5\0"+
    "\1\275\30\0\2\277\1\0\3\300\2\0\1\301\1\275"+
    "\12\0\2\302\1\275\11\0\1\275\7\0\1\303\11\0"+
    "\1\303\103\0\1\304\75\0\1\305\11\0\1\305\75\0"+
    "\1\306\11\0\1\306\2\0\1\306\60\0\2\202\3\0"+
    "\1\203\5\0\1\202\12\0\2\71\24\0\1\17\13\0"+
    "\2\206\1\202\11\0\1\202\7\0\1\307\11\0\1\307"+
    "\65\0\2\202\3\0\1\203\5\0\1\202\12\0\2\71"+
    "\24\0\1\17\1\202\12\0\2\206\1\202\11\0\1\202"+
    "\41\0\2\310\53\0\1\311\11\0\1\311\73\0\1\312"+
    "\11\0\1\312\72\0\1\234\11\0\1\234\13\0\2\215"+
    "\61\0\1\220\11\0\1\220\34\0\2\222\4\0\2\223"+
    "\26\0\1\313\11\0\1\313\2\0\1\313\120\0\2\314"+
    "\5\0\3\315\103\0\3\316\2\317\32\0\2\320\3\0"+
    "\1\321\1\322\1\0\1\137\2\0\1\320\1\0\1\323"+
    "\2\0\1\322\1\0\1\137\2\0\1\137\10\0\2\63"+
    "\32\0\1\320\11\0\1\320\45\0\2\223\70\0\2\132"+
    "\10\0\2\324\11\0\1\217\66\0\2\325\115\0\3\316"+
    "\16\0\2\230\63\0\3\326\43\0\1\327\11\0\1\327"+
    "\114\0\2\221\123\0\3\144\72\0\2\144\46\0\2\320"+
    "\3\0\1\321\1\322\1\0\1\137\2\0\1\320\1\0"+
    "\1\323\2\0\1\322\1\0\1\137\2\0\1\137\6\0"+
    "\2\227\2\63\30\0\2\230\1\330\11\0\1\320\45\0"+
    "\2\65\46\0\1\331\11\0\1\331\134\0\3\315\72\0"+
    "\2\332\104\0\2\333\136\0\2\334\63\0\3\335\16\0"+
    "\2\336\76\0\2\337\60\0\2\340\104\0\2\341\123\0"+
    "\1\246\70\0\2\342\102\0\2\343\55\0\1\344\11\0"+
    "\1\344\124\0\2\345\104\0\2\346\113\0\3\347\72\0"+
    "\2\350\136\0\2\254\52\0\2\351\136\0\2\352\52\0"+
    "\2\353\102\0\2\354\26\0\2\355\2\0\2\356\52\0"+
    "\2\357\115\0\3\360\72\0\2\361\46\0\2\265\3\0"+
    "\1\266\5\0\1\265\40\0\1\271\15\0\1\265\11\0"+
    "\1\265\7\0\1\362\11\0\1\362\65\0\2\265\3\0"+
    "\1\266\5\0\1\265\40\0\1\271\1\265\14\0\1\265"+
    "\11\0\1\265\41\0\2\363\120\0\1\271\40\0\1\364"+
    "\11\0\1\364\73\0\1\365\11\0\1\365\141\0\1\366"+
    "\2\0\2\367\24\0\2\275\3\0\1\276\5\0\1\275"+
    "\40\0\1\301\13\0\2\302\1\275\11\0\1\275\7\0"+
    "\1\370\11\0\1\370\65\0\2\275\3\0\1\276\5\0"+
    "\1\275\40\0\1\301\1\275\12\0\2\302\1\275\11\0"+
    "\1\275\41\0\2\371\43\0\1\372\1\373\1\374\2\375"+
    "\1\372\1\376\1\377\1\u0100\1\u0101\1\0\1\372\1\374"+
    "\1\u0102\2\372\1\0\1\377\1\u0100\1\u0103\2\0\1\u0103"+
    "\6\0\2\u0104\2\u0105\2\0\2\u0106\2\u0107\1\0\1\372"+
    "\2\0\2\u0108\1\301\3\u0109\4\0\2\u010a\2\0\2\u010b"+
    "\1\374\1\372\2\0\2\372\2\0\2\372\1\374\27\0"+
    "\2\u010c\65\0\1\u010d\11\0\1\u010d\67\0\1\u010e\2\0"+
    "\2\u010e\1\0\1\u010e\12\0\2\u010e\1\0\1\u010e\1\0"+
    "\1\u010e\1\0\1\u010e\1\0\1\u010e\1\0\1\u010e\1\0"+
    "\1\u010e\1\0\1\u010e\1\0\1\u010e\3\0\1\u010e\1\0"+
    "\1\u010e\5\0\1\u010e\1\0\1\u010e\1\0\1\u010e\1\0"+
    "\1\u010e\1\0\1\u010e\3\0\1\u010e\3\0\1\u010e\15\0"+
    "\1\u010f\11\0\1\u010f\71\0\1\u0110\11\0\1\u0110\136\0"+
    "\2\u0111\42\0\1\u0112\11\0\1\u0112\2\0\1\u0112\70\0"+
    "\1\u0113\11\0\1\u0113\2\0\1\u0113\71\0\1\u0114\11\0"+
    "\1\u0114\162\0\2\u0115\42\0\2\131\104\0\2\u0116\136\0"+
    "\2\230\22\0\1\u0117\11\0\1\u0117\137\0\2\u0118\32\0"+
    "\2\u0119\3\0\1\u011a\1\322\1\0\1\137\2\0\1\u0119"+
    "\4\0\1\322\1\0\1\137\2\0\1\137\10\0\2\63"+
    "\32\0\1\u0119\11\0\1\u0119\37\0\2\u011b\130\0\2\216"+
    "\60\0\2\u011c\56\0\1\u011d\11\0\1\u011d\2\0\1\u011d"+
    "\60\0\2\320\3\0\1\321\1\322\1\0\1\137\2\0"+
    "\1\320\1\0\1\323\2\0\1\322\1\0\1\137\2\0"+
    "\1\137\10\0\2\63\30\0\2\230\1\320\11\0\1\320"+
    "\35\0\2\227\26\0\2\u011e\2\0\2\230\24\0\1\u011f"+
    "\11\0\1\u011f\2\0\1\u011f\70\0\1\u0120\11\0\1\u0120"+
    "\2\0\1\u0120\116\0\2\u0121\104\0\2\u0122\104\0\2\u0123"+
    "\56\0\1\u0124\11\0\1\u0124\2\0\1\u0124\120\0\2\u0125"+
    "\116\0\2\u0126\42\0\1\u0127\11\0\1\u0127\2\0\1\u0127"+
    "\70\0\1\u0128\11\0\1\u0128\2\0\1\u0128\127\0\3\u0129"+
    "\103\0\3\u012a\74\0\2\u012b\104\0\2\u012c\54\0\1\u012d"+
    "\11\0\1\u012d\2\0\1\u012d\116\0\2\u012e\100\0\2\u012f"+
    "\121\0\3\u0130\76\0\2\u0131\100\0\2\u0132\56\0\1\u0133"+
    "\11\0\1\u0133\2\0\1\u0133\120\0\2\u0134\104\0\2\u0135"+
    "\53\0\1\u0136\11\0\1\u0136\136\0\2\u0137\42\0\1\u0138"+
    "\11\0\1\u0138\2\0\1\u0138\70\0\1\u0139\11\0\1\u0139"+
    "\2\0\1\u0139\140\0\2\u013a\33\0\1\u013b\11\0\1\u013b"+
    "\136\0\2\u013c\32\0\1\u013d\1\374\2\u013e\1\0\1\u013f"+
    "\1\377\1\u0100\1\u0103\2\0\1\u013d\1\u0140\3\0\1\377"+
    "\1\u0100\1\u0103\2\0\1\u0103\6\0\2\u0104\2\u0105\2\0"+
    "\2\u0106\2\u0107\4\0\2\u0108\1\u0141\7\0\2\u010a\2\0"+
    "\2\u0142\1\u013d\11\0\1\u013d\1\0\2\u013d\2\u013e\1\0"+
    "\1\u013f\1\377\1\u0100\1\u0103\2\0\1\u013d\1\u0140\3\0"+
    "\1\377\1\u0100\1\u0103\2\0\1\u0103\6\0\2\u0104\2\u0105"+
    "\2\0\2\u0106\2\u0107\4\0\2\u0108\1\u0141\7\0\2\u010a"+
    "\2\0\2\u0142\1\u013d\11\0\1\u013d\1\0\2\u013e\2\u0140"+
    "\1\0\1\u0143\1\u0144\1\u0100\1\u0145\2\0\1\u013e\1\u0140"+
    "\3\0\1\u0144\1\u0100\1\u0145\2\0\1\u0145\6\0\2\u0104"+
    "\4\0\2\u0106\2\u0107\4\0\2\u0108\1\u0146\7\0\2\u010a"+
    "\2\0\2\u0142\1\u013e\11\0\1\u013e\7\0\1\u0147\11\0"+
    "\1\u0147\137\0\2\u0148\101\0\3\u0149\44\0\1\u014a\11\0"+
    "\1\u014a\2\0\1\u014a\10\0\2\u014b\46\0\4\u0140\1\0"+
    "\1\u014c\5\0\2\u0140\37\0\1\u0141\13\0\2\302\1\u0140"+
    "\11\0\1\u0140\50\0\3\u014d\34\0\2\u014e\3\0\1\u014f"+
    "\2\0\1\u0150\2\0\1\u014e\6\0\1\u0150\2\0\1\u0150"+
    "\26\0\1\u0151\13\0\2\u0152\1\u014e\11\0\1\u014e\7\0"+
    "\1\u0153\11\0\1\u0153\123\0\2\u0154\106\0\2\u0155\120\0"+
    "\1\u0156\73\0\2\u0157\100\0\2\u0158\2\0\2\u0159\42\0"+
    "\2\u015a\3\0\1\u015b\5\0\1\u015a\14\0\2\u015c\15\0"+
    "\3\u015a\2\0\1\u015d\5\0\2\u015e\6\0\1\u015a\11\0"+
    "\1\u015a\11\0\1\u015f\11\0\1\u015f\2\0\1\u015f\63\0"+
    "\1\u010e\2\0\2\u010e\1\0\1\u010e\4\0\1\u0160\5\0"+
    "\2\u010e\1\0\1\u010e\1\0\1\u010e\1\0\1\u010e\1\0"+
    "\1\u010e\1\0\1\u010e\1\0\1\u010e\1\0\1\u010e\1\0"+
    "\1\u010e\3\0\1\u010e\1\0\1\u010e\5\0\1\u010e\1\0"+
    "\1\u010e\1\0\1\u010e\1\0\1\u010e\1\0\1\u010e\3\0"+
    "\1\u010e\3\0\1\u010e\16\0\1\46\103\0\1\u0161\11\0"+
    "\1\u0161\2\0\1\u0161\142\0\2\u0162\33\0\1\u0163\11\0"+
    "\1\u0163\73\0\1\u0164\11\0\1\u0164\74\0\1\54\100\0"+
    "\1\u0165\30\0\2\u0166\6\0\1\135\47\0\1\u0167\11\0"+
    "\1\u0167\2\0\1\u0167\67\0\1\u0168\11\0\1\u0168\72\0"+
    "\1\u0169\11\0\1\u0169\73\0\1\u016a\11\0\1\u016a\73\0"+
    "\1\u016b\11\0\1\u016b\75\0\1\u016c\11\0\1\u016c\2\0"+
    "\1\u016c\71\0\1\u016d\11\0\1\u016d\124\0\2\u016e\132\0"+
    "\2\334\1\237\53\0\2\u016f\54\0\1\u0170\11\0\1\u0170"+
    "\2\0\1\u0170\120\0\2\u0171\134\0\2\243\1\u0172\62\0"+
    "\3\u0173\116\0\2\u0174\31\0\1\u0175\1\u0176\10\0\1\u0175"+
    "\1\u0176\2\0\1\u0176\16\0\2\u0177\16\0\2\u0178\4\0"+
    "\1\u0179\24\0\1\u017a\11\0\1\u017a\120\0\2\u017b\104\0"+
    "\2\u017c\115\0\3\u017d\103\0\3\u017e\124\0\2\352\1\257"+
    "\53\0\2\u017f\100\0\2\u0180\32\0\2\u0181\1\u0182\53\0"+
    "\2\u0183\113\0\3\u0184\74\0\2\u0185\113\0\3\u0186\103\0"+
    "\3\u0187\44\0\1\u0188\11\0\1\u0188\2\0\1\u0188\142\0"+
    "\2\u0189\33\0\1\u018a\11\0\1\u018a\73\0\1\u018b\11\0"+
    "\1\u018b\110\0\2\366\66\0\1\u018c\11\0\1\u018c\2\0"+
    "\1\u018c\142\0\2\u018d\22\0\2\u013e\2\u0140\1\0\1\u0143"+
    "\1\u0144\1\u0100\1\u0145\2\0\1\u013e\1\u0140\3\0\1\u0144"+
    "\1\u0100\1\u0145\2\0\1\u0145\6\0\2\u0104\4\0\2\u0106"+
    "\2\u0107\4\0\2\u0108\1\u0141\7\0\2\u010a\2\0\2\u0142"+
    "\1\u013e\11\0\1\u013e\1\372\1\u018e\1\u018f\2\u0190\1\372"+
    "\1\u0191\1\377\1\u0100\1\u0101\1\0\1\372\1\u018f\1\u0192"+
    "\2\372\1\0\1\377\1\u0100\1\u0103\2\0\1\u0103\1\u0193"+
    "\5\0\2\u0104\2\u0105\2\0\2\u0106\2\u0107\1\0\1\372"+
    "\2\0\1\u0194\1\u0108\1\u0141\3\372\4\0\2\u010a\2\0"+
    "\2\u010b\1\u018f\1\372\2\0\2\372\2\0\1\u0195\1\372"+
    "\1\u018f\27\0\2\u010c\6\0\2\u0158\2\0\2\u0159\50\0"+
    "\1\u0196\11\0\1\u0196\137\0\2\u0197\70\0\2\u0198\45\0"+
    "\1\u0199\1\u019a\1\u019b\2\u019c\1\u0199\1\u019d\1\377\1\u0100"+
    "\1\u019e\1\0\1\u0199\1\u019b\1\u019f\2\u0199\1\0\1\377"+
    "\1\u0100\1\u0103\2\0\1\u0103\1\u0193\5\0\2\u0104\2\u0105"+
    "\2\0\2\u0106\2\u0107\1\0\1\u0199\2\0\1\u0194\1\u0108"+
    "\1\u0146\3\u0199\4\0\2\u010a\2\0\2\u010b\1\u019b\1\u0199"+
    "\2\0\2\u0199\2\0\1\u01a0\1\u0199\1\u019b\10\0\1\u01a1"+
    "\11\0\1\u01a1\72\0\1\u01a2\11\0\1\u01a2\13\0\2\u01a3"+
    "\60\0\1\u01a4\11\0\1\u01a4\2\0\1\u01a4\57\0\1\372"+
    "\1\u01a5\5\372\2\0\1\372\1\0\5\372\30\0\1\372"+
    "\5\0\1\u01a6\2\372\12\0\2\372\2\0\2\372\2\0"+
    "\3\372\12\0\1\u01a7\11\0\1\u01a7\4\0\2\u01a8\26\0"+
    "\2\u01a9\4\0\2\u01aa\24\0\1\u01ab\11\0\1\u01ab\125\0"+
    "\2\u01ac\44\0\2\u014e\3\0\1\u014f\2\0\1\u0150\2\0"+
    "\1\u014e\6\0\1\u0150\2\0\1\u0150\26\0\1\u0151\13\0"+
    "\2\u01ad\1\u014e\11\0\1\u014e\7\0\1\u01ae\11\0\1\u01ae"+
    "\75\0\1\u014a\11\0\1\u014a\2\0\1\u014a\10\0\2\u01af"+
    "\45\0\1\372\1\u01b0\1\u01b1\2\u01b2\1\372\1\u01b3\1\u01b4"+
    "\1\u01b5\1\u01b6\1\0\1\372\1\u01b1\3\372\1\0\1\u01b4"+
    "\1\u01b5\1\u01b7\2\0\1\u01b7\6\0\2\u01b8\2\u01b9\2\0"+
    "\2\u01ba\2\u01bb\1\0\1\372\2\0\2\u01bc\1\u0151\3\372"+
    "\4\0\2\u01bd\2\0\2\u01be\1\u01b1\1\372\2\0\2\372"+
    "\2\0\2\372\1\u01b1\1\0\2\u014e\3\0\1\u014f\2\0"+
    "\1\u0150\2\0\1\u014e\6\0\1\u0150\2\0\1\u0150\2\u01bf"+
    "\24\0\1\u0151\13\0\2\u01ad\1\u014e\11\0\1\u014e\35\0"+
    "\2\u01c0\32\0\2\u01c1\46\0\2\u01c2\116\0\2\u01a3\37\0"+
    "\1\u0199\1\u01c3\5\u0199\2\0\1\u0199\1\0\5\u0199\30\0"+
    "\1\u0199\4\0\1\u0156\3\u0199\12\0\2\u0199\2\0\2\u0199"+
    "\2\0\3\u0199\27\0\2\u01c4\17\0\3\u01c5\74\0\2\u01c6"+
    "\116\0\2\u0153\32\0\2\u015a\3\0\1\u015b\5\0\1\u015a"+
    "\40\0\1\u015d\15\0\1\u015a\11\0\1\u015a\7\0\1\u01c7"+
    "\11\0\1\u01c7\147\0\2\u01c8\22\0\2\u01c9\2\u01ca\1\0"+
    "\1\u01cb\1\u01cc\1\u01cd\1\u01ce\2\0\1\u01c9\4\0\1\u01cc"+
    "\1\u01cd\1\u01ce\2\0\1\u01ce\2\u01cf\4\0\2\u01d0\4\0"+
    "\2\u01d1\2\u01d2\4\0\2\u01d3\1\u015d\7\0\2\u01d4\2\0"+
    "\2\u01d5\1\u01c9\11\0\1\u01c9\1\0\2\u015a\3\0\1\u015b"+
    "\5\0\1\u015a\40\0\1\u015d\5\0\2\u01d6\6\0\1\u015a"+
    "\11\0\1\u015a\12\0\1\u01d7\11\0\1\u01d7\64\0\2\u0160"+
    "\2\0\2\u0160\1\0\1\u0160\4\0\1\u01d8\5\0\2\u0160"+
    "\1\0\1\u0160\1\0\1\u0160\1\0\1\u0160\1\0\1\u0160"+
    "\1\0\1\u0160\1\0\1\u0160\1\0\1\u0160\1\0\1\u0160"+
    "\3\0\1\u0160\1\0\2\u0160\4\0\1\u0160\1\0\1\u0160"+
    "\1\0\1\u0160\1\0\1\u0160\1\0\1\u0160\3\0\1\u0160"+
    "\3\0\1\u0160\15\0\1\u01d9\11\0\1\u01d9\132\0\1\202"+
    "\1\0\1\202\45\0\1\53\105\0\1\55\131\0\2\u01da"+
    "\46\0\2\135\2\0\1\135\1\136\2\0\1\137\2\0"+
    "\1\135\6\0\1\137\2\0\1\137\44\0\1\135\11\0"+
    "\1\135\1\0\2\320\3\0\1\321\1\322\1\0\1\137"+
    "\2\0\1\320\1\0\1\323\2\0\1\322\1\0\1\137"+
    "\2\0\1\137\10\0\2\63\30\0\2\230\1\330\11\0"+
    "\1\320\11\0\1\u01db\11\0\1\u01db\2\0\1\u01db\120\0"+
    "\2\314\53\0\1\u01dc\11\0\1\u01dc\130\0\2\u01dd\40\0"+
    "\2\320\3\0\1\321\1\322\1\60\1\u01de\2\0\1\320"+
    "\1\0\1\323\2\0\1\322\1\60\1\u01de\2\0\1\u01de"+
    "\10\0\2\63\4\0\2\u01df\16\0\2\u01e0\4\0\1\u01e1"+
    "\11\0\1\320\13\0\1\135\142\0\3\316\103\0\3\u01e2"+
    "\124\0\2\336\1\u01e3\62\0\3\u01e4\124\0\2\243\52\0"+
    "\2\u01e5\116\0\1\246\1\0\1\246\102\0\3\u01e6\72\0"+
    "\2\u01e7\104\0\2\u01e8\110\0\2\u01e9\51\0\1\u0175\1\u0176"+
    "\10\0\1\u0175\1\u0176\2\0\1\u0176\16\0\2\u0177\16\0"+
    "\2\u0178\32\0\1\77\103\0\1\u01ea\11\0\1\u01ea\2\0"+
    "\1\u01ea\70\0\1\u01eb\11\0\1\u01eb\2\0\1\u01eb\116\0"+
    "\2\u01ec\104\0\2\u01ed\115\0\3\u01ee\103\0\3\u01ef\72\0"+
    "\2\u01f0\136\0\2\u0181\63\0\3\u01f1\72\0\2\u01f2\115\0"+
    "\3\u01f3\72\0\2\u01e6\104\0\2\u01f4\57\0\1\u01f5\11\0"+
    "\1\u01f5\132\0\1\265\1\0\1\265\45\0\1\107\105\0"+
    "\1\110\104\0\1\u01f6\11\0\1\u01f6\132\0\1\275\1\0"+
    "\1\275\33\0\1\u01f7\1\u018f\2\u01f8\1\0\1\u01f9\1\377"+
    "\1\u0100\1\u0103\2\0\1\u01f7\1\u01fa\3\0\1\377\1\u0100"+
    "\1\u0103\2\0\1\u0103\6\0\2\u0104\2\u0105\2\0\2\u0106"+
    "\2\u0107\4\0\2\u0108\1\u01fb\7\0\2\u010a\2\0\2\u0142"+
    "\1\u01f7\11\0\1\u01f7\1\0\2\u01f7\2\u01f8\1\0\1\u01f9"+
    "\1\377\1\u0100\1\u0103\2\0\1\u01f7\1\u01fa\3\0\1\377"+
    "\1\u0100\1\u0103\2\0\1\u0103\6\0\2\u0104\2\u0105\2\0"+
    "\2\u0106\2\u0107\4\0\2\u0108\1\u01fb\7\0\2\u010a\2\0"+
    "\2\u0142\1\u01f7\11\0\1\u01f7\1\0\2\u01f8\2\u01fa\1\0"+
    "\1\u01fc\1\u0144\1\u0100\1\u0145\2\0\1\u01f8\1\u01fa\3\0"+
    "\1\u0144\1\u0100\1\u0145\2\0\1\u0145\6\0\2\u0104\4\0"+
    "\2\u0106\2\u0107\4\0\2\u0108\1\u01fb\7\0\2\u010a\2\0"+
    "\2\u0142\1\u01f8\11\0\1\u01f8\7\0\1\u01fd\11\0\1\u01fd"+
    "\65\0\4\u01fa\1\0\1\u01fe\5\0\2\u01fa\37\0\1\u01fb"+
    "\13\0\2\302\1\u01fa\11\0\1\u01fa\1\0\2\u0193\3\0"+
    "\1\u01ff\5\0\1\u0193\24\0\2\u0200\30\0\1\u0193\11\0"+
    "\1\u0193\1\0\2\u0193\3\0\1\u01ff\5\0\1\u0193\24\0"+
    "\2\u0201\30\0\1\u0193\11\0\1\u0193\10\0\1\u0202\11\0"+
    "\1\u0202\72\0\1\u01c6\11\0\1\u01c6\13\0\2\u01a3\61\0"+
    "\1\u01a7\11\0\1\u01a7\34\0\2\u01a9\4\0\2\u01aa\16\0"+
    "\1\u01f7\1\u019b\2\u01f8\1\0\1\u01f9\1\377\1\u0100\1\u0103"+
    "\2\0\1\u01f7\1\u01fa\3\0\1\377\1\u0100\1\u0103\2\0"+
    "\1\u0103\6\0\2\u0104\2\u0105\2\0\2\u0106\2\u0107\4\0"+
    "\2\u0108\1\u01fb\7\0\2\u010a\2\0\2\u0142\1\u01f7\11\0"+
    "\1\u01f7\11\0\1\u0203\11\0\1\u0203\2\0\1\u0203\120\0"+
    "\2\u0204\5\0\3\u0205\103\0\3\u0206\2\u0207\31\0\1\372"+
    "\1\u0208\1\u0209\2\u0192\1\372\1\u020a\1\u020b\1\0\1\u020c"+
    "\1\0\1\372\1\u0209\1\u0192\1\u020d\1\372\1\0\1\u020b"+
    "\1\0\1\u0150\2\0\1\u0150\10\0\2\u0105\7\0\1\372"+
    "\5\0\3\372\12\0\1\u0209\1\372\2\0\2\372\2\0"+
    "\2\372\1\u0209\2\0\1\372\103\0\1\372\1\u01a5\5\372"+
    "\2\0\1\372\1\0\5\372\30\0\1\372\5\0\3\372"+
    "\12\0\2\372\2\0\2\372\2\0\3\372\45\0\2\u01aa"+
    "\37\0\1\372\1\u01a5\5\372\2\0\1\372\1\0\5\372"+
    "\11\0\2\u014a\10\0\2\u020e\3\0\1\372\5\0\1\u01a6"+
    "\2\372\12\0\2\372\2\0\2\372\2\0\3\372\37\0"+
    "\2\u020f\115\0\3\u0206\16\0\2\u01c1\23\0\1\u0210\11\0"+
    "\1\u0210\133\0\3\u0211\62\0\2\u01bf\65\0\1\u0212\11\0"+
    "\1\u0212\114\0\2\u01a8\54\0\1\u0213\1\u01b1\2\u0214\1\0"+
    "\1\u0215\1\u01b4\1\u01b5\1\u01b7\2\0\1\u0213\4\0\1\u01b4"+
    "\1\u01b5\1\u01b7\2\0\1\u01b7\6\0\2\u01b8\2\u01b9\2\0"+
    "\2\u01ba\2\u01bb\4\0\2\u01bc\10\0\2\u01bd\2\0\2\u01be"+
    "\1\u0213\11\0\1\u0213\1\0\2\u0213\2\u0214\1\0\1\u0215"+
    "\1\u01b4\1\u01b5\1\u01b7\2\0\1\u0213\4\0\1\u01b4\1\u01b5"+
    "\1\u01b7\2\0\1\u01b7\6\0\2\u01b8\2\u01b9\2\0\2\u01ba"+
    "\2\u01bb\4\0\2\u01bc\10\0\2\u01bd\2\0\2\u01be\1\u0213"+
    "\11\0\1\u0213\1\0\2\u0214\3\0\1\u0216\1\u0217\1\u01b5"+
    "\1\u0218\2\0\1\u0214\4\0\1\u0217\1\u01b5\1\u0218\2\0"+
    "\1\u0218\6\0\2\u01b8\4\0\2\u01ba\2\u01bb\4\0\2\u01bc"+
    "\10\0\2\u01bd\2\0\2\u01be\1\u0214\11\0\1\u0214\7\0"+
    "\1\u0219\11\0\1\u0219\137\0\2\u021a\101\0\3\u021b\44\0"+
    "\1\u014a\11\0\1\u014a\2\0\1\u014a\10\0\2\u021c\115\0"+
    "\3\u021d\34\0\2\u021e\3\0\1\u021f\2\0\1\u0150\2\0"+
    "\1\u021e\6\0\1\u0150\2\0\1\u0150\42\0\3\u021e\11\0"+
    "\1\u021e\7\0\1\u0220\11\0\1\u0220\123\0\2\u0221\106\0"+
    "\2\u0222\106\0\2\u0223\100\0\2\u0224\2\0\2\u0225\42\0"+
    "\2\u0226\3\0\1\u0227\5\0\1\u0226\14\0\2\u0228\15\0"+
    "\3\u0226\2\0\1\u0229\5\0\2\u022a\6\0\1\u0226\11\0"+
    "\1\u0226\50\0\3\u0158\72\0\2\u0158\45\0\1\372\1\u0208"+
    "\1\u0209\2\u0192\1\372\1\u020a\1\u020b\1\0\1\u020c\1\0"+
    "\1\372\1\u0209\1\u0192\1\u020d\1\372\1\0\1\u020b\1\0"+
    "\1\u0150\2\0\1\u0150\6\0\2\u01c0\2\u0105\7\0\1\372"+
    "\5\0\3\372\10\0\2\u01c1\1\u022b\1\372\2\0\2\372"+
    "\2\0\2\372\1\u0209\2\0\1\u0199\150\0\2\u0107\46\0"+
    "\1\u022c\11\0\1\u022c\134\0\3\u0205\43\0\1\u022d\11\0"+
    "\1\u022d\133\0\3\u015a\34\0\2\u01c9\2\u01ca\1\0\1\u01cb"+
    "\1\u01cc\1\u01cd\1\u01ce\2\0\1\u01c9\4\0\1\u01cc\1\u01cd"+
    "\1\u01ce\2\0\1\u01ce\2\u01cf\4\0\2\u01d0\4\0\2\u01d1"+
    "\2\u01d2\4\0\2\u01d3\10\0\2\u01d4\2\0\2\u01d5\1\u01c9"+
    "\11\0\1\u01c9\1\0\2\u01ca\3\0\1\u022e\1\u01cc\1\u01cd"+
    "\1\u01ce\2\0\1\u01ca\4\0\1\u01cc\1\u01cd\1\u01ce\2\0"+
    "\1\u01ce\6\0\2\u01d0\4\0\2\u01d1\2\u01d2\4\0\2\u01d3"+
    "\10\0\2\u01d4\2\0\2\u01d5\1\u01ca\11\0\1\u01ca\7\0"+
    "\1\u022f\11\0\1\u022f\137\0\2\u0230\101\0\3\u0231\72\0"+
    "\2\u0232\46\0\2\u0233\3\0\1\u0234\5\0\1\u0233\14\0"+
    "\2\u0235\15\0\3\u0233\2\0\1\u01fb\5\0\2\u0236\6\0"+
    "\1\u0233\11\0\1\u0233\50\0\3\u0237\42\0\1\u0238\11\0"+
    "\1\u0238\123\0\2\u0239\106\0\2\u023a\106\0\2\u023b\100\0"+
    "\2\u023c\2\0\2\u023d\46\0\1\u015a\21\0\2\u015a\6\0"+
    "\2\u015a\12\0\2\u015a\44\0\1\113\147\0\1\u023e\43\0"+
    "\1\202\121\0\2\u023f\2\u0240\65\0\1\u0241\11\0\1\u0241"+
    "\72\0\1\u0242\11\0\1\u0242\2\0\1\u0242\57\0\1\217"+
    "\2\0\101\217\13\0\1\132\11\0\1\132\2\0\1\132"+
    "\10\0\2\u0243\104\0\2\u0244\110\0\2\u0245\42\0\2\320"+
    "\3\0\1\321\1\322\1\60\1\u01de\2\0\1\320\1\0"+
    "\1\323\2\0\1\322\1\60\1\u01de\2\0\1\u01de\10\0"+
    "\2\63\4\0\2\u01df\16\0\2\u01e0\4\0\1\320\11\0"+
    "\1\320\37\0\2\u0246\136\0\2\336\52\0\2\u0247\56\0"+
    "\1\u0248\11\0\1\u0248\2\0\1\u0248\70\0\1\u0249\11\0"+
    "\1\u0249\2\0\1\u0249\140\0\2\u024a\56\0\2\u024b\100\0"+
    "\2\u024c\17\0\3\u024d\44\0\1\u024b\11\0\1\u024b\2\0"+
    "\1\u024b\70\0\1\u024e\11\0\1\u024e\2\0\1\u024e\116\0"+
    "\2\u024f\106\0\2\u0250\104\0\2\u0251\102\0\2\u0252\56\0"+
    "\1\u0253\11\0\1\u0253\2\0\1\u0253\116\0\2\u0254\56\0"+
    "\1\u0255\11\0\1\u0255\2\0\1\u0255\72\0\1\265\105\0"+
    "\1\275\72\0\1\372\1\u018e\1\u018f\2\u0190\1\372\1\u0191"+
    "\1\377\1\u0100\1\u0101\1\0\1\372\1\u018f\1\u0192\2\372"+
    "\1\0\1\377\1\u0100\1\u0103\2\0\1\u0103\6\0\2\u0104"+
    "\2\u0105\2\0\2\u0106\2\u0107\1\0\1\372\2\0\2\u0108"+
    "\1\u01fb\3\372\4\0\2\u010a\2\0\2\u010b\1\u018f\1\372"+
    "\2\0\2\372\2\0\2\372\1\u018f\7\0\1\u0256\11\0"+
    "\1\u0256\74\0\1\u0257\11\0\1\u0257\72\0\1\u0258\11\0"+
    "\1\u0258\73\0\1\u0259\11\0\1\u0259\137\0\2\u025a\76\0"+
    "\2\u01a3\4\0\2\u025a\42\0\1\u025b\11\0\1\u025b\2\0"+
    "\1\u025b\71\0\1\u025c\11\0\1\u025c\162\0\2\u025d\42\0"+
    "\2\u0149\104\0\2\u025e\136\0\2\u01c1\14\0\1\u025f\1\u0209"+
    "\2\u01fa\1\0\1\u0260\1\u020b\1\0\1\u0150\2\0\1\u025f"+
    "\1\u01fa\1\u0261\2\0\1\u020b\1\0\1\u0150\2\0\1\u0150"+
    "\10\0\2\u0105\14\0\1\u01fb\13\0\2\302\1\u025f\11\0"+
    "\1\u025f\1\0\2\u025f\2\u01fa\1\0\1\u0260\1\u020b\1\0"+
    "\1\u0150\2\0\1\u025f\1\u01fa\1\u0261\2\0\1\u020b\1\0"+
    "\1\u0150\2\0\1\u0150\10\0\2\u0105\14\0\1\u01fb\13\0"+
    "\2\302\1\u025f\11\0\1\u025f\7\0\1\u0262\11\0\1\u0262"+
    "\137\0\2\u0263\31\0\1\372\1\u0264\1\u0265\2\u0192\1\372"+
    "\1\u0266\1\u020b\1\0\1\u020c\1\0\1\372\1\u0265\1\u0192"+
    "\2\372\1\0\1\u020b\1\0\1\u0150\2\0\1\u0150\10\0"+
    "\2\u0105\7\0\1\372\5\0\3\372\12\0\1\u0265\1\372"+
    "\2\0\2\372\2\0\2\372\1\u0265\37\0\2\u0267\130\0"+
    "\2\u01a4\32\0\1\u0268\11\0\1\u0268\2\0\1\u0268\116\0"+
    "\2\u0269\56\0\1\u026a\11\0\1\u026a\2\0\1\u026a\66\0"+
    "\1\u026b\11\0\1\u026b\137\0\2\u026c\70\0\2\u026d\55\0"+
    "\1\u026e\11\0\1\u026e\72\0\1\u026f\11\0\1\u026f\13\0"+
    "\2\u0270\60\0\1\u0271\11\0\1\u0271\2\0\1\u0271\71\0"+
    "\1\u0272\11\0\1\u0272\4\0\2\u01a8\26\0\2\u0273\4\0"+
    "\2\u0274\56\0\2\u0275\44\0\2\u021e\3\0\1\u021f\2\0"+
    "\1\u0150\2\0\1\u021e\6\0\1\u0150\2\0\1\u0150\44\0"+
    "\1\u021e\11\0\1\u021e\7\0\1\u0276\11\0\1\u0276\121\0"+
    "\2\u0277\32\0\2\u0278\46\0\2\u0279\116\0\2\u0270\66\0"+
    "\2\u027a\17\0\3\u027b\74\0\2\u027c\116\0\2\u0220\32\0"+
    "\2\u0226\3\0\1\u0227\5\0\1\u0226\40\0\1\u0229\15\0"+
    "\1\u0226\11\0\1\u0226\7\0\1\u027d\11\0\1\u027d\147\0"+
    "\2\u027e\22\0\2\u027f\2\u0280\1\0\1\u0281\1\u0282\1\u0283"+
    "\1\u0284\2\0\1\u027f\4\0\1\u0282\1\u0283\1\u0284\2\0"+
    "\1\u0284\2\u0285\4\0\2\u0286\4\0\2\u0287\2\u0288\4\0"+
    "\2\u0289\1\u0229\7\0\2\u028a\2\0\2\u028b\1\u027f\11\0"+
    "\1\u027f\1\0\2\u0226\3\0\1\u0227\5\0\1\u0226\40\0"+
    "\1\u0229\5\0\2\u028c\6\0\1\u0226\11\0\1\u0226\1\0"+
    "\2\u025f\2\u01fa\1\0\1\u0260\1\u020b\1\0\1\u0150\2\0"+
    "\1\u025f\1\u01fa\1\u0261\2\0\1\u020b\1\0\1\u0150\2\0"+
    "\1\u0150\10\0\2\u0105\14\0\1\u01fb\13\0\2\u028d\1\u025f"+
    "\11\0\1\u025f\35\0\2\u01c0\26\0\2\u028e\2\0\2\u01c1"+
    "\24\0\1\u028f\11\0\1\u028f\2\0\1\u028f\66\0\1\u0290"+
    "\11\0\1\u0290\74\0\1\u0291\11\0\1\u0291\72\0\1\u0292"+
    "\11\0\1\u0292\13\0\2\u0293\60\0\1\u0294\11\0\1\u0294"+
    "\2\0\1\u0294\71\0\1\u0295\11\0\1\u0295\34\0\2\u0296"+
    "\4\0\2\u0297\16\0\2\u0233\3\0\1\u0234\5\0\1\u0233"+
    "\40\0\1\u01fb\15\0\1\u0233\11\0\1\u0233\7\0\1\u0298"+
    "\11\0\1\u0298\147\0\2\u0299\22\0\2\u0233\3\0\1\u0234"+
    "\5\0\1\u0233\40\0\1\u01fb\5\0\2\u029a\6\0\1\u0233"+
    "\11\0\1\u0233\41\0\2\u029b\100\0\2\u029c\32\0\2\u029d"+
    "\46\0\2\u029e\116\0\2\u0293\66\0\2\u029f\17\0\3\u02a0"+
    "\74\0\2\u0292\116\0\2\u0238\106\0\1\u023e\22\0\1\u02a1"+
    "\46\0\2\u02a2\76\0\2\u02a3\64\0\1\320\104\0\1\u02a4"+
    "\11\0\1\u02a4\112\0\2\221\26\0\2\222\56\0\2\216"+
    "\100\0\2\u02a5\17\0\3\u02a6\44\0\1\u02a7\11\0\1\u02a7"+
    "\2\0\1\u02a7\70\0\1\u02a8\11\0\1\u02a8\2\0\1\u02a8"+
    "\116\0\2\u02a9\112\0\2\u02aa\46\0\1\u02ab\11\0\1\u02ab"+
    "\75\0\1\u02ac\11\0\1\u02ac\2\0\1\u02ac\127\0\3\u02ad"+
    "\103\0\3\u02ae\44\0\1\u02af\11\0\1\u02af\2\0\1\u02af"+
    "\150\0\2\356\1\u02b0\23\0\1\u02b1\11\0\1\u02b1\2\0"+
    "\1\u02b1\67\0\1\u02b2\11\0\1\u02b2\74\0\1\u02b3\11\0"+
    "\1\u02b3\2\0\1\u02b3\67\0\1\u02b4\11\0\1\u02b4\73\0"+
    "\1\u02b5\11\0\1\u02b5\141\0\1\u02b6\2\0\2\u02b7\35\0"+
    "\1\u02b8\11\0\1\u02b8\74\0\1\u013d\100\0\1\u02b9\30\0"+
    "\2\u02ba\6\0\1\u014e\47\0\1\u02bb\11\0\1\u02bb\2\0"+
    "\1\u02bb\67\0\1\u02bc\11\0\1\u02bc\72\0\1\u02bd\11\0"+
    "\1\u02bd\65\0\1\u02be\1\u0265\2\u01fa\1\0\1\u02bf\1\u020b"+
    "\1\0\1\u0150\2\0\1\u02be\1\u01fa\3\0\1\u020b\1\0"+
    "\1\u0150\2\0\1\u0150\10\0\2\u0105\14\0\1\u01fb\13\0"+
    "\2\302\1\u02be\11\0\1\u02be\1\0\2\u02be\2\u01fa\1\0"+
    "\1\u02bf\1\u020b\1\0\1\u0150\2\0\1\u02be\1\u01fa\3\0"+
    "\1\u020b\1\0\1\u0150\2\0\1\u0150\10\0\2\u0105\14\0"+
    "\1\u01fb\13\0\2\302\1\u02be\11\0\1\u02be\7\0\1\u02c0"+
    "\11\0\1\u02c0\73\0\1\u02c1\11\0\1\u02c1\76\0\1\u02c2"+
    "\11\0\1\u02c2\72\0\1\u02c3\11\0\1\u02c3\2\0\1\u02c3"+
    "\71\0\1\u02c4\11\0\1\u02c4\71\0\1\u02c5\11\0\1\u02c5"+
    "\72\0\1\u027c\11\0\1\u027c\13\0\2\u0270\61\0\1\u0272"+
    "\11\0\1\u0272\34\0\2\u0273\4\0\2\u0274\26\0\1\u02c6"+
    "\11\0\1\u02c6\2\0\1\u02c6\120\0\2\u02c7\5\0\3\u02c8"+
    "\103\0\3\u02c9\2\u02ca\31\0\1\372\1\u02cb\1\u02cc\3\372"+
    "\1\u02cd\1\u02ce\1\0\1\u020c\1\0\1\372\1\u02cc\1\372"+
    "\1\u02cf\1\372\1\0\1\u02ce\1\0\1\u0150\2\0\1\u0150"+
    "\10\0\2\u01b9\7\0\1\372\5\0\3\372\12\0\1\u02cc"+
    "\1\372\2\0\2\372\2\0\2\372\1\u02cc\45\0\2\u0274"+
    "\76\0\2\u02d0\115\0\3\u02c9\16\0\2\u0278\63\0\3\u02d1"+
    "\43\0\1\u02d2\11\0\1\u02d2\133\0\3\u0224\72\0\2\u0224"+
    "\45\0\1\372\1\u02cb\1\u02cc\3\372\1\u02cd\1\u02ce\1\0"+
    "\1\u020c\1\0\1\372\1\u02cc\1\372\1\u02cf\1\372\1\0"+
    "\1\u02ce\1\0\1\u0150\2\0\1\u0150\6\0\2\u0277\2\u01b9"+
    "\7\0\1\372\5\0\3\372\10\0\2\u0278\1\u02d3\1\372"+
    "\2\0\2\372\2\0\2\372\1\u02cc\45\0\2\u01bb\46\0"+
    "\1\u02d4\11\0\1\u02d4\134\0\3\u02c8\43\0\1\u02d5\11\0"+
    "\1\u02d5\133\0\3\u0226\34\0\2\u027f\2\u0280\1\0\1\u0281"+
    "\1\u0282\1\u0283\1\u0284\2\0\1\u027f\4\0\1\u0282\1\u0283"+
    "\1\u0284\2\0\1\u0284\2\u0285\4\0\2\u0286\4\0\2\u0287"+
    "\2\u0288\4\0\2\u0289\10\0\2\u028a\2\0\2\u028b\1\u027f"+
    "\11\0\1\u027f\1\0\2\u0280\3\0\1\u02d6\1\u0282\1\u0283"+
    "\1\u0284\2\0\1\u0280\4\0\1\u0282\1\u0283\1\u0284\2\0"+
    "\1\u0284\6\0\2\u0286\4\0\2\u0287\2\u0288\4\0\2\u0289"+
    "\10\0\2\u028a\2\0\2\u028b\1\u0280\11\0\1\u0280\7\0"+
    "\1\u02d7\11\0\1\u02d7\137\0\2\u02d8\101\0\3\u02d9\72\0"+
    "\2\u02da\46\0\2\u02db\3\0\1\u02dc\5\0\1\u02db\14\0"+
    "\2\u02dd\15\0\3\u02db\2\0\1\u0151\5\0\2\u02de\6\0"+
    "\1\u02db\11\0\1\u02db\50\0\3\u02df\42\0\1\u02e0\11\0"+
    "\1\u02e0\123\0\2\u02e1\106\0\2\u02e2\106\0\2\u02e3\100\0"+
    "\2\u02e4\2\0\2\u02e5\46\0\1\u0226\21\0\2\u0226\6\0"+
    "\2\u0226\12\0\2\u0226\60\0\2\u010c\6\0\2\u0158\110\0"+
    "\2\u02e6\53\0\1\u02e7\11\0\1\u02e7\71\0\1\u02e8\11\0"+
    "\1\u02e8\74\0\1\u02e9\11\0\1\u02e9\2\0\1\u02e9\127\0"+
    "\3\u02ea\103\0\3\u02eb\2\u02ec\32\0\2\u0294\3\0\1\u02ed"+
    "\5\0\1\u0294\1\0\1\u02ee\10\0\2\u01cf\42\0\1\u0294"+
    "\11\0\1\u0294\45\0\2\u0297\76\0\2\u02ef\115\0\3\u02eb"+
    "\16\0\2\u029d\23\0\1\u02f0\11\0\1\u02f0\133\0\3\u0233"+
    "\40\0\1\u0233\21\0\2\u0233\6\0\2\u0233\12\0\2\u0233"+
    "\101\0\3\u02f1\103\0\3\u023c\72\0\2\u023c\46\0\2\u0294"+
    "\3\0\1\u02ed\5\0\1\u0294\1\0\1\u02ee\10\0\2\u01cf"+
    "\4\0\2\u029c\32\0\2\u029d\1\u02f2\11\0\1\u0294\45\0"+
    "\2\u01d2\46\0\1\u02f3\11\0\1\u02f3\127\0\2\u02f4\70\0"+
    "\2\u02f5\70\0\1\u0119\137\0\2\u01df\46\0\1\u02f6\11\0"+
    "\1\u02f6\147\0\2\u01ea\60\0\2\u02f7\132\0\2\u02f8\56\0"+
    "\2\u02f9\104\0\2\u02fa\136\0\2\356\24\0\1\u02fb\11\0"+
    "\1\u02fb\2\0\1\u02fb\71\0\1\u02fc\11\0\1\u02fc\72\0"+
    "\1\u02fd\11\0\1\u02fd\2\0\1\u02fd\70\0\1\u02fe\11\0"+
    "\1\u02fe\2\0\1\u02fe\140\0\2\u02ff\36\0\1\u013e\131\0"+
    "\2\u0300\46\0\2\u014e\2\0\1\u014e\1\u014f\2\0\1\u0150"+
    "\2\0\1\u014e\6\0\1\u0150\2\0\1\u0150\26\0\1\u0151"+
    "\13\0\2\u01ad\1\u014e\11\0\1\u014e\1\372\1\u0208\1\u0209"+
    "\2\u0192\1\372\1\u020a\1\u020b\1\0\1\u020c\1\0\1\372"+
    "\1\u0209\1\u0192\1\u020d\1\372\1\0\1\u020b\1\0\1\u0150"+
    "\2\0\1\u0150\10\0\2\u0105\7\0\1\372\5\0\3\372"+
    "\10\0\2\u01c1\1\u022b\1\372\2\0\2\372\2\0\2\372"+
    "\1\u0209\11\0\1\u0301\11\0\1\u0301\2\0\1\u0301\120\0"+
    "\2\u0204\53\0\1\u0302\11\0\1\u0302\130\0\2\u0303\52\0"+
    "\1\u0140\72\0\1\372\1\u0208\1\u0209\2\u0192\1\372\1\u020a"+
    "\1\u020b\1\u0100\1\u0304\1\0\1\372\1\u0209\1\u0192\1\u020d"+
    "\1\372\1\0\1\u020b\1\u0100\1\u0305\2\0\1\u0305\10\0"+
    "\2\u0105\4\0\2\u0306\1\0\1\372\5\0\3\372\4\0"+
    "\2\u0307\4\0\1\u0308\1\372\2\0\2\372\2\0\2\372"+
    "\1\u0209\13\0\1\u014e\103\0\1\u0309\11\0\1\u0309\2\0"+
    "\1\u0309\71\0\1\u030a\11\0\1\u030a\162\0\2\u030b\42\0"+
    "\2\u021b\104\0\2\u030c\136\0\2\u0278\14\0\1\u030d\1\u02cc"+
    "\3\0\1\u030e\1\u02ce\1\0\1\u0150\2\0\1\u030d\1\0"+
    "\1\u030f\2\0\1\u02ce\1\0\1\u0150\2\0\1\u0150\10\0"+
    "\2\u01b9\32\0\1\u030d\11\0\1\u030d\1\0\2\u030d\3\0"+
    "\1\u030e\1\u02ce\1\0\1\u0150\2\0\1\u030d\1\0\1\u030f"+
    "\2\0\1\u02ce\1\0\1\u0150\2\0\1\u0150\10\0\2\u01b9"+
    "\32\0\1\u030d\11\0\1\u030d\7\0\1\u0310\11\0\1\u0310"+
    "\137\0\2\u0311\31\0\1\372\1\u0312\1\u0313\3\372\1\u0314"+
    "\1\u02ce\1\0\1\u020c\1\0\1\372\1\u0313\3\372\1\0"+
    "\1\u02ce\1\0\1\u0150\2\0\1\u0150\10\0\2\u01b9\7\0"+
    "\1\372\5\0\3\372\12\0\1\u0313\1\372\2\0\2\372"+
    "\2\0\2\372\1\u0313\63\0\2\u0271\60\0\2\u0315\56\0"+
    "\1\u0316\11\0\1\u0316\2\0\1\u0316\60\0\2\u030d\3\0"+
    "\1\u030e\1\u02ce\1\0\1\u0150\2\0\1\u030d\1\0\1\u030f"+
    "\2\0\1\u02ce\1\0\1\u0150\2\0\1\u0150\10\0\2\u01b9"+
    "\30\0\2\u0278\1\u030d\11\0\1\u030d\35\0\2\u0277\26\0"+
    "\2\u0317\2\0\2\u0278\24\0\1\u0318\11\0\1\u0318\2\0"+
    "\1\u0318\66\0\1\u0319\11\0\1\u0319\74\0\1\u031a\11\0"+
    "\1\u031a\72\0\1\u031b\11\0\1\u031b\13\0\2\u031c\60\0"+
    "\1\u031d\11\0\1\u031d\2\0\1\u031d\71\0\1\u031e\11\0"+
    "\1\u031e\34\0\2\u031f\4\0\2\u0320\16\0\2\u02db\3\0"+
    "\1\u02dc\5\0\1\u02db\40\0\1\u0151\15\0\1\u02db\11\0"+
    "\1\u02db\7\0\1\u0321\11\0\1\u0321\147\0\2\u0322\22\0"+
    "\2\u02db\3\0\1\u02dc\5\0\1\u02db\40\0\1\u0151\5\0"+
    "\2\u0323\6\0\1\u02db\11\0\1\u02db\41\0\2\u0324\100\0"+
    "\2\u0325\32\0\2\u0326\46\0\2\u0327\116\0\2\u031c\66\0"+
    "\2\u0328\17\0\3\u0329\74\0\2\u031b\116\0\2\u02e0\101\0"+
    "\3\u0206\46\0\1\u015a\103\0\1\u032a\11\0\1\u032a\2\0"+
    "\1\u032a\71\0\1\u032b\11\0\1\u032b\120\0\2\u0231\104\0"+
    "\2\u032c\136\0\2\u029d\22\0\1\u032d\11\0\1\u032d\65\0"+
    "\2\u02ee\3\0\1\u032e\5\0\1\u02ee\12\0\2\u01cf\42\0"+
    "\1\u02ee\11\0\1\u02ee\63\0\2\u0294\32\0\1\u032f\11\0"+
    "\1\u032f\2\0\1\u032f\116\0\2\u0330\46\0\2\u0294\3\0"+
    "\1\u02ed\5\0\1\u0294\1\0\1\u02ee\10\0\2\u01cf\40\0"+
    "\2\u029d\1\u0294\11\0\1\u0294\35\0\2\u029c\26\0\2\u0331"+
    "\2\0\2\u029d\60\0\2\u0332\74\0\2\u0332\134\0\2\u0333"+
    "\52\0\2\u0334\114\0\2\u0183\52\0\1\u0334\11\0\1\u0334"+
    "\2\0\1\u0334\70\0\1\u0335\11\0\1\u0335\2\0\1\u0335"+
    "\71\0\1\u0336\11\0\1\u0336\74\0\1\u01f7\104\0\1\u0337"+
    "\11\0\1\u0337\73\0\1\u0338\11\0\1\u0338\110\0\2\u02b6"+
    "\104\0\2\u0339\2\u033a\65\0\1\u033b\11\0\1\u033b\72\0"+
    "\1\u033c\11\0\1\u033c\2\0\1\u033c\57\0\1\u033d\2\0"+
    "\101\u033d\13\0\1\u014a\11\0\1\u014a\2\0\1\u014a\10\0"+
    "\2\u033e\104\0\2\u033f\110\0\2\u0340\42\0\2\u025f\2\u01fa"+
    "\1\0\1\u0260\1\u020b\1\u0100\1\u0305\2\0\1\u025f\1\u01fa"+
    "\1\u0261\2\0\1\u020b\1\u0100\1\u0305\2\0\1\u0305\10\0"+
    "\2\u0105\4\0\2\u0306\6\0\1\u01fb\7\0\2\u0307\2\0"+
    "\2\302\1\u025f\11\0\1\u025f\12\0\1\u0341\11\0\1\u0341"+
    "\74\0\1\u0213\100\0\1\u0342\30\0\2\u0343\6\0\1\u021e"+
    "\47\0\1\u0344\11\0\1\u0344\2\0\1\u0344\67\0\1\u0345"+
    "\11\0\1\u0345\72\0\1\u0346\11\0\1\u0346\65\0\1\u0347"+
    "\1\u0313\3\0\1\u0348\1\u02ce\1\0\1\u0150\2\0\1\u0347"+
    "\4\0\1\u02ce\1\0\1\u0150\2\0\1\u0150\10\0\2\u01b9"+
    "\32\0\1\u0347\11\0\1\u0347\1\0\2\u0347\3\0\1\u0348"+
    "\1\u02ce\1\0\1\u0150\2\0\1\u0347\4\0\1\u02ce\1\0"+
    "\1\u0150\2\0\1\u0150\10\0\2\u01b9\32\0\1\u0347\11\0"+
    "\1\u0347\7\0\1\u0349\11\0\1\u0349\75\0\1\u034a\11\0"+
    "\1\u034a\2\0\1\u034a\71\0\1\u034b\11\0\1\u034b\124\0"+
    "\2\u034c\53\0\1\u034d\11\0\1\u034d\71\0\1\u034e\11\0"+
    "\1\u034e\74\0\1\u034f\11\0\1\u034f\2\0\1\u034f\127\0"+
    "\3\u0350\103\0\3\u0351\2\u0352\32\0\2\u031d\3\0\1\u0353"+
    "\5\0\1\u031d\1\0\1\u0354\10\0\2\u0285\42\0\1\u031d"+
    "\11\0\1\u031d\45\0\2\u0320\76\0\2\u0355\115\0\3\u0351"+
    "\16\0\2\u0326\23\0\1\u0356\11\0\1\u0356\133\0\3\u02db"+
    "\40\0\1\u02db\21\0\2\u02db\6\0\2\u02db\12\0\2\u02db"+
    "\101\0\3\u0357\103\0\3\u02e4\72\0\2\u02e4\46\0\2\u031d"+
    "\3\0\1\u0353\5\0\1\u031d\1\0\1\u0354\10\0\2\u0285"+
    "\4\0\2\u0325\32\0\2\u0326\1\u0358\11\0\1\u031d\45\0"+
    "\2\u0288\46\0\1\u0359\11\0\1\u0359\76\0\1\u035a\11\0"+
    "\1\u035a\74\0\1\u01c9\103\0\1\u035b\11\0\1\u035b\2\0"+
    "\1\u035b\67\0\1\u035c\11\0\1\u035c\72\0\1\u035d\11\0"+
    "\1\u035d\76\0\1\u035e\11\0\1\u035e\72\0\1\u035f\11\0"+
    "\1\u035f\2\0\1\u035f\122\0\2\u0360\100\0\2\u016d\110\0"+
    "\2\234\54\0\1\u01f8\105\0\1\u01fa\105\0\1\u0193\133\0"+
    "\2\u0361\76\0\2\u0362\64\0\1\u025f\104\0\1\u0363\11\0"+
    "\1\u0363\112\0\2\u01a8\26\0\2\u01a9\56\0\2\u01a4\100\0"+
    "\2\u0364\17\0\3\u0365\46\0\1\u0214\131\0\2\u0366\46\0"+
    "\2\u021e\2\0\1\u021e\1\u021f\2\0\1\u0150\2\0\1\u021e"+
    "\6\0\1\u0150\2\0\1\u0150\44\0\1\u021e\11\0\1\u021e"+
    "\1\372\1\u02cb\1\u02cc\3\372\1\u02cd\1\u02ce\1\0\1\u020c"+
    "\1\0\1\372\1\u02cc\1\372\1\u02cf\1\372\1\0\1\u02ce"+
    "\1\0\1\u0150\2\0\1\u0150\10\0\2\u01b9\7\0\1\372"+
    "\5\0\3\372\10\0\2\u0278\1\u02d3\1\372\2\0\2\372"+
    "\2\0\2\372\1\u02cc\11\0\1\u0367\11\0\1\u0367\2\0"+
    "\1\u0367\120\0\2\u02c7\53\0\1\u0368\11\0\1\u0368\63\0"+
    "\1\372\1\u02cb\1\u02cc\3\372\1\u02cd\1\u02ce\1\u01b5\1\u0369"+
    "\1\0\1\372\1\u02cc\1\372\1\u02cf\1\372\1\0\1\u02ce"+
    "\1\u01b5\1\u036a\2\0\1\u036a\10\0\2\u01b9\4\0\2\u036b"+
    "\1\0\1\372\5\0\3\372\4\0\2\u036c\4\0\1\u036d"+
    "\1\372\2\0\2\372\2\0\2\372\1\u02cc\13\0\1\u021e"+
    "\142\0\3\u02c9\46\0\1\u0226\103\0\1\u036e\11\0\1\u036e"+
    "\2\0\1\u036e\71\0\1\u036f\11\0\1\u036f\120\0\2\u02d9"+
    "\104\0\2\u0370\136\0\2\u0326\22\0\1\u0371\11\0\1\u0371"+
    "\65\0\2\u0354\3\0\1\u0372\5\0\1\u0354\12\0\2\u0285"+
    "\42\0\1\u0354\11\0\1\u0354\63\0\2\u031d\32\0\1\u0373"+
    "\11\0\1\u0373\2\0\1\u0373\116\0\2\u0374\46\0\2\u031d"+
    "\3\0\1\u0353\5\0\1\u031d\1\0\1\u0354\10\0\2\u0285"+
    "\40\0\2\u0326\1\u031d\11\0\1\u031d\35\0\2\u0325\26\0"+
    "\2\u0375\2\0\2\u0326\26\0\1\u01ca\73\0\2\u0294\3\0"+
    "\1\u02ed\5\0\1\u0294\1\0\1\u02ee\10\0\2\u01cf\40\0"+
    "\2\u029d\1\u02f2\11\0\1\u0294\11\0\1\u0376\11\0\1\u0376"+
    "\2\0\1\u0376\67\0\1\u0377\11\0\1\u0377\76\0\1\u0233"+
    "\73\0\2\u0294\3\0\1\u02ed\1\0\1\u01cd\1\u0378\2\0"+
    "\1\u0294\1\0\1\u02ee\3\0\1\u01cd\1\u0378\2\0\1\u0378"+
    "\2\u01cf\14\0\2\u0379\16\0\2\u037a\4\0\1\u037b\11\0"+
    "\1\u0294\50\0\3\u02eb\76\0\2\u037c\70\0\2\u037d\70\0"+
    "\1\u02be\137\0\2\u0306\46\0\1\u037e\11\0\1\u037e\113\0"+
    "\2\u037f\2\u0380\65\0\1\u0381\11\0\1\u0381\72\0\1\u0382"+
    "\11\0\1\u0382\2\0\1\u0382\70\0\1\u014a\11\0\1\u014a"+
    "\2\0\1\u014a\10\0\2\u0383\104\0\2\u0384\110\0\2\u0385"+
    "\42\0\2\u030d\3\0\1\u030e\1\u02ce\1\u01b5\1\u036a\2\0"+
    "\1\u030d\1\0\1\u030f\2\0\1\u02ce\1\u01b5\1\u036a\2\0"+
    "\1\u036a\10\0\2\u01b9\4\0\2\u036b\16\0\2\u036c\4\0"+
    "\1\u030d\11\0\1\u030d\12\0\1\u0386\11\0\1\u0386\74\0"+
    "\1\u027f\103\0\1\u0387\11\0\1\u0387\2\0\1\u0387\67\0"+
    "\1\u0388\11\0\1\u0388\72\0\1\u0389\11\0\1\u0389\76\0"+
    "\1\u038a\11\0\1\u038a\72\0\1\u038b\11\0\1\u038b\2\0"+
    "\1\u038b\122\0\2\u038c\53\0\1\u038d\11\0\1\u038d\72\0"+
    "\1\u038e\11\0\1\u038e\2\0\1\u038e\116\0\2\u038f\104\0"+
    "\2\u0390\110\0\2\u0391\42\0\2\u0294\3\0\1\u02ed\1\0"+
    "\1\u01cd\1\u0378\2\0\1\u0294\1\0\1\u02ee\3\0\1\u01cd"+
    "\1\u0378\2\0\1\u0378\2\u01cf\14\0\2\u0379\16\0\2\u037a"+
    "\4\0\1\u0294\11\0\1\u0294\45\0\2\u0392\74\0\2\u0392"+
    "\134\0\2\u0393\60\0\2\u0394\76\0\2\u0395\64\0\1\u030d"+
    "\104\0\1\u0396\11\0\1\u0396\112\0\2\u01a8\26\0\2\u0273"+
    "\56\0\2\u0271\100\0\2\u0397\17\0\3\u0398\46\0\1\u0280"+
    "\73\0\2\u031d\3\0\1\u0353\5\0\1\u031d\1\0\1\u0354"+
    "\10\0\2\u0285\40\0\2\u0326\1\u0358\11\0\1\u031d\11\0"+
    "\1\u0399\11\0\1\u0399\2\0\1\u0399\67\0\1\u039a\11\0"+
    "\1\u039a\76\0\1\u02db\73\0\2\u031d\3\0\1\u0353\1\0"+
    "\1\u0283\1\u039b\2\0\1\u031d\1\0\1\u0354\3\0\1\u0283"+
    "\1\u039b\2\0\1\u039b\2\u0285\14\0\2\u039c\16\0\2\u039d"+
    "\4\0\1\u039e\11\0\1\u031d\50\0\3\u0351\46\0\1\u0294"+
    "\104\0\1\u039f\11\0\1\u039f\142\0\2\u0296\56\0\2\u0294"+
    "\100\0\2\u03a0\17\0\3\u03a1\72\0\2\u02c4\110\0\2\u01c6"+
    "\104\0\2\u03a2\70\0\2\u03a3\70\0\1\u0347\137\0\2\u036b"+
    "\46\0\1\u03a4\11\0\1\u03a4\76\0\1\u03a5\11\0\1\u03a5"+
    "\72\0\1\u03a6\11\0\1\u03a6\2\0\1\u03a6\116\0\2\u03a7"+
    "\104\0\2\u03a8\110\0\2\u03a9\42\0\2\u031d\3\0\1\u0353"+
    "\1\0\1\u0283\1\u039b\2\0\1\u031d\1\0\1\u0354\3\0"+
    "\1\u0283\1\u039b\2\0\1\u039b\2\u0285\14\0\2\u039c\16\0"+
    "\2\u039d\4\0\1\u031d\11\0\1\u031d\13\0\1\u02ee\137\0"+
    "\2\u0379\46\0\1\u03aa\11\0\1\u03aa\131\0\2\u03ab\74\0"+
    "\2\u03ab\134\0\2\u03ac\32\0\1\u031d\104\0\1\u03ad\11\0"+
    "\1\u03ad\142\0\2\u031f\56\0\2\u031d\100\0\2\u03ae\17\0"+
    "\3\u03af\120\0\2\u03b0\56\0\2\u034b\110\0\2\u027c\54\0"+
    "\1\u0354\137\0\2\u039c\46\0\1\u03b1\11\0\1\u03b1\127\0"+
    "\2\u0292\126\0\2\u03b2\62\0\2\u031b\41\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[61390];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\2\1\1\11\1\1\1\11\1\1\1\11\4\1"+
    "\1\11\17\1\71\0\1\1\15\0\1\11\3\0\1\1"+
    "\5\0\1\1\33\0\1\1\1\11\1\0\1\1\7\0"+
    "\1\1\12\0\1\1\1\0\1\11\22\0\1\1\13\0"+
    "\1\11\15\0\1\1\13\0\1\11\26\0\1\11\3\0"+
    "\1\11\4\1\2\0\2\1\6\0\1\1\25\0\1\11"+
    "\1\1\3\0\1\1\2\0\1\1\5\0\1\1\1\0"+
    "\1\1\3\0\1\11\63\0\1\1\4\0\1\1\3\0"+
    "\1\1\35\0\5\1\2\0\1\1\3\0\1\11\7\1"+
    "\4\0\2\1\11\0\4\1\2\0\1\1\14\0\1\1"+
    "\46\0\2\11\34\0\3\1\1\0\2\1\35\0\1\1"+
    "\34\0\2\11\1\0\1\11\2\0\1\11\4\0\1\1"+
    "\1\0\1\11\16\0\3\1\72\0\1\11\5\0\2\11"+
    "\3\0\1\11\2\0\1\11\1\0\1\11\4\0\1\11"+
    "\24\0\3\1\1\0\1\1\3\0\1\1\60\0\1\1"+
    "\3\0\1\1\11\0\3\1\37\0\2\11\63\0\1\1"+
    "\3\0\1\1\105\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[946];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	
	/* Custom java code */

    @Override
	public String language() { return "IT"; }

	@Override
	public String version() { return "0.3"; }


	/* An empty default constructor is required to comply with LinkolnService */
	
	public Articles() { }
	
	@Override
	public final boolean run() {
		
		try {
			
			yyreset(new StringReader(getInput()));
			yylex();
			
		} catch (IOException e) {

			e.printStackTrace();
			return false;
		}
		
		return true;
	}
	
	@Override
	protected void addValue() {
	
		//annotationEntity.setValue("value");
	}
	
	private int offsetValue = 0;
	private int lengthValue = 0;

	private boolean brackets = true;
	
	private int previousState = 0;
	
	private void readPartitionElement() {
	
		previousState = readPartitionElementState;
		
		addText(yytext().substring(0,1));
		position++;
	
		offset = 0;
		length = yylength()-1; //account for the left edge		
	
		yypushback(length);
		
		length = length-1; //account for the right edge
		
		yybegin(readPartitionElementState);	
	}
	
	private void readValue() {
	
		annotationEntity.setText(Util.removeAllAnnotations(yytext()));
		annotationEntity.setPosition(position);
		
		offset += yylength();
		position += yylength();
		
		offsetValue = 0;
		lengthValue = yylength();
		
		yypushback(lengthValue);
		yybegin(readValueState);	
	}
	
	private void readPattern1() {
	
		previousState = readPattern1State;
		
		addText(yytext().substring(0,1));
		position++;
	
		offset = 0;
		length = yylength()-1; //account for the left edge		
	
		yypushback(length);
		
		yybegin(readPattern1State);	
	}
	
	


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Articles(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 382) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { addText(yytext());
	position++;
            } 
            // fall through
          case 39: break;
          case 2: 
            { addText(yytext());
		position++;
            } 
            // fall through
          case 40: break;
          case 3: 
            { offset++;
		position++;
		
		if(offset >= length) {
			
			if(offset > length) {
				yypushback(1);
				position--;
			}
			
			yybegin(0);
		}
		
		addText(yytext());
            } 
            // fall through
          case 41: break;
          case 4: 
            { annotationEntity = new Article();
		
		readValue();
            } 
            // fall through
          case 42: break;
          case 5: 
            { offsetValue++;
		
		if(offsetValue >= lengthValue ) {
			
			if(offsetValue > lengthValue) {
			
				yypushback(1);
			}
			
			addEntity(annotationEntity);
			
			yybegin(previousState);
		}
            } 
            // fall through
          case 43: break;
          case 6: 
            { if(annotationEntity.getValue().equals("")) annotationEntity.setValue(yytext()); offsetValue += yylength();
            } 
            // fall through
          case 44: break;
          case 7: 
            { annotationEntity.setValue(annotationEntity.getValue() + "-BIS"); offsetValue += yylength();
            } 
            // fall through
          case 45: break;
          case 8: 
            { offsetValue += yylength();
            } 
            // fall through
          case 46: break;
          case 9: 
            { annotationEntity.setValue(annotationEntity.getValue() + "-TER"); offsetValue += yylength();
            } 
            // fall through
          case 47: break;
          case 10: 
            { addText(yytext());
		position--; //account for the following {LKN_C} character
		yybegin(YYINITIAL);
            } 
            // fall through
          case 48: break;
          case 11: 
            { annotationEntity.setValue(annotationEntity.getValue() + "-SEMEL"); offsetValue += yylength();
            } 
            // fall through
          case 49: break;
          case 12: 
            { annotationEntity = new Comma();
		
		readValue();
            } 
            // fall through
          case 50: break;
          case 13: 
            { //System.out.println("Read pattern 0");
	
	annotationEntity = new Article();
	readPartitionElement();
            } 
            // fall through
          case 51: break;
          case 14: 
            { annotationEntity.setValue(annotationEntity.getValue() + "-NOVIES"); offsetValue += yylength();
            } 
            // fall through
          case 52: break;
          case 15: 
            { annotationEntity.setValue(annotationEntity.getValue() + "-SEXIES"); offsetValue += yylength();
            } 
            // fall through
          case 53: break;
          case 16: 
            { annotationEntity.setValue(annotationEntity.getValue() + "-VICIES"); offsetValue += yylength();
            } 
            // fall through
          case 54: break;
          case 17: 
            { annotationEntity.setValue(annotationEntity.getValue() + "-OCTIES"); offsetValue += yylength();
            } 
            // fall through
          case 55: break;
          case 18: 
            { annotationEntity.setValue(annotationEntity.getValue() + "-QUATER"); offsetValue += yylength();
            } 
            // fall through
          case 56: break;
          case 19: 
            { annotationEntity.setValue(annotationEntity.getValue() + "-DECIES"); offsetValue += yylength();
            } 
            // fall through
          case 57: break;
          case 20: 
            { annotationEntity.setValue(annotationEntity.getValue() + "-SEPTIES"); offsetValue += yylength();
            } 
            // fall through
          case 58: break;
          case 21: 
            { annotate(new Article(), Util.readFirstNumber(yytext()), true, true);
            } 
            // fall through
          case 59: break;
          case 22: 
            { annotationEntity.setValue(annotationEntity.getValue() + "-UNVICIES"); offsetValue += yylength();
            } 
            // fall through
          case 60: break;
          case 23: 
            { annotationEntity.setValue(annotationEntity.getValue() + "-UNDECIES"); offsetValue += yylength();
            } 
            // fall through
          case 61: break;
          case 24: 
            { annotationEntity.setValue(annotationEntity.getValue() + "-SEXDECIES"); offsetValue += yylength();
            } 
            // fall through
          case 62: break;
          case 25: 
            { annotationEntity.setValue(annotationEntity.getValue() + "-DUOVICIES"); offsetValue += yylength();
            } 
            // fall through
          case 63: break;
          case 26: 
            { annotationEntity.setValue(annotationEntity.getValue() + "-TERVICIES"); offsetValue += yylength();
            } 
            // fall through
          case 64: break;
          case 27: 
            { annotationEntity.setValue(annotationEntity.getValue() + "-TERDECIES"); offsetValue += yylength();
            } 
            // fall through
          case 65: break;
          case 28: 
            { annotationEntity.setValue(annotationEntity.getValue() + "-QUINQUIES"); offsetValue += yylength();
            } 
            // fall through
          case 66: break;
          case 29: 
            { annotationEntity.setValue(annotationEntity.getValue() + "-DUODECIES"); offsetValue += yylength();
            } 
            // fall through
          case 67: break;
          case 30: 
            { addText(yytext()); 
	yybegin(lkn);
            } 
            // fall through
          case 68: break;
          case 31: 
            { annotationEntity.setValue(annotationEntity.getValue() + "-NOVODECIES"); offsetValue += yylength();
            } 
            // fall through
          case 69: break;
          case 32: 
            { annotationEntity.setValue(annotationEntity.getValue() + "-SEPTDECIES"); offsetValue += yylength();
            } 
            // fall through
          case 70: break;
          case 33: 
            { annotationEntity.setValue(annotationEntity.getValue() + "-OCTODECIES"); offsetValue += yylength();
            } 
            // fall through
          case 71: break;
          case 34: 
            { annotationEntity.setValue(annotationEntity.getValue() + "-QUINVICIES"); offsetValue += yylength();
            } 
            // fall through
          case 72: break;
          case 35: 
            { annotationEntity.setValue(annotationEntity.getValue() + "-QUINDECIES"); offsetValue += yylength();
            } 
            // fall through
          case 73: break;
          case 36: 
            { //System.out.println("Read pattern 1");
	
	annotationEntity = new Article();
	readPattern1();
            } 
            // fall through
          case 74: break;
          case 37: 
            { annotationEntity.setValue(annotationEntity.getValue() + "-QUATERVICIES"); offsetValue += yylength();
            } 
            // fall through
          case 75: break;
          case 38: 
            { annotationEntity.setValue(annotationEntity.getValue() + "-QUATERDECIES"); offsetValue += yylength();
            } 
            // fall through
          case 76: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Articles [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Articles scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Articles(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
