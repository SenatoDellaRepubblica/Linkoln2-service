/* The following code was generated by JFlex 1.7.0 */

/*******************************************************************************
 * Copyright (c) 2016-2021 Institute of Legal Information and Judicial Systems IGSG-CNR (formerly ITTIG-CNR)
 * 
 * This program and the accompanying materials  are made available under the terms of the GNU General Public
 * License as published by the Free Software Foundation; either version 3 of the License, or (at your option)
 * any later version. 
 * You may not use this work except in compliance with the Licence.
 * You may obtain a copy of the Licence at: https://www.gnu.org/licenses/gpl-3.0.txt
 * Unless required by applicable law or agreed to in writing, software distributed under the Licence is 
 * distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the Licence for the specific language governing permissions and limitations under the Licence.
 *  
 * Authors: Lorenzo Bacci (IGSG-CNR)
 ******************************************************************************/
 package it.cnr.igsg.linkoln.service.impl;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>jflex/Tokenizer.jflex</tt>
 */
public class Tokenizer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\0\1\2\1\0\1\0\1\1\22\0\1\0\5\0\1\5"+
    "\1\4\1\0\1\0\2\0\1\0\1\3\1\54\1\55\1\53\1\53"+
    "\1\53\1\53\1\53\1\53\1\53\1\53\1\53\1\53\1\13\1\12"+
    "\5\0\1\23\1\7\1\35\1\61\1\33\1\72\1\25\1\70\1\46"+
    "\1\7\1\64\1\57\1\7\1\6\1\51\1\11\1\7\1\27\1\20"+
    "\1\41\1\37\1\31\1\74\1\7\1\7\1\7\1\65\1\0\1\66"+
    "\1\0\1\3\1\4\1\22\1\14\1\34\1\60\1\32\1\71\1\24"+
    "\1\67\1\45\1\14\1\63\1\56\1\14\1\15\1\50\1\17\1\14"+
    "\1\26\1\16\1\40\1\36\1\30\1\73\1\14\1\14\1\14\12\0"+
    "\1\0\44\0\1\0\5\0\1\0\3\0\1\4\5\0\1\0\5\0"+
    "\1\21\1\21\4\14\1\0\1\14\1\42\1\42\2\14\1\43\1\43"+
    "\2\14\1\0\1\14\1\47\1\47\3\14\2\0\1\52\1\52\2\14"+
    "\3\0\1\21\1\21\4\14\1\0\1\14\1\42\1\42\2\14\1\43"+
    "\1\43\2\14\1\0\1\14\1\47\1\47\3\14\2\0\1\52\1\52"+
    "\2\14\53\0\1\14\1\14\6\0\2\44\66\0\1\14\1\14\4\0"+
    "\1\14\1\14\17\0\1\10\u1c88\0\1\14\1\14\216\0\2\14\42\0"+
    "\1\14\1\14\u0144\0\1\0\20\0\1\3\1\3\4\0\1\4\16\0"+
    "\1\0\1\0\u0100\0\1\62\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\3\1\1\2\3\1\1\3\1\4\2\1\1\5"+
    "\1\1\1\6\1\7\1\1\20\0\1\10\1\0\2\7"+
    "\1\0\1\7\13\0\1\10\35\0\1\11";

  private static int [] zzUnpackAction() {
    int [] result = new int[81];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\267\0\364\0\u0131\0\u016e"+
    "\0\267\0\267\0\u01ab\0\u01e8\0\267\0\u0225\0\267\0\75"+
    "\0\u0262\0\u029f\0\u02dc\0\u0319\0\u0356\0\u0393\0\u03d0\0\u040d"+
    "\0\u044a\0\u0487\0\u04c4\0\u0501\0\75\0\u053e\0\u057b\0\u05b8"+
    "\0\u05f5\0\267\0\u0632\0\267\0\u066f\0\u06ac\0\u06e9\0\u06e9"+
    "\0\u0726\0\u0763\0\u07a0\0\u07dd\0\u081a\0\u0857\0\u0894\0\u08d1"+
    "\0\u090e\0\u094b\0\u0988\0\u09c5\0\u0a02\0\u0a3f\0\u0a7c\0\u0ab9"+
    "\0\u0af6\0\u0b33\0\u0b70\0\u0bad\0\u0bea\0\u0c27\0\u0c64\0\u0ca1"+
    "\0\u0cde\0\u0d1b\0\u0d58\0\u0d95\0\u0dd2\0\u0e0f\0\u0e4c\0\u0e89"+
    "\0\u0ec6\0\u0f03\0\u0f40\0\u0f7d\0\u0fba\0\u0ff7\0\u1034\0\u1071"+
    "\0\267";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[81];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\4\2\2\4\1\2\1\4\2\2\5\4"+
    "\1\5\2\6\6\4\2\7\2\4\2\10\2\4\1\11"+
    "\1\12\1\13\2\14\1\15\2\16\1\17\1\4\1\20"+
    "\1\2\4\4\1\2\2\4\1\21\1\2\6\4\6\0"+
    "\1\22\1\0\1\23\1\24\3\0\1\22\1\23\1\24"+
    "\1\23\1\0\2\25\6\0\2\26\2\27\2\30\2\31"+
    "\2\0\3\32\7\0\2\33\2\34\7\0\2\31\4\0"+
    "\1\35\3\0\1\22\1\0\1\23\1\24\3\0\1\22"+
    "\1\23\1\24\1\23\1\0\2\25\6\0\2\26\2\27"+
    "\2\30\2\31\2\0\3\32\7\0\2\33\2\34\7\0"+
    "\2\31\103\0\1\5\74\0\1\11\74\0\1\17\74\0"+
    "\1\12\1\0\1\22\1\0\1\23\1\24\3\0\1\22"+
    "\1\23\1\24\1\23\1\0\2\25\6\0\2\26\2\27"+
    "\2\30\2\31\2\0\3\32\7\0\2\33\2\34\7\0"+
    "\2\31\6\0\1\12\74\0\1\15\76\0\1\22\1\0"+
    "\1\23\1\24\3\0\1\22\1\23\1\24\1\23\1\0"+
    "\2\25\6\0\2\26\2\27\2\30\2\31\2\0\3\32"+
    "\7\0\2\36\2\34\7\0\2\31\34\0\2\37\14\0"+
    "\2\40\45\0\2\41\12\0\2\25\14\0\1\42\52\0"+
    "\2\43\41\0\1\44\1\45\4\44\2\0\1\44\1\0"+
    "\2\44\10\0\2\46\16\0\1\47\2\50\5\0\2\44"+
    "\2\51\2\0\1\44\2\0\2\44\6\0\1\44\1\45"+
    "\4\44\2\0\1\44\1\0\2\44\30\0\1\44\7\0"+
    "\2\44\2\0\2\50\1\44\2\0\2\44\56\0\2\52"+
    "\31\0\1\33\6\0\1\33\105\0\2\53\53\0\1\50"+
    "\6\0\1\50\63\0\1\44\74\0\1\47\15\0\2\25"+
    "\6\0\2\37\10\0\3\50\32\0\1\44\55\0\3\54"+
    "\34\0\2\46\16\0\3\50\7\0\2\51\23\0\1\55"+
    "\6\0\1\55\65\0\1\56\6\0\1\56\105\0\2\50"+
    "\47\0\1\44\150\0\2\57\15\0\1\44\1\45\4\44"+
    "\2\0\1\44\1\0\2\44\30\0\1\44\7\0\2\44"+
    "\4\0\1\44\2\0\2\44\6\0\1\44\1\45\4\44"+
    "\2\0\1\44\1\0\2\44\30\0\1\44\7\0\2\44"+
    "\2\60\2\0\1\44\2\0\2\44\14\0\1\50\6\0"+
    "\1\50\40\0\2\50\37\0\2\50\57\0\1\61\6\0"+
    "\1\61\113\0\2\62\37\0\1\42\1\63\4\42\2\0"+
    "\1\42\1\0\2\42\24\0\2\64\2\0\1\42\7\0"+
    "\2\42\4\0\1\42\2\0\2\42\52\0\3\50\32\0"+
    "\1\47\15\0\2\50\6\0\2\50\14\0\2\50\36\0"+
    "\1\65\150\0\2\66\6\0\1\42\76\0\1\42\15\0"+
    "\1\67\7\0\1\67\12\0\1\67\2\0\1\67\34\0"+
    "\1\70\5\0\1\70\1\0\1\70\61\0\1\71\24\0"+
    "\2\72\6\0\1\50\32\0\1\42\1\63\4\42\2\0"+
    "\1\42\1\0\2\42\30\0\1\42\7\0\2\42\4\0"+
    "\1\42\2\0\2\42\46\0\2\73\65\0\2\74\41\0"+
    "\1\44\1\45\2\44\1\47\1\44\2\0\1\44\1\0"+
    "\2\44\30\0\1\44\7\0\2\44\4\0\1\44\2\0"+
    "\2\44\17\0\1\75\5\0\1\75\77\0\2\76\2\77"+
    "\142\0\2\100\34\0\2\101\65\0\2\102\60\0\1\103"+
    "\117\0\2\104\57\0\2\105\54\0\1\103\2\0\2\103"+
    "\1\0\1\103\1\0\1\106\4\0\1\103\2\0\1\103"+
    "\1\0\1\103\1\0\1\103\1\0\1\103\1\0\1\103"+
    "\1\0\1\103\1\0\1\103\1\0\1\103\4\0\1\103"+
    "\2\0\1\103\1\0\1\103\3\0\1\103\1\0\1\103"+
    "\2\0\1\103\3\0\1\103\1\0\1\103\1\0\1\103"+
    "\40\0\2\107\63\0\2\107\116\0\1\110\53\0\2\111"+
    "\114\0\1\110\12\0\1\112\20\0\1\50\62\0\65\113"+
    "\1\0\74\113\1\114\7\113\55\0\1\115\75\0\2\116"+
    "\77\0\3\117\16\0\1\120\6\0\1\120\145\0\1\121"+
    "\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4270];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\1\2\11\3\1\2\11\2\1\1\11\1\1"+
    "\1\11\2\1\20\0\1\11\1\0\1\11\1\1\1\0"+
    "\1\1\13\0\1\1\35\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[81];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	
	public Tokenizer() { }
	
	StringBuilder output = new StringBuilder();
	
	public String getOutput() {
	
		return output.toString();
	}
	


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Tokenizer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 382) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { output.append(yytext());
            } 
            // fall through
          case 10: break;
          case 2: 
            { output.append("a");
            } 
            // fall through
          case 11: break;
          case 3: 
            { output.append("e");
            } 
            // fall through
          case 12: break;
          case 4: 
            { output.append("i");
            } 
            // fall through
          case 13: break;
          case 5: 
            { output.append("o");
            } 
            // fall through
          case 14: break;
          case 6: 
            { output.append("u");
            } 
            // fall through
          case 15: break;
          case 7: 
            { output.append(" ");
            } 
            // fall through
          case 16: break;
          case 8: 
            { output.append(" san ");
            } 
            // fall through
          case 17: break;
          case 9: 
            { 
            } 
            // fall through
          case 18: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Tokenizer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Tokenizer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Tokenizer(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
