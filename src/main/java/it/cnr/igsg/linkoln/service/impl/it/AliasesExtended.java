/* The following code was generated by JFlex 1.7.0 */

/*******************************************************************************
 * Copyright (c) 2016-2021 Institute of Legal Information and Judicial Systems IGSG-CNR (formerly ITTIG-CNR)
 * 
 * This program and the accompanying materials  are made available under the terms of the GNU General Public
 * License as published by the Free Software Foundation; either version 3 of the License, or (at your option)
 * any later version. 
 * You may not use this work except in compliance with the Licence.
 * You may obtain a copy of the Licence at: https://www.gnu.org/licenses/gpl-3.0.txt
 * Unless required by applicable law or agreed to in writing, software distributed under the Licence is 
 * distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the Licence for the specific language governing permissions and limitations under the Licence.
 *  
 * Authors: Lorenzo Bacci (IGSG-CNR)
 ******************************************************************************/
 package it.cnr.igsg.linkoln.service.impl.it;

import java.io.IOException;
import java.io.StringReader;

import it.cnr.igsg.linkoln.entity.*;
import it.cnr.igsg.linkoln.service.*;

import it.cnr.igsg.linkoln.service.impl.Util;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>jflex/AliasesExtended.jflex</tt>
 */
public class AliasesExtended extends LinkolnAnnotationService {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int lkn = 2;
  public static final int inPattern = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\13\1\2\1\0\1\13\1\1\22\0\1\13\5\0\1\5"+
    "\1\0\1\14\1\14\2\0\1\14\1\3\1\50\1\51\1\47\1\47"+
    "\1\47\1\47\1\47\1\47\1\47\1\47\1\47\1\47\1\15\1\12"+
    "\5\0\1\25\1\7\1\36\1\55\1\34\1\63\1\27\1\32\1\44"+
    "\1\32\1\57\1\53\1\32\1\6\1\46\1\11\1\32\1\31\1\23"+
    "\1\42\1\40\1\32\1\65\1\32\1\32\1\22\1\60\1\0\1\61"+
    "\1\0\1\4\1\0\1\24\1\20\1\35\1\54\1\33\1\62\1\26"+
    "\1\0\1\43\1\0\1\56\1\52\1\0\1\17\1\45\1\21\1\0"+
    "\1\30\1\10\1\41\1\37\1\0\1\64\1\0\1\0\1\16\12\0"+
    "\1\0\44\0\1\0\5\0\1\0\3\0\1\0\5\0\1\0\5\0"+
    "\1\0\1\0\4\0\1\0\1\0\1\0\1\0\2\0\1\0\1\0"+
    "\2\0\1\0\1\0\1\0\1\0\3\0\2\0\1\0\1\0\2\0"+
    "\3\0\1\0\1\0\4\0\1\0\1\0\1\0\1\0\2\0\1\0"+
    "\1\0\2\0\1\0\1\0\1\0\1\0\3\0\2\0\1\0\1\0"+
    "\2\0\53\0\1\0\1\0\6\0\2\43\66\0\1\0\1\0\4\0"+
    "\1\0\1\0\17\0\1\10\u1c88\0\1\0\1\0\216\0\2\0\42\0"+
    "\1\0\1\0\u0144\0\1\13\20\0\1\3\1\3\4\0\1\0\16\0"+
    "\1\0\1\0\u0100\0\1\56\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\11\0\4\1\2\2\1\3\1\4\1\3\65\0\1\5"+
    "\1\0\1\5\15\0\1\6\1\0\1\6\1\0\1\7"+
    "\5\0\1\10\4\0\1\11\4\0\1\12\10\0\1\11"+
    "\25\0\1\13\26\0\1\13\2\0\1\14\112\0\2\15"+
    "\3\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[244];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\u0144\0\u017a"+
    "\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288\0\u0252\0\u02be\0\u0252"+
    "\0\u02f4\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e"+
    "\0\u04a4\0\u04da\0\u0510\0\u0546\0\u057c\0\u05b2\0\u05e8\0\u061e"+
    "\0\u0654\0\u068a\0\u06c0\0\u06f6\0\u072c\0\u0762\0\u0798\0\u01e6"+
    "\0\u07ce\0\u0804\0\u083a\0\u0360\0\u0870\0\u08a6\0\u08dc\0\u0912"+
    "\0\u0948\0\u097e\0\u09b4\0\u09ea\0\u0a20\0\u0a56\0\u0a8c\0\u0ac2"+
    "\0\u0af8\0\u0b2e\0\u0b64\0\u0b9a\0\u0bd0\0\u0c06\0\u0c3c\0\u0c72"+
    "\0\u0ca8\0\u0cde\0\u0d14\0\u0d4a\0\u0d80\0\u0db6\0\u0dec\0\u0e22"+
    "\0\u0e58\0\u0252\0\u0e8e\0\u0ec4\0\u0efa\0\u0f30\0\u0f66\0\u0f9c"+
    "\0\u0fd2\0\u1008\0\u103e\0\u1074\0\u10aa\0\u10e0\0\u1116\0\u114c"+
    "\0\u1182\0\u0252\0\u11b8\0\u0252\0\u11ee\0\u1224\0\u125a\0\u1290"+
    "\0\u12c6\0\u0252\0\u12fc\0\u1332\0\u1368\0\u139e\0\u13d4\0\u140a"+
    "\0\u1440\0\u1476\0\u14ac\0\u0252\0\u14e2\0\u1518\0\u154e\0\u1584"+
    "\0\u15ba\0\u15f0\0\u1626\0\u165c\0\u0252\0\u1692\0\u16c8\0\u16fe"+
    "\0\u1734\0\u176a\0\u17a0\0\u17d6\0\u180c\0\u1842\0\u1878\0\u18ae"+
    "\0\u18e4\0\u191a\0\u1950\0\u1986\0\u19bc\0\u19f2\0\u1a28\0\u1a5e"+
    "\0\u1a94\0\u1aca\0\u0252\0\u1b00\0\u1b36\0\u1b6c\0\u1ba2\0\u1bd8"+
    "\0\u1c0e\0\u1c44\0\u1c7a\0\u1cb0\0\u1ce6\0\u1d1c\0\u1d52\0\u1d88"+
    "\0\u1dbe\0\u1df4\0\u1e2a\0\u1e60\0\u1e96\0\u1ecc\0\u1f02\0\u1f38"+
    "\0\u1f6e\0\u1f6e\0\u1fa4\0\u1fda\0\u0252\0\u2010\0\u2046\0\u207c"+
    "\0\u20b2\0\u20e8\0\u211e\0\u2154\0\u218a\0\u21c0\0\u21f6\0\u222c"+
    "\0\u2262\0\u2298\0\u22ce\0\u2304\0\u233a\0\u2370\0\u23a6\0\u23dc"+
    "\0\u2412\0\u2448\0\u247e\0\u24b4\0\u24ea\0\u2520\0\u2556\0\u258c"+
    "\0\u25c2\0\u25f8\0\u262e\0\u2664\0\u269a\0\u26d0\0\u2706\0\u273c"+
    "\0\u2772\0\u27a8\0\u27de\0\u2814\0\u284a\0\u2880\0\u28b6\0\u28ec"+
    "\0\u2922\0\u2958\0\u298e\0\u29c4\0\u29fa\0\u2a30\0\u2a66\0\u2a9c"+
    "\0\u2ad2\0\u2b08\0\u2b3e\0\u2b74\0\u2baa\0\u2be0\0\u2c16\0\u2c4c"+
    "\0\u2c82\0\u2cb8\0\u2cee\0\u2d24\0\u2d5a\0\u2d90\0\u2dc6\0\u2dfc"+
    "\0\u2e32\0\u2e68\0\u2e9e\0\u2ed4\0\u2f0a\0\u2f40\0\u2f76\0\u0252"+
    "\0\u2fac\0\u2fe2\0\u3018\0\u304e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[244];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\12\1\13\45\12\1\14\10\12\1\15\5\12\60\16"+
    "\1\17\5\16\47\20\1\21\10\20\1\22\5\20\1\23"+
    "\1\24\45\23\1\0\16\23\6\0\1\25\1\0\1\25"+
    "\1\26\5\0\1\25\1\0\1\26\1\0\1\25\2\27"+
    "\7\0\2\26\15\0\2\30\17\0\1\31\10\0\1\31"+
    "\5\0\2\32\20\0\1\33\1\0\2\34\6\0\2\31"+
    "\10\0\1\35\1\0\1\35\1\36\5\0\1\35\1\0"+
    "\1\36\1\0\1\35\2\37\7\0\2\36\15\0\2\40"+
    "\17\0\1\41\10\0\1\41\5\0\2\42\20\0\1\33"+
    "\1\0\2\43\6\0\2\41\35\0\2\44\4\0\2\45"+
    "\5\0\1\46\64\0\1\47\20\0\1\50\44\0\1\47"+
    "\153\0\1\47\2\0\2\51\63\0\1\52\63\0\1\21"+
    "\70\0\2\53\61\0\1\54\20\0\1\23\44\0\1\54"+
    "\66\0\1\55\65\0\1\56\65\0\1\57\65\0\1\60"+
    "\65\0\1\61\65\0\1\62\77\0\2\63\52\0\1\64"+
    "\71\0\2\65\21\0\1\65\7\0\1\65\13\0\2\66"+
    "\40\0\1\65\7\0\1\65\70\0\2\65\77\0\2\67"+
    "\35\0\1\41\12\0\1\41\75\0\2\41\37\0\1\70"+
    "\10\0\1\70\56\0\1\71\12\0\1\71\103\0\2\45"+
    "\24\0\2\72\2\0\1\73\5\0\1\72\21\0\2\74"+
    "\2\0\2\75\4\0\1\47\2\0\2\76\70\0\2\77"+
    "\60\0\2\100\70\0\2\101\62\0\2\102\21\0\1\102"+
    "\7\0\1\102\13\0\2\66\40\0\1\102\7\0\1\102"+
    "\70\0\2\102\77\0\2\103\35\0\1\31\12\0\1\31"+
    "\112\0\1\104\50\0\2\31\66\0\2\66\30\0\2\66"+
    "\7\0\1\105\1\66\113\0\2\66\70\0\2\106\64\0"+
    "\2\65\20\0\2\72\2\0\1\73\5\0\1\72\21\0"+
    "\2\74\2\0\2\75\7\0\2\76\20\0\1\107\10\0"+
    "\1\107\57\0\1\110\7\0\1\110\2\0\2\111\7\0"+
    "\2\112\6\0\2\113\1\0\1\114\3\0\2\115\47\0"+
    "\2\116\7\0\1\117\65\0\1\120\23\0\1\121\10\0"+
    "\1\121\124\0\2\122\14\0\1\123\10\0\1\123\116\0"+
    "\1\65\65\0\1\67\67\0\2\66\23\0\1\124\7\0"+
    "\1\124\107\0\2\125\30\0\1\126\10\0\1\126\56\0"+
    "\1\112\7\0\1\112\2\0\2\112\7\0\2\112\103\0"+
    "\2\112\20\0\1\127\12\0\1\127\53\0\1\130\7\0"+
    "\1\130\2\0\2\131\7\0\2\132\15\0\2\133\16\0"+
    "\1\112\1\0\1\112\6\0\1\112\3\0\1\112\51\0"+
    "\1\134\1\135\7\0\1\134\2\0\1\135\7\0\2\136"+
    "\25\0\2\134\41\0\2\137\107\0\2\140\17\0\1\141"+
    "\56\0\1\142\10\0\1\142\63\0\1\143\60\0\1\144"+
    "\12\0\1\144\60\0\1\145\3\0\1\145\53\0\1\146"+
    "\12\0\1\146\103\0\2\147\73\0\1\150\65\0\1\151"+
    "\65\0\1\152\43\0\2\134\110\0\2\134\62\0\1\153"+
    "\65\0\1\154\21\0\1\155\1\0\2\155\1\0\1\155"+
    "\10\0\2\155\1\156\1\157\1\0\1\155\1\0\2\155"+
    "\1\0\1\155\1\0\1\155\1\0\1\155\1\0\1\155"+
    "\1\0\1\155\1\0\1\155\4\0\1\155\1\0\1\155"+
    "\1\0\1\155\3\0\1\155\1\0\1\155\4\0\1\160"+
    "\1\0\2\160\1\0\1\160\10\0\2\160\1\0\1\160"+
    "\1\0\1\160\1\0\2\160\1\0\1\160\1\0\1\160"+
    "\1\0\1\160\1\0\1\160\1\0\1\160\1\0\1\160"+
    "\4\0\1\160\1\0\1\160\1\0\1\160\3\0\1\160"+
    "\1\0\1\160\7\0\1\161\10\0\1\161\104\0\2\162"+
    "\36\0\1\163\7\0\1\163\107\0\2\164\3\0\1\165"+
    "\26\0\1\132\7\0\1\132\2\0\2\132\7\0\2\132"+
    "\103\0\2\132\16\0\1\132\1\0\1\132\6\0\1\132"+
    "\3\0\1\132\51\0\1\154\1\166\7\0\1\154\2\0"+
    "\1\166\7\0\2\167\25\0\2\154\6\0\1\155\1\0"+
    "\2\155\1\0\1\155\3\0\1\170\4\0\2\155\1\0"+
    "\1\155\1\0\1\155\1\0\2\155\1\0\1\155\1\0"+
    "\1\155\1\0\1\155\1\0\1\155\1\0\1\155\1\0"+
    "\1\155\4\0\1\155\1\0\1\155\1\0\1\155\3\0"+
    "\1\155\1\0\1\155\30\0\2\171\40\0\1\155\1\0"+
    "\2\155\1\0\1\155\3\0\1\170\4\0\2\155\1\0"+
    "\1\155\1\0\1\155\1\171\1\172\1\155\1\0\1\155"+
    "\1\0\1\155\1\0\1\155\1\0\1\155\1\0\1\155"+
    "\1\0\1\155\4\0\1\155\1\0\1\155\1\0\1\155"+
    "\3\0\1\155\1\0\1\155\4\0\1\160\1\0\2\160"+
    "\1\0\1\160\3\0\1\173\4\0\2\160\1\0\1\160"+
    "\1\0\1\160\1\0\2\160\1\0\1\160\1\0\1\160"+
    "\1\0\1\160\1\0\1\160\1\0\1\160\1\0\1\160"+
    "\4\0\1\160\1\0\1\160\1\0\1\160\3\0\1\160"+
    "\1\0\1\160\6\0\1\174\10\0\1\174\107\0\2\175"+
    "\35\0\1\72\114\0\2\176\73\0\1\177\65\0\1\200"+
    "\20\0\2\170\1\0\2\170\1\0\1\170\3\0\1\201"+
    "\4\0\2\170\1\0\1\170\1\0\1\170\1\0\2\170"+
    "\1\0\1\170\1\0\1\170\1\0\1\170\1\0\1\170"+
    "\1\0\1\170\1\0\2\170\3\0\1\170\1\0\1\170"+
    "\1\0\1\170\3\0\1\170\1\0\1\170\41\0\2\202"+
    "\27\0\1\155\1\0\2\155\1\0\1\155\3\0\1\170"+
    "\4\0\2\155\1\0\1\155\1\0\1\155\1\0\2\155"+
    "\1\0\1\155\1\0\1\155\1\0\1\155\1\202\1\203"+
    "\1\0\1\155\1\0\1\155\4\0\1\155\1\0\1\155"+
    "\1\0\1\155\3\0\1\155\1\0\1\155\3\0\2\173"+
    "\1\0\2\173\1\0\1\173\3\0\1\204\4\0\2\173"+
    "\1\0\1\173\1\0\1\173\1\0\2\173\1\0\1\173"+
    "\1\0\1\173\1\0\1\173\1\0\1\173\1\0\1\173"+
    "\1\0\2\173\3\0\1\173\1\0\1\173\1\0\1\173"+
    "\3\0\1\173\1\0\1\173\5\0\1\66\123\0\2\46"+
    "\60\0\2\205\53\0\2\154\110\0\2\154\61\0\1\206"+
    "\61\0\2\207\25\0\1\155\1\0\2\155\1\0\1\155"+
    "\3\0\1\170\4\0\2\155\1\0\1\155\1\0\1\155"+
    "\1\0\2\155\1\0\1\155\1\0\1\155\1\0\1\155"+
    "\1\0\1\155\1\207\1\210\1\0\1\155\4\0\1\155"+
    "\1\0\1\155\1\0\1\155\3\0\1\155\1\0\1\155"+
    "\47\0\1\211\34\0\1\212\3\0\1\212\112\0\1\206"+
    "\11\0\1\213\41\0\2\214\33\0\1\155\1\0\2\155"+
    "\1\0\1\155\3\0\1\170\4\0\2\155\1\0\1\155"+
    "\1\0\1\155\1\0\2\155\1\0\1\155\1\214\1\215"+
    "\1\0\1\155\1\0\1\155\1\0\1\155\1\0\1\155"+
    "\4\0\1\155\1\0\1\155\1\0\1\155\3\0\1\155"+
    "\1\0\1\155\47\0\1\211\11\0\1\216\47\0\2\217"+
    "\73\0\2\220\16\0\1\155\1\0\2\155\1\0\1\155"+
    "\3\0\1\170\4\0\2\155\1\0\1\155\1\0\1\155"+
    "\1\0\2\155\1\0\1\155\1\0\1\155\1\0\1\155"+
    "\1\0\1\155\1\0\1\155\1\0\1\155\3\0\1\220"+
    "\1\221\1\0\1\155\1\0\1\155\3\0\1\155\1\0"+
    "\1\155\60\222\1\0\5\222\45\0\2\223\52\0\2\224"+
    "\35\0\1\155\1\0\2\155\1\0\1\155\3\0\1\170"+
    "\4\0\2\155\1\0\1\155\1\0\1\155\1\0\2\155"+
    "\1\224\1\225\1\0\1\155\1\0\1\155\1\0\1\155"+
    "\1\0\1\155\1\0\1\155\4\0\1\155\1\0\1\155"+
    "\1\0\1\155\3\0\1\155\1\0\1\155\60\222\1\226"+
    "\5\222\6\0\1\227\10\0\1\227\63\0\1\230\54\0"+
    "\1\155\1\0\2\155\1\0\1\155\3\0\1\231\4\0"+
    "\2\155\1\0\1\155\1\0\1\155\1\0\2\155\1\0"+
    "\1\155\1\0\1\155\1\0\1\155\1\0\1\155\1\0"+
    "\1\155\1\0\1\155\4\0\1\155\1\0\1\155\1\0"+
    "\1\155\3\0\1\155\1\0\1\155\51\0\1\232\47\0"+
    "\2\165\34\0\2\230\1\0\2\230\1\0\1\230\3\0"+
    "\1\233\4\0\2\230\1\0\1\230\1\0\1\230\1\0"+
    "\2\230\1\0\1\230\1\0\1\230\1\0\1\230\1\0"+
    "\1\230\1\0\1\230\1\0\2\230\3\0\1\230\1\0"+
    "\1\230\1\0\1\230\3\0\1\230\1\0\1\230\3\0"+
    "\2\231\1\0\2\231\1\0\1\231\3\0\1\234\4\0"+
    "\2\231\1\0\1\231\1\0\1\231\1\0\2\231\1\0"+
    "\1\231\1\0\1\231\1\0\1\231\1\0\1\231\1\0"+
    "\1\231\1\0\2\231\3\0\1\231\1\0\1\231\1\0"+
    "\1\231\3\0\1\231\1\0\1\231\52\0\2\235\61\0"+
    "\1\236\65\0\1\237\74\0\2\240\55\0\1\236\11\0"+
    "\1\241\53\0\1\237\11\0\1\242\12\0\1\243\10\0"+
    "\1\243\46\0\60\244\1\0\5\244\61\0\1\245\4\0"+
    "\60\244\1\246\5\244\51\0\1\247\66\0\2\250\70\0"+
    "\2\251\14\0\1\252\10\0\1\252\127\0\1\253\5\0"+
    "\4\253\1\254\4\0\4\253\42\0\1\255\13\0\1\256"+
    "\10\0\1\256\120\0\2\257\21\0\1\260\10\0\1\260"+
    "\123\0\2\261\16\0\1\262\12\0\1\262\50\0\1\263"+
    "\10\0\1\263\57\0\1\264\7\0\1\264\61\0\1\265"+
    "\62\0\1\253\63\0\1\266\12\0\1\266\7\0\2\267"+
    "\2\270\13\0\2\271\53\0\2\272\62\0\2\273\77\0"+
    "\2\274\45\0\2\275\42\0\1\276\7\0\1\276\50\0"+
    "\1\277\65\0\1\300\107\0\2\274\122\0\2\224\52\0"+
    "\2\271\36\0\2\301\112\0\2\302\55\0\2\303\45\0"+
    "\2\304\50\0\1\305\12\0\1\305\57\0\1\306\53\0"+
    "\2\306\1\0\2\306\1\0\1\306\3\0\1\307\4\0"+
    "\2\306\1\0\1\306\1\0\1\306\1\0\2\306\1\0"+
    "\1\306\1\0\1\306\1\0\1\306\1\0\1\306\1\0"+
    "\1\306\1\0\2\306\3\0\1\306\1\0\1\306\1\0"+
    "\1\306\3\0\1\306\1\0\1\306\47\0\1\310\65\0"+
    "\1\310\11\0\1\311\4\0\60\312\1\0\65\312\1\313"+
    "\5\312\51\0\1\314\66\0\2\315\70\0\2\316\14\0"+
    "\1\317\10\0\1\317\127\0\1\320\5\0\2\320\2\0"+
    "\1\321\5\0\1\320\44\0\1\322\13\0\1\323\10\0"+
    "\1\323\120\0\2\324\21\0\1\325\10\0\1\325\123\0"+
    "\2\326\16\0\1\327\12\0\1\327\50\0\1\330\10\0"+
    "\1\330\57\0\1\331\7\0\1\331\61\0\1\332\62\0"+
    "\1\320\63\0\1\333\12\0\1\333\103\0\2\334\34\0"+
    "\1\335\7\0\1\335\130\0\2\336\15\0\1\337\74\0"+
    "\2\340\46\0\1\341\10\0\1\341\122\0\2\342\25\0"+
    "\1\343\117\0\1\344\65\0\1\344\11\0\1\345\4\0"+
    "\60\346\1\0\65\346\1\347\5\346\51\0\1\350\66\0"+
    "\2\351\70\0\2\352\14\0\1\353\10\0\1\353\127\0"+
    "\1\354\5\0\2\354\2\0\1\355\5\0\1\354\33\0"+
    "\1\356\24\0\1\357\10\0\1\357\46\0\1\360\1\361"+
    "\45\360\1\356\16\360\7\0\1\362\10\0\1\362\47\0"+
    "\1\360\73\0\1\363\12\0\1\363\53\0\1\364\7\0"+
    "\1\364\56\0\1\354\53\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12420];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\11\0\2\1\1\11\1\1\1\11\1\1\1\11\2\1"+
    "\31\0\1\1\11\0\1\1\21\0\1\1\1\0\1\11"+
    "\15\0\1\1\1\0\1\11\1\0\1\11\5\0\1\11"+
    "\4\0\1\1\4\0\1\11\10\0\1\11\25\0\1\11"+
    "\26\0\1\1\2\0\1\11\112\0\1\11\1\1\3\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[244];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /* user code: */
	
	/* Custom java code */

    @Override
	public String language() { return "IT"; }

	@Override
	public String version() { return "0.3"; }


	/* An empty default constructor is required to comply with LinkolnService */
	
	public AliasesExtended() { }
	
	@Override
	public final boolean run() {
		
		try {
			
			yyreset(new StringReader(getInput()));
			yylex();
			
		} catch (IOException e) {

			e.printStackTrace();
			return false;
		}
		
		return true;
	}
	
	@Override
	protected void addValue() {
	
		//annotationEntity.setValue("value");
	} 



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AliasesExtended(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 382) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { addText(yytext());
	position++;
            } 
            // fall through
          case 14: break;
          case 2: 
            { addText(yytext());
		position++;
            } 
            // fall through
          case 15: break;
          case 3: 
            { checkEnd();
            } 
            // fall through
          case 16: break;
          case 4: 
            { annotate(new Article(), yytext(), false, false);
		annotationEntity = null; //Altrimenti checkEnd() aggiunge l'entità una seconda volta
		offset += yylength();
            } 
            // fall through
          case 17: break;
          case 5: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 3;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos, zzMarkedPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 6;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos, zzStartRead);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              };
              zzMarkedPos = zzFPos;
            }
            { annotate(new Article(), yytext().substring(1), true, false);
            } 
            // fall through
          case 18: break;
          case 6: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 3;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos, zzMarkedPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 4;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos, zzStartRead);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              };
              zzMarkedPos = zzFPos;
            }
            { annotate(new Article(), yytext().substring(1), true, false);
            } 
            // fall through
          case 19: break;
          case 7: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 3;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos, zzMarkedPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 7;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos, zzStartRead);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              };
              zzMarkedPos = zzFPos;
            }
            { annotate(new Article(), yytext().substring(1), true, false);
            } 
            // fall through
          case 20: break;
          case 8: 
            { addText(yytext());
		position--; //account for the following {LKN_C} character
		yybegin(YYINITIAL);
            } 
            // fall through
          case 21: break;
          case 9: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 3;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos, zzMarkedPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 8;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos, zzStartRead);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              };
              zzMarkedPos = zzFPos;
            }
            { annotate(new Article(), yytext().substring(1), true, false);
            } 
            // fall through
          case 22: break;
          case 10: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 3;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos, zzMarkedPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 5;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos, zzStartRead);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              };
              zzMarkedPos = zzFPos;
            }
            { annotate(new Article(), yytext().substring(1), true, false);
            } 
            // fall through
          case 23: break;
          case 11: 
            { addText(yytext()); 
	yybegin(lkn);
            } 
            // fall through
          case 24: break;
          case 12: 
            { AnnotationEntity retrievedEntity = retrieveEntity(yytext());
		
		offset += yylength();
		position += retrievedEntity.getText().length();
		
		addText(yytext());
            } 
            // fall through
          case 25: break;
          case 13: 
            { annotationEntity = null;
	offset = 0;
	length = yylength();
	yypushback(length);
	length = length-1; //account for the right edge
	yybegin(inPattern);
            } 
            // fall through
          case 26: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java AliasesExtended [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        AliasesExtended scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new AliasesExtended(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
