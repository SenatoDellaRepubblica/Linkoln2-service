/* The following code was generated by JFlex 1.7.0 */

/*******************************************************************************
 * Copyright (c) 2016-2021 Institute of Legal Information and Judicial Systems IGSG-CNR (formerly ITTIG-CNR)
 * 
 * This program and the accompanying materials  are made available under the terms of the GNU General Public
 * License as published by the Free Software Foundation; either version 3 of the License, or (at your option)
 * any later version. 
 * You may not use this work except in compliance with the Licence.
 * You may obtain a copy of the Licence at: https://www.gnu.org/licenses/gpl-3.0.txt
 * Unless required by applicable law or agreed to in writing, software distributed under the Licence is 
 * distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the Licence for the specific language governing permissions and limitations under the Licence.
 *  
 * Authors: Lorenzo Bacci (IGSG-CNR)
 ******************************************************************************/
 package it.cnr.igsg.linkoln.service.impl.it;

import java.io.IOException;
import java.io.StringReader;

import it.cnr.igsg.linkoln.entity.*;
import it.cnr.igsg.linkoln.service.*;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>jflex/RegionalLegislationAuthorities.jflex</tt>
 */
public class RegionalLegislationAuthorities extends LinkolnAnnotationService {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int lkn = 2;
  public static final int geoState = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\13\1\2\1\0\1\13\1\1\22\0\1\13\5\0\1\5"+
    "\1\0\1\14\1\14\2\0\1\14\1\3\1\54\1\55\1\53\1\53"+
    "\1\53\1\53\1\53\1\53\1\53\1\53\1\53\1\53\1\15\1\12"+
    "\5\0\1\27\1\7\1\41\1\63\1\37\1\72\1\31\1\23\1\50"+
    "\1\23\1\66\1\61\1\57\1\6\1\52\1\11\1\23\1\33\1\24"+
    "\1\45\1\43\1\35\1\74\1\23\1\23\1\23\1\67\1\0\1\70"+
    "\1\0\1\4\1\0\1\26\1\20\1\40\1\62\1\36\1\71\1\30"+
    "\1\16\1\47\1\16\1\65\1\60\1\56\1\17\1\51\1\22\1\16"+
    "\1\32\1\21\1\44\1\42\1\34\1\73\1\16\1\16\1\16\12\0"+
    "\1\0\44\0\1\0\5\0\1\0\3\0\1\0\5\0\1\0\5\0"+
    "\1\25\1\25\4\25\1\0\1\25\1\25\1\25\2\25\1\25\1\25"+
    "\2\25\1\0\1\25\1\25\1\25\3\25\2\0\1\25\1\25\2\25"+
    "\3\0\1\16\1\16\4\16\1\0\1\16\1\16\1\16\2\16\1\16"+
    "\1\16\2\16\1\0\1\16\1\16\1\16\3\16\2\0\1\16\1\16"+
    "\2\16\53\0\1\25\1\16\6\0\2\46\66\0\1\25\1\16\4\0"+
    "\1\25\1\16\17\0\1\10\u1c88\0\1\25\1\16\216\0\2\16\42\0"+
    "\1\25\1\16\u0144\0\1\13\20\0\1\3\1\3\4\0\1\0\16\0"+
    "\1\0\1\0\u0100\0\1\64\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\4\1\2\2\1\3\52\0\1\4\36\0\2\5"+
    "\1\0\1\5\2\6\2\0\1\6\40\0\2\7\1\0"+
    "\1\7\2\10\2\0\1\10\3\0\1\6\24\0\1\5"+
    "\5\0\1\11\10\0\1\10\17\0\1\7\6\0\2\12"+
    "\27\0\2\13\117\0\1\14\4\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[308];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\u0131\0\u016e\0\u01ab"+
    "\0\u01e8\0\u01ab\0\u0225\0\u01ab\0\u0262\0\u029f\0\u02dc\0\u0319"+
    "\0\u0356\0\u0393\0\u03d0\0\u0131\0\u040d\0\u044a\0\u0487\0\u04c4"+
    "\0\u0501\0\u053e\0\u057b\0\u05b8\0\u05f5\0\u0632\0\u066f\0\u06ac"+
    "\0\u06e9\0\u0726\0\u0763\0\u07a0\0\u07dd\0\u081a\0\u0857\0\u0894"+
    "\0\u08d1\0\u090e\0\u094b\0\u0988\0\u09c5\0\u0a02\0\u0a3f\0\u0a7c"+
    "\0\u0ab9\0\u0af6\0\u0b33\0\u0b70\0\u0bad\0\u0bea\0\u01ab\0\u0c27"+
    "\0\u0c64\0\u0ca1\0\u0cde\0\u0d1b\0\u0d58\0\u0d95\0\u0dd2\0\u0e0f"+
    "\0\u0e4c\0\u0e89\0\u0ec6\0\u0f03\0\u0f40\0\u0f7d\0\u0fba\0\u0ff7"+
    "\0\u1034\0\u1071\0\u10ae\0\u10eb\0\u1128\0\u1165\0\u11a2\0\u11df"+
    "\0\u121c\0\u1259\0\u1296\0\u12d3\0\u1310\0\u01ab\0\u134d\0\u138a"+
    "\0\u13c7\0\u01ab\0\u1404\0\u1441\0\u147e\0\u14bb\0\u14f8\0\u1535"+
    "\0\u1572\0\u15af\0\u15ec\0\u01ab\0\u1629\0\u1666\0\u16a3\0\u16e0"+
    "\0\u171d\0\u175a\0\u1797\0\u17d4\0\u1811\0\u184e\0\u188b\0\u18c8"+
    "\0\u1905\0\u1942\0\u197f\0\u19bc\0\u19f9\0\u1a36\0\u1a73\0\u1ab0"+
    "\0\u1aed\0\u1b2a\0\u1b67\0\u1ba4\0\u1be1\0\u1c1e\0\u01ab\0\u1c5b"+
    "\0\u1c98\0\u1cd5\0\u01ab\0\u1d12\0\u1d4f\0\u1d8c\0\u1dc9\0\u1e06"+
    "\0\u1e43\0\u1e80\0\u1ebd\0\u1ebd\0\u1efa\0\u1f37\0\u1f74\0\u1fb1"+
    "\0\u1fee\0\u202b\0\u2068\0\u20a5\0\u20e2\0\u211f\0\u215c\0\u2199"+
    "\0\u21d6\0\u2213\0\u2250\0\u228d\0\u22ca\0\u2307\0\u2344\0\u2381"+
    "\0\u2381\0\u23be\0\u23fb\0\u2438\0\u2475\0\u01ab\0\u24b2\0\u24ef"+
    "\0\u252c\0\u2569\0\u25a6\0\u25e3\0\u2620\0\u265d\0\u269a\0\u269a"+
    "\0\u26d7\0\u2714\0\u2751\0\u278e\0\u27cb\0\u2808\0\u2845\0\u2882"+
    "\0\u28bf\0\u28fc\0\u2939\0\u2976\0\u29b3\0\u29f0\0\u2a2d\0\u2a2d"+
    "\0\u2a6a\0\u2aa7\0\u2ae4\0\u2b21\0\u2b5e\0\u01ab\0\u2b9b\0\u2bd8"+
    "\0\u2c15\0\u2c52\0\u2c8f\0\u2ccc\0\u2d09\0\u2d46\0\u2d83\0\u2dc0"+
    "\0\u2dfd\0\u2e3a\0\u2e77\0\u2eb4\0\u2ef1\0\u2f2e\0\u2f6b\0\u2fa8"+
    "\0\u2fe5\0\u3022\0\u305f\0\u309c\0\u30d9\0\u3116\0\u01ab\0\u3153"+
    "\0\u3190\0\u14bb\0\u31cd\0\u320a\0\u3247\0\u3284\0\u32c1\0\u32fe"+
    "\0\u333b\0\u3378\0\u33b5\0\u33f2\0\u342f\0\u346c\0\u34a9\0\u34e6"+
    "\0\u1dc9\0\u13c7\0\u3523\0\u3560\0\u359d\0\u35da\0\u3617\0\u3654"+
    "\0\u3691\0\u36ce\0\u370b\0\u3748\0\u3785\0\u1cd5\0\u37c2\0\u37ff"+
    "\0\u383c\0\u3879\0\u38b6\0\u38f3\0\u3930\0\u396d\0\u39aa\0\u39e7"+
    "\0\u3a24\0\u3a61\0\u3a9e\0\u3adb\0\u3b18\0\u3b55\0\u3b92\0\u3bcf"+
    "\0\u3c0c\0\u3c49\0\u3c86\0\u3cc3\0\u3d00\0\u3d3d\0\u3d7a\0\u3db7"+
    "\0\u3df4\0\u3e31\0\u3e6e\0\u3eab\0\u3ee8\0\u3f25\0\u3f62\0\u3f9f"+
    "\0\u3fdc\0\u4019\0\u4056\0\u4093\0\u40d0\0\u410d\0\u414a\0\u4187"+
    "\0\u41c4\0\u4201\0\u423e\0\u427b\0\u42b8\0\u42f5\0\u4332\0\u436f"+
    "\0\u43ac\0\u43e9\0\u4426\0\u4463";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[308];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\4\6\2\10\1\6\1\10\4\6\30\10"+
    "\1\6\5\10\2\6\6\10\1\6\2\10\1\11\1\6"+
    "\4\10\67\12\1\13\5\12\75\14\1\15\1\16\4\15"+
    "\2\0\1\15\1\0\4\15\30\0\1\15\5\0\2\15"+
    "\6\0\1\15\2\0\2\15\12\0\2\17\1\0\1\17"+
    "\4\0\5\5\3\17\1\5\1\17\1\5\1\17\1\5"+
    "\1\17\1\5\1\17\1\5\1\17\1\5\1\17\1\5"+
    "\1\17\1\5\1\17\1\0\1\5\1\17\1\5\1\17"+
    "\3\0\1\5\1\17\1\5\1\17\1\5\1\17\1\0"+
    "\1\5\1\17\2\0\1\5\1\17\1\5\1\17\10\0"+
    "\1\20\1\21\7\0\1\20\1\21\1\0\1\20\3\0"+
    "\2\22\6\0\2\23\35\0\1\24\5\0\1\20\1\21"+
    "\7\0\1\20\1\21\1\0\1\20\3\0\2\22\6\0"+
    "\2\23\140\0\1\20\1\21\7\0\1\20\1\21\1\0"+
    "\1\20\3\0\2\22\6\0\2\23\16\0\2\25\70\0"+
    "\1\26\27\0\1\27\10\0\1\27\2\0\1\27\13\0"+
    "\2\30\35\0\1\15\5\0\1\27\10\0\1\27\2\0"+
    "\1\27\13\0\2\30\34\0\2\31\3\0\2\17\1\0"+
    "\1\17\1\32\1\31\2\0\5\5\3\17\1\5\1\17"+
    "\1\5\1\17\1\5\1\17\1\5\1\17\1\5\1\17"+
    "\1\5\1\17\1\5\1\17\1\5\1\17\1\0\1\5"+
    "\1\17\1\5\1\17\3\0\1\5\1\17\1\5\1\17"+
    "\1\5\1\17\1\0\1\5\1\17\1\0\1\33\1\5"+
    "\1\17\1\5\1\17\46\0\3\34\56\0\2\35\107\0"+
    "\3\36\75\0\2\37\106\0\3\40\66\0\2\41\61\0"+
    "\3\42\75\0\2\43\23\0\2\31\7\0\1\32\1\31"+
    "\54\0\1\33\15\0\1\44\10\0\1\44\60\0\1\45"+
    "\10\0\1\45\63\0\1\46\10\0\1\46\113\0\2\47"+
    "\77\0\2\50\37\0\1\51\10\0\1\51\36\0\2\52"+
    "\23\0\1\53\10\0\1\53\141\0\3\54\14\0\1\55"+
    "\10\0\1\55\133\0\2\56\25\0\1\57\10\0\1\57"+
    "\2\0\1\57\134\0\3\60\70\0\2\61\21\0\1\62"+
    "\10\0\1\62\2\0\1\62\56\0\1\63\10\0\1\63"+
    "\65\0\1\64\10\0\1\64\2\0\1\64\112\0\2\65"+
    "\46\0\1\66\65\0\1\67\10\0\1\67\137\0\2\70"+
    "\53\0\2\71\40\0\1\72\10\0\1\72\134\0\2\73"+
    "\41\0\2\74\46\0\4\75\1\76\4\0\4\75\12\0"+
    "\2\22\6\0\2\77\4\0\3\100\3\0\1\75\12\0"+
    "\1\101\51\0\2\102\30\0\2\103\2\0\1\104\3\0"+
    "\1\105\1\0\1\103\6\0\1\105\7\0\2\106\4\0"+
    "\2\107\4\0\3\110\3\0\1\103\26\0\1\111\10\0"+
    "\1\111\61\0\1\112\1\0\2\112\1\0\1\112\11\0"+
    "\2\112\2\0\1\112\1\0\1\112\1\0\1\112\1\0"+
    "\1\112\1\0\1\112\1\0\1\112\1\0\1\112\1\0"+
    "\1\112\2\0\1\112\1\0\1\112\4\0\1\112\1\0"+
    "\1\112\1\0\1\112\2\0\1\112\3\0\1\112\1\0"+
    "\1\112\26\0\2\113\53\0\1\114\10\0\1\114\63\0"+
    "\1\115\10\0\1\115\132\0\1\116\57\0\2\117\34\0"+
    "\4\75\1\76\4\0\4\75\12\0\2\22\6\0\2\77"+
    "\25\0\1\101\13\0\1\120\10\0\1\120\126\0\2\121"+
    "\104\0\2\122\71\0\2\123\41\0\2\124\46\0\2\103"+
    "\2\0\1\104\3\0\1\105\1\0\1\103\6\0\1\105"+
    "\7\0\2\106\4\0\2\107\41\0\1\125\10\0\1\125"+
    "\55\0\1\126\1\127\4\126\2\0\1\126\1\0\4\126"+
    "\14\0\2\130\12\0\1\126\5\0\1\131\1\126\6\0"+
    "\1\126\2\0\2\126\4\0\1\132\1\133\4\132\2\0"+
    "\1\132\1\0\4\132\14\0\2\134\2\0\2\135\6\0"+
    "\1\132\5\0\1\136\1\132\6\0\1\132\2\0\2\132"+
    "\55\0\2\137\52\0\2\140\101\0\2\141\41\0\1\112"+
    "\1\0\2\112\1\0\1\112\3\0\1\142\5\0\2\112"+
    "\2\0\1\112\1\0\1\112\1\0\1\112\1\0\1\112"+
    "\1\0\1\112\1\0\1\112\1\0\1\112\1\0\1\112"+
    "\2\0\1\112\1\0\1\112\4\0\1\112\1\0\1\112"+
    "\1\0\1\112\2\0\1\112\3\0\1\112\1\0\1\112"+
    "\40\0\2\143\71\0\2\144\42\0\1\31\156\0\1\145"+
    "\56\0\2\146\31\0\1\147\10\0\1\147\62\0\1\51"+
    "\10\0\1\51\113\0\2\150\121\0\3\151\7\0\2\124"+
    "\2\0\1\152\3\0\1\153\1\0\1\124\6\0\1\153"+
    "\7\0\2\154\4\0\2\155\42\0\1\156\10\0\1\156"+
    "\56\0\1\126\143\0\2\157\22\0\1\126\1\127\4\126"+
    "\2\0\1\126\1\0\4\126\30\0\1\126\5\0\2\126"+
    "\6\0\1\126\2\0\2\126\6\0\1\132\72\0\1\132"+
    "\1\133\4\132\2\0\1\132\1\0\4\132\30\0\1\132"+
    "\5\0\1\136\1\132\6\0\1\132\2\0\2\132\34\0"+
    "\2\160\43\0\1\132\1\133\4\132\2\0\1\132\1\0"+
    "\4\132\30\0\1\132\5\0\2\132\6\0\1\132\2\0"+
    "\2\132\62\0\2\161\75\0\2\162\14\0\2\141\2\0"+
    "\1\163\5\0\1\141\53\0\1\164\10\0\2\142\1\0"+
    "\2\142\1\0\1\142\3\0\1\165\5\0\2\142\2\0"+
    "\1\142\1\0\1\142\1\0\1\142\1\0\1\142\1\0"+
    "\1\142\1\0\1\142\1\0\1\142\1\0\1\142\2\0"+
    "\1\142\1\0\2\142\3\0\1\142\1\0\1\142\1\0"+
    "\1\142\2\0\1\142\3\0\1\142\1\0\1\142\51\0"+
    "\2\166\22\0\67\167\1\0\5\167\1\0\4\146\1\170"+
    "\4\0\4\146\22\0\2\171\25\0\1\172\15\0\1\173"+
    "\10\0\1\173\2\0\1\173\56\0\1\174\10\0\1\174"+
    "\63\0\1\175\10\0\1\175\63\0\1\176\10\0\1\176"+
    "\55\0\1\177\1\200\4\177\2\0\1\177\1\0\4\177"+
    "\14\0\2\201\12\0\1\177\5\0\1\202\1\177\6\0"+
    "\1\177\2\0\2\177\4\0\1\203\1\204\4\203\2\0"+
    "\1\203\1\0\4\203\14\0\2\205\2\0\2\206\6\0"+
    "\1\203\5\0\1\207\1\203\6\0\1\203\2\0\2\203"+
    "\55\0\2\210\32\0\1\211\10\0\1\211\2\0\1\211"+
    "\104\0\2\212\37\0\1\132\1\133\4\132\2\0\1\132"+
    "\1\0\4\132\30\0\1\213\2\214\3\0\1\136\1\132"+
    "\6\0\1\132\2\0\2\132\46\0\2\215\77\0\3\216"+
    "\32\0\1\217\10\0\1\217\135\0\2\220\66\0\1\221"+
    "\22\0\4\166\1\222\4\0\4\166\22\0\2\30\25\0"+
    "\1\223\5\0\67\167\1\0\1\224\4\167\6\0\1\225"+
    "\10\0\1\225\126\0\2\226\102\0\2\227\24\0\1\230"+
    "\10\0\1\230\116\0\2\231\44\0\1\232\66\0\1\233"+
    "\10\0\1\233\56\0\1\177\143\0\2\234\22\0\1\177"+
    "\1\200\4\177\2\0\1\177\1\0\4\177\30\0\1\177"+
    "\5\0\2\177\6\0\1\177\2\0\2\177\6\0\1\203"+
    "\72\0\1\203\1\204\4\203\2\0\1\203\1\0\4\203"+
    "\30\0\1\203\5\0\1\207\1\203\6\0\1\203\2\0"+
    "\2\203\34\0\2\235\43\0\1\203\1\204\4\203\2\0"+
    "\1\203\1\0\4\203\30\0\1\203\5\0\2\203\6\0"+
    "\1\203\2\0\2\203\62\0\2\236\26\0\1\237\10\0"+
    "\1\237\52\0\1\126\1\127\4\126\2\0\1\126\1\0"+
    "\4\126\30\0\1\240\2\241\3\0\1\131\1\126\6\0"+
    "\1\126\2\0\2\126\55\0\2\242\30\0\1\243\10\0"+
    "\1\243\126\0\2\103\31\0\1\244\10\0\1\244\140\0"+
    "\3\245\61\0\1\221\14\0\1\246\12\0\1\247\10\0"+
    "\1\247\135\0\2\250\13\0\53\167\1\251\13\167\1\0"+
    "\1\224\4\167\7\0\1\252\10\0\1\252\132\0\2\52"+
    "\101\0\3\253\20\0\1\75\120\0\2\75\45\0\1\254"+
    "\10\0\1\254\2\0\1\254\60\0\1\255\10\0\1\255"+
    "\2\0\1\255\104\0\2\256\37\0\1\203\1\204\4\203"+
    "\2\0\1\203\1\0\4\203\30\0\1\257\2\260\3\0"+
    "\1\207\1\203\6\0\1\203\2\0\2\203\46\0\2\261"+
    "\43\0\1\103\70\0\1\262\10\0\1\262\63\0\1\263"+
    "\10\0\1\263\103\0\2\264\6\0\2\265\45\0\1\266"+
    "\10\0\1\266\2\0\1\266\56\0\1\267\10\0\1\267"+
    "\64\0\1\270\10\0\1\270\140\0\3\271\6\0\15\167"+
    "\1\272\35\167\1\251\13\167\1\0\1\224\4\167\10\0"+
    "\1\273\10\0\1\273\2\0\1\273\56\0\1\274\10\0"+
    "\1\274\121\0\2\275\40\0\1\276\10\0\1\276\52\0"+
    "\1\177\1\200\4\177\2\0\1\177\1\0\4\177\30\0"+
    "\1\277\2\300\3\0\1\202\1\177\6\0\1\177\2\0"+
    "\2\177\55\0\2\301\30\0\1\302\10\0\1\302\115\0"+
    "\2\303\61\0\2\304\125\0\2\305\13\0\1\306\1\307"+
    "\4\306\2\0\1\306\1\0\4\306\30\0\1\306\5\0"+
    "\2\306\6\0\1\306\2\0\2\306\15\0\1\310\10\0"+
    "\1\310\67\0\1\311\67\0\1\312\10\0\1\312\2\0"+
    "\1\312\56\0\1\313\10\0\1\313\55\0\67\167\1\0"+
    "\1\224\2\314\2\167\11\0\1\315\10\0\1\315\67\0"+
    "\1\316\70\0\1\317\10\0\1\317\64\0\1\124\70\0"+
    "\1\320\10\0\1\320\63\0\1\321\10\0\1\321\103\0"+
    "\2\322\6\0\2\323\103\0\3\324\104\0\2\325\51\0"+
    "\1\265\10\0\1\265\27\0\1\306\104\0\1\141\72\0"+
    "\1\326\10\0\1\326\2\0\1\326\61\0\1\327\10\0"+
    "\1\327\67\0\1\330\57\0\51\167\2\331\14\167\1\0"+
    "\1\224\4\167\12\0\1\146\72\0\1\332\10\0\1\332"+
    "\2\0\1\332\143\0\2\333\40\0\2\334\61\0\2\335"+
    "\125\0\2\336\13\0\1\337\1\340\4\337\2\0\1\337"+
    "\1\0\4\337\30\0\1\337\5\0\2\337\6\0\1\337"+
    "\2\0\2\337\32\0\2\341\103\0\1\342\10\0\1\342"+
    "\71\0\2\343\41\0\1\166\72\0\1\344\10\0\1\344"+
    "\2\0\1\344\50\0\15\167\1\345\51\167\1\0\1\224"+
    "\4\167\44\0\2\346\44\0\1\347\125\0\3\350\104\0"+
    "\2\351\51\0\1\323\10\0\1\323\27\0\1\337\152\0"+
    "\2\352\24\0\1\353\10\0\1\353\116\0\2\354\27\0"+
    "\67\167\1\0\1\224\2\167\2\355\11\0\1\356\10\0"+
    "\1\356\55\0\2\347\1\0\2\347\1\0\1\347\3\0"+
    "\1\357\5\0\2\347\2\0\1\347\1\0\1\347\1\0"+
    "\1\347\1\0\1\347\1\0\1\347\1\0\1\347\1\0"+
    "\1\347\1\0\1\347\2\0\1\347\1\0\2\347\3\0"+
    "\1\347\1\0\1\347\1\0\1\347\2\0\1\347\3\0"+
    "\1\347\1\0\1\347\26\0\2\360\103\0\1\361\10\0"+
    "\1\361\63\0\1\362\10\0\1\362\120\0\2\363\11\0"+
    "\1\364\10\0\1\364\52\0\11\167\1\365\10\167\1\365"+
    "\44\167\1\0\1\224\4\167\73\0\2\366\53\0\1\367"+
    "\101\0\2\370\30\0\1\371\152\0\2\372\44\167\2\373"+
    "\21\167\1\0\1\224\4\167\15\0\1\374\132\0\1\367"+
    "\14\0\1\375\42\0\1\376\10\0\1\376\76\0\2\377"+
    "\37\0\1\u0100\57\0\10\167\1\u0101\10\167\1\u0101\2\167"+
    "\1\u0101\42\167\1\0\1\224\4\167\3\0\2\374\1\0"+
    "\2\374\1\0\1\374\3\0\1\u0102\5\0\2\374\2\0"+
    "\1\374\1\0\1\374\1\0\1\374\1\0\1\374\1\0"+
    "\1\374\1\0\1\374\1\0\1\374\1\0\1\374\2\0"+
    "\1\374\1\0\2\374\3\0\1\374\1\0\1\374\1\0"+
    "\1\374\2\0\1\374\3\0\1\374\1\0\1\374\67\u0103"+
    "\1\0\5\u0103\71\0\2\u0104\5\0\2\u0100\1\0\2\u0100"+
    "\1\0\1\u0100\3\0\1\u0105\5\0\2\u0100\2\0\1\u0100"+
    "\1\0\1\u0100\1\0\1\u0100\1\0\1\u0100\1\0\1\u0100"+
    "\1\0\1\u0100\1\0\1\u0100\1\0\1\u0100\2\0\1\u0100"+
    "\1\0\2\u0100\3\0\1\u0100\1\0\1\u0100\1\0\1\u0100"+
    "\2\0\1\u0100\3\0\1\u0100\1\0\1\u0100\15\167\1\u0106"+
    "\51\167\1\0\1\224\4\167\53\0\1\u0107\21\0\67\u0103"+
    "\1\u0108\5\u0103\15\0\1\u0109\132\0\1\u010a\21\0\6\167"+
    "\1\u010b\10\167\1\u010b\47\167\1\0\1\224\4\167\53\0"+
    "\1\u0107\14\0\1\u010c\61\0\1\u010d\72\0\1\u010e\74\0"+
    "\1\u010a\14\0\1\u010f\4\0\64\167\3\u0110\1\0\1\224"+
    "\4\167\67\u0111\1\0\5\u0111\60\0\2\u0112\66\0\1\u010e"+
    "\14\0\1\u0113\4\0\67\u0114\1\0\5\u0114\60\167\2\u0115"+
    "\5\167\1\0\1\224\4\167\67\u0111\1\u0116\5\u0111\64\0"+
    "\3\u0117\6\0\67\u0118\1\0\5\u0118\67\u0114\1\u0119\5\u0114"+
    "\67\167\1\u011a\1\224\4\167\55\0\1\u011b\25\0\1\u011c"+
    "\10\0\1\u011c\55\0\67\u0118\1\u011d\5\u0118\55\0\1\u011e"+
    "\20\0\2\u011a\7\0\1\u011f\1\u011a\141\0\2\u0120\103\0"+
    "\1\75\61\0\1\u0121\77\0\2\u0122\24\0\1\u0123\10\0"+
    "\1\u0123\136\0\3\u0124\66\0\2\u0125\77\0\3\u0126\16\0"+
    "\1\u0127\10\0\1\u0127\2\0\1\u0127\56\0\1\u0128\10\0"+
    "\1\u0128\141\0\3\u0129\14\0\1\u012a\10\0\1\u012a\64\0"+
    "\1\u012b\10\0\1\u012b\144\0\1\146\12\0\1\u012c\10\0"+
    "\1\u012c\145\0\1\166\12\0\1\u012d\10\0\1\u012d\145\0"+
    "\1\u012e\11\0\1\u011a\70\0\2\u012e\2\0\1\u012f\2\u0130"+
    "\1\0\1\u0130\1\0\1\u012e\7\0\3\u0130\1\0\1\u0130"+
    "\1\0\1\u0130\1\0\1\u0130\1\0\1\u0130\1\0\1\u0130"+
    "\1\0\1\u0130\1\0\1\u0130\1\0\1\u0130\2\0\1\u0130"+
    "\1\0\1\u0130\4\0\1\u0130\1\0\1\u0130\1\0\1\u0130"+
    "\2\0\1\u0130\3\0\1\u0130\1\0\1\u0130\6\0\1\u0131"+
    "\10\0\1\u0131\63\0\2\u0130\1\0\1\u0130\4\0\30\u0130"+
    "\1\0\4\u0130\3\0\6\u0130\1\0\2\u0130\2\0\4\u0130"+
    "\7\0\1\u0132\10\0\1\u0132\64\0\1\u0133\10\0\1\u0133"+
    "\2\0\1\u0133\61\0\1\u0134\10\0\1\u0134\64\0\1\u012e"+
    "\62\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17568];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\2\1\1\11\1\1\1\11\1\1\1\11\52\0"+
    "\1\11\36\0\1\11\1\1\1\0\1\1\1\11\1\1"+
    "\2\0\1\1\5\0\1\11\32\0\1\11\1\1\1\0"+
    "\1\1\1\11\1\1\2\0\1\1\3\0\1\1\24\0"+
    "\1\1\5\0\1\11\10\0\1\1\17\0\1\1\6\0"+
    "\1\11\1\1\27\0\1\11\1\1\71\0\1\1\25\0"+
    "\1\1\4\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[308];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /* user code: */
	
	/* Custom java code */

    @Override
	public String language() { return "IT"; }

	@Override
	public String version() { return "0.2"; }


	/* An empty default constructor is required to comply with LinkolnService */
	
	public RegionalLegislationAuthorities() { }
	
	@Override
	public final boolean run() {
		
		try {
			
			yyreset(new StringReader(getInput()));
			yylex();
			
		} catch (IOException e) {

			e.printStackTrace();
			return false;
		}
		
		return true;
	}
	



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public RegionalLegislationAuthorities(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 382) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { addText(yytext());
	position++;
            } 
            // fall through
          case 13: break;
          case 2: 
            { addText(yytext());
		position++;
            } 
            // fall through
          case 14: break;
          case 3: 
            { System.out.print(yytext());
            } 
            // fall through
          case 15: break;
          case 4: 
            { addText(yytext());
		position--; //account for the following {LKN_C} character
		yybegin(YYINITIAL);
            } 
            // fall through
          case 16: break;
          case 5: 
            { annotate(new LegislationAuthority(), "IT_PROVINCIAL_COUNCIL", true, true);
            } 
            // fall through
          case 17: break;
          case 6: 
            { annotate(new LegislationAuthority(), "IT_REGIONAL_COUNCIL", true, true);
            } 
            // fall through
          case 18: break;
          case 7: 
            { annotate(new LegislationAuthority(), "IT_PROVINCIAL_GIUNTA", true, true);
            } 
            // fall through
          case 19: break;
          case 8: 
            { annotate(new LegislationAuthority(), "IT_REGIONAL_GIUNTA", true, true);
            } 
            // fall through
          case 20: break;
          case 9: 
            { addText(yytext()); 
	yybegin(lkn);
            } 
            // fall through
          case 21: break;
          case 10: 
            { annotate(new LegislationAuthority(), "IT_MUNICIPAL_COUNCIL", true, true);
            } 
            // fall through
          case 22: break;
          case 11: 
            { annotate(new LegislationAuthority(), "IT_MUNICIPAL_GIUNTA", true, true);
            } 
            // fall through
          case 23: break;
          case 12: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 3;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos, zzMarkedPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 4;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos, zzStartRead);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              };
              zzMarkedPos = zzFPos;
            }
            { 
            	annotate(new LegislationAuthority(), "IT_MUNICIPALITY", true, false);
            } 
            // fall through
          case 24: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java RegionalLegislationAuthorities [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        RegionalLegislationAuthorities scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new RegionalLegislationAuthorities(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
